
644PA_5_1Version.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  0000146e  00001502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000146e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080013e  0080013e  00001540  2**0
                  ALLOC
  3 .stab         00003900  00000000  00000000  00001540  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c0c  00000000  00000000  00004e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00005a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000036b  00000000  00000000  00005b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a66  00000000  00000000  00005e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000091c  00000000  00000000  000078dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015b3  00000000  00000000  000081f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002f0  00000000  00000000  000097ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005fc  00000000  00000000  00009a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009a1  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000017c  00000000  00000000  0000aa39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000028  00000000  00000000  0000abb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
       4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      40:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      50:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      54:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      60:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      68:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      6c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      70:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      74:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      78:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	08 00       	.word	0x0008	; ????
      a6:	00 00       	nop
      a8:	be 92       	st	-X, r11
      aa:	24 49       	sbci	r18, 0x94	; 148
      ac:	12 3e       	cpi	r17, 0xE2	; 226
      ae:	ab aa       	std	Y+51, r10	; 0x33
      b0:	aa 2a       	or	r10, r26
      b2:	be cd       	rjmp	.-1156   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
      b4:	cc cc       	rjmp	.-1640   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
      b6:	4c 3e       	cpi	r20, 0xEC	; 236
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	be ab       	std	Y+54, r27	; 0x36
      be:	aa aa       	std	Y+50, r10	; 0x32
      c0:	aa 3e       	cpi	r26, 0xEA	; 234
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	bf 00       	.word	0x00bf	; ????
      c8:	00 00       	nop
      ca:	80 3f       	cpi	r24, 0xF0	; 240
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 08       	sbc	r0, r0
      d2:	41 78       	andi	r20, 0x81	; 129
      d4:	d3 bb       	out	0x13, r29	; 19
      d6:	43 87       	std	Z+11, r20	; 0x0b
      d8:	d1 13       	cpse	r29, r17
      da:	3d 19       	sub	r19, r13
      dc:	0e 3c       	cpi	r16, 0xCE	; 206
      de:	c3 bd       	out	0x23, r28	; 35
      e0:	42 82       	std	Z+2, r4	; 0x02
      e2:	ad 2b       	or	r26, r29
      e4:	3e 68       	ori	r19, 0x8E	; 142
      e6:	ec 82       	std	Y+4, r14	; 0x04
      e8:	76 be       	out	0x36, r7	; 54
      ea:	d9 8f       	std	Y+25, r29	; 0x19
      ec:	e1 a9       	ldd	r30, Z+49	; 0x31
      ee:	3e 4c       	sbci	r19, 0xCE	; 206
      f0:	80 ef       	ldi	r24, 0xF0	; 240
      f2:	ff be       	out	0x3f, r15	; 63
      f4:	01 c4       	rjmp	.+2050   	; 0x8f8 <bmp085Convert+0xa6>
      f6:	ff 7f       	andi	r31, 0xFF	; 255
      f8:	3f 00       	.word	0x003f	; ????
      fa:	00 00       	nop
	...

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d0 e1       	ldi	r29, 0x10	; 16
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	ee e6       	ldi	r30, 0x6E	; 110
     112:	f4 e1       	ldi	r31, 0x14	; 20
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x10>
     116:	05 90       	lpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	ae 33       	cpi	r26, 0x3E	; 62
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0xc>

00000120 <__do_clear_bss>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	ae e3       	ldi	r26, 0x3E	; 62
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	aa 35       	cpi	r26, 0x5A	; 90
     12c:	b1 07       	cpc	r27, r17
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
     134:	0c 94 35 0a 	jmp	0x146a	; 0x146a <_exit>

00000138 <__bad_interrupt>:
     138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <speed_limit>:
 uint16_t Condition;
 uint16_t Condition2;
 uint16_t adc_result0;
 Condition=250;
 Condition2=30;
 adc_result0 = adc_read(0);      // read adc value at PA0
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 b9 05 	call	0xb72	; 0xb72 <adc_read>
     144:	28 2f       	mov	r18, r24
     146:	39 2f       	mov	r19, r25
	 int speed;
	 if ((adc_result0 <= Condition2))
     148:	2f 31       	cpi	r18, 0x1F	; 31
     14a:	31 05       	cpc	r19, r1
     14c:	30 f0       	brcs	.+12     	; 0x15a <speed_limit+0x1e>
	 {
		 speed = 55;
	 }
	else if((Condition2 < adc_result0)&&(adc_result0<=Condition) ) {
     14e:	2b 3f       	cpi	r18, 0xFB	; 251
     150:	31 05       	cpc	r19, r1
     152:	30 f4       	brcc	.+12     	; 0x160 <speed_limit+0x24>
 speed = 65; }// this is where we set our speed limit
     154:	21 e4       	ldi	r18, 0x41	; 65
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	05 c0       	rjmp	.+10     	; 0x164 <speed_limit+0x28>
 Condition2=30;
 adc_result0 = adc_read(0);      // read adc value at PA0
	 int speed;
	 if ((adc_result0 <= Condition2))
	 {
		 speed = 55;
     15a:	27 e3       	ldi	r18, 0x37	; 55
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	02 c0       	rjmp	.+4      	; 0x164 <speed_limit+0x28>
	 }
	else if((Condition2 < adc_result0)&&(adc_result0<=Condition) ) {
 speed = 65; }// this is where we set our speed limit
 else {
	 speed =95;}
     160:	2f e5       	ldi	r18, 0x5F	; 95
     162:	30 e0       	ldi	r19, 0x00	; 0
  return speed; // returns value stored in speed variable 	
 }	
     164:	82 2f       	mov	r24, r18
     166:	93 2f       	mov	r25, r19
     168:	08 95       	ret

0000016a <main>:
void main()
{
     16a:	2f 92       	push	r2
     16c:	3f 92       	push	r3
     16e:	4f 92       	push	r4
     170:	5f 92       	push	r5
     172:	6f 92       	push	r6
     174:	7f 92       	push	r7
     176:	8f 92       	push	r8
     178:	9f 92       	push	r9
     17a:	af 92       	push	r10
     17c:	bf 92       	push	r11
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ff 92       	push	r15
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
     190:	e8 97       	sbiw	r28, 0x38	; 56
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	de bf       	out	0x3e, r29	; 62
     198:	0f be       	out	0x3f, r0	; 63
     19a:	cd bf       	out	0x3d, r28	; 61
	
	//Initialize LCD module
	InitLCD();
     19c:	0e 94 0e 02 	call	0x41c	; 0x41c <InitLCD>
	//Clear the screen
	LCDClear();
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCDByte>
	//Simple string printing
	LCDWriteString("T:");
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	0e 94 3c 02 	call	0x478	; 0x478 <LCDWriteString>
	LCDWriteStringXY(0,1,"A:");	
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	61 e0       	ldi	r22, 0x01	; 1
     1b4:	0e 94 ca 02 	call	0x594	; 0x594 <LCDGotoXY>
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	0e 94 3c 02 	call	0x478	; 0x478 <LCDWriteString>
	LCDWriteStringXY(8,1,"L:");
     1c0:	88 e0       	ldi	r24, 0x08	; 8
     1c2:	61 e0       	ldi	r22, 0x01	; 1
     1c4:	0e 94 ca 02 	call	0x594	; 0x594 <LCDGotoXY>
     1c8:	86 e0       	ldi	r24, 0x06	; 6
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	0e 94 3c 02 	call	0x478	; 0x478 <LCDWriteString>
	LCDWriteStringXY(7,0,"P:");
     1d0:	87 e0       	ldi	r24, 0x07	; 7
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	0e 94 ca 02 	call	0x594	; 0x594 <LCDGotoXY>
     1d8:	89 e0       	ldi	r24, 0x09	; 9
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	0e 94 3c 02 	call	0x478	; 0x478 <LCDWriteString>
	//Print some numbers
	
unsigned char num = 0x01;
int i; 
int speed_limit(); // calling the speed_limit function
DDRB |= 0xFF;
     1e0:	84 b1       	in	r24, 0x04	; 4
     1e2:	8f ef       	ldi	r24, 0xFF	; 255
     1e4:	84 b9       	out	0x04, r24	; 4
DDRA |= 0xFE; 
     1e6:	81 b1       	in	r24, 0x01	; 1
     1e8:	8e 6f       	ori	r24, 0xFE	; 254
     1ea:	81 b9       	out	0x01, r24	; 1

	long temperature = 0;
     1ec:	19 82       	std	Y+1, r1	; 0x01
     1ee:	1a 82       	std	Y+2, r1	; 0x02
     1f0:	1b 82       	std	Y+3, r1	; 0x03
     1f2:	1c 82       	std	Y+4, r1	; 0x04
	long pressure = 0;
     1f4:	1d 82       	std	Y+5, r1	; 0x05
     1f6:	1e 82       	std	Y+6, r1	; 0x06
     1f8:	1f 82       	std	Y+7, r1	; 0x07
     1fa:	18 86       	std	Y+8, r1	; 0x08
	long alt = 0;
     1fc:	19 86       	std	Y+9, r1	; 0x09
     1fe:	1a 86       	std	Y+10, r1	; 0x0a
     200:	1b 86       	std	Y+11, r1	; 0x0b
     202:	1c 86       	std	Y+12, r1	; 0x0c
	long weatherDiff =0;
     204:	1d 86       	std	Y+13, r1	; 0x0d
     206:	1e 86       	std	Y+14, r1	; 0x0e
     208:	1f 86       	std	Y+15, r1	; 0x0f
     20a:	18 8a       	std	Y+16, r1	; 0x10
	long up = 0;

	//long altitude = 0;
	//double temp = 0;
	
	ioinit();
     20c:	0e 94 aa 04 	call	0x954	; 0x954 <ioinit>
	i2cInit();
     210:	0e 94 ff 02 	call	0x5fe	; 0x5fe <i2cInit>
	delay_ms(100);
     214:	84 e6       	ldi	r24, 0x64	; 100
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 40 03 	call	0x680	; 0x680 <delay_ms>
	
	BMP085_Calibration();
     21c:	0e 94 95 03 	call	0x72a	; 0x72a <BMP085_Calibration>
    char altitudes[10];
	char pressures[10];
	char temperatures[10];

    // initialize adc and lcd
    adc_init();
     220:	0e 94 b2 05 	call	0xb64	; 0xb64 <adc_init>

while (1) {
  D0=0;
  D1=0;
  bmp085Convert(&temperature, &pressure, &alt, &weatherDiff);
   ltoa(weatherDiff, altitudes, 10);
     224:	0f 2e       	mov	r0, r31
     226:	fb e1       	ldi	r31, 0x1B	; 27
     228:	8f 2e       	mov	r8, r31
     22a:	99 24       	eor	r9, r9
     22c:	f0 2d       	mov	r31, r0
     22e:	8c 0e       	add	r8, r28
     230:	9d 1e       	adc	r9, r29
   ltoa(pressure, pressures, 10);
     232:	0f 2e       	mov	r0, r31
     234:	f5 e2       	ldi	r31, 0x25	; 37
     236:	6f 2e       	mov	r6, r31
     238:	77 24       	eor	r7, r7
     23a:	f0 2d       	mov	r31, r0
     23c:	6c 0e       	add	r6, r28
     23e:	7d 1e       	adc	r7, r29
   itoa(temperature, temperatures, 10);
     240:	0f 2e       	mov	r0, r31
     242:	ff e2       	ldi	r31, 0x2F	; 47
     244:	4f 2e       	mov	r4, r31
     246:	55 24       	eor	r5, r5
     248:	f0 2d       	mov	r31, r0
     24a:	4c 0e       	add	r4, r28
     24c:	5d 1e       	adc	r5, r29
 for (i=0; i<50; i++) {
     24e:	22 24       	eor	r2, r2
     250:	33 24       	eor	r3, r3
 itoa(adc_result0, int_buffer, 10);
LCDWriteStringXY(2,0,temperatures);
LCDWriteStringXY(9,0,pressures);
LCDWriteStringXY(2,1,altitudes);
 LCDWriteStringXY(10,1,int_buffer);
  PORTB = SEVEN_SEG[num%10];
     252:	0f 2e       	mov	r0, r31
     254:	fc e0       	ldi	r31, 0x0C	; 12
     256:	cf 2e       	mov	r12, r31
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	df 2e       	mov	r13, r31
     25c:	f0 2d       	mov	r31, r0
 for (i=0; i<50; i++) {
  D0=0;
  D1=0;
  num = speed_limit();
adc_result0 = adc_read(0);      // read adc value at PA0
 itoa(adc_result0, int_buffer, 10);
     25e:	0f 2e       	mov	r0, r31
     260:	f1 e1       	ldi	r31, 0x11	; 17
     262:	af 2e       	mov	r10, r31
     264:	bb 24       	eor	r11, r11
     266:	f0 2d       	mov	r31, r0
     268:	ac 0e       	add	r10, r28
     26a:	bd 1e       	adc	r11, r29

    // initialize adc and lcd
    adc_init();

while (1) {
  D0=0;
     26c:	14 98       	cbi	0x02, 4	; 2
  D1=0;
     26e:	15 98       	cbi	0x02, 5	; 2
  bmp085Convert(&temperature, &pressure, &alt, &weatherDiff);
     270:	ce 01       	movw	r24, r28
     272:	01 96       	adiw	r24, 0x01	; 1
     274:	be 01       	movw	r22, r28
     276:	6b 5f       	subi	r22, 0xFB	; 251
     278:	7f 4f       	sbci	r23, 0xFF	; 255
     27a:	ae 01       	movw	r20, r28
     27c:	47 5f       	subi	r20, 0xF7	; 247
     27e:	5f 4f       	sbci	r21, 0xFF	; 255
     280:	9e 01       	movw	r18, r28
     282:	23 5f       	subi	r18, 0xF3	; 243
     284:	3f 4f       	sbci	r19, 0xFF	; 255
     286:	0e 94 29 04 	call	0x852	; 0x852 <bmp085Convert>
   ltoa(weatherDiff, altitudes, 10);
     28a:	6d 85       	ldd	r22, Y+13	; 0x0d
     28c:	7e 85       	ldd	r23, Y+14	; 0x0e
     28e:	8f 85       	ldd	r24, Y+15	; 0x0f
     290:	98 89       	ldd	r25, Y+16	; 0x10
     292:	a4 01       	movw	r20, r8
     294:	2a e0       	ldi	r18, 0x0A	; 10
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	0e 94 a1 09 	call	0x1342	; 0x1342 <ltoa>
   ltoa(pressure, pressures, 10);
     29c:	6d 81       	ldd	r22, Y+5	; 0x05
     29e:	7e 81       	ldd	r23, Y+6	; 0x06
     2a0:	8f 81       	ldd	r24, Y+7	; 0x07
     2a2:	98 85       	ldd	r25, Y+8	; 0x08
     2a4:	a3 01       	movw	r20, r6
     2a6:	2a e0       	ldi	r18, 0x0A	; 10
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	0e 94 a1 09 	call	0x1342	; 0x1342 <ltoa>
   itoa(temperature, temperatures, 10);
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	9a 81       	ldd	r25, Y+2	; 0x02
     2b2:	b2 01       	movw	r22, r4
     2b4:	4a e0       	ldi	r20, 0x0A	; 10
     2b6:	50 e0       	ldi	r21, 0x00	; 0
     2b8:	0e 94 80 09 	call	0x1300	; 0x1300 <itoa>
 for (i=0; i<50; i++) {
     2bc:	81 01       	movw	r16, r2
  D0=0;
     2be:	14 98       	cbi	0x02, 4	; 2
  D1=0;
     2c0:	15 98       	cbi	0x02, 5	; 2
  num = speed_limit();
     2c2:	0e 94 9e 00 	call	0x13c	; 0x13c <speed_limit>
     2c6:	f8 2e       	mov	r15, r24
adc_result0 = adc_read(0);      // read adc value at PA0
     2c8:	c1 01       	movw	r24, r2
     2ca:	0e 94 b9 05 	call	0xb72	; 0xb72 <adc_read>
 itoa(adc_result0, int_buffer, 10);
     2ce:	b5 01       	movw	r22, r10
     2d0:	4a e0       	ldi	r20, 0x0A	; 10
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	0e 94 80 09 	call	0x1300	; 0x1300 <itoa>
LCDWriteStringXY(2,0,temperatures);
     2d8:	82 e0       	ldi	r24, 0x02	; 2
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	0e 94 ca 02 	call	0x594	; 0x594 <LCDGotoXY>
     2e0:	c2 01       	movw	r24, r4
     2e2:	0e 94 3c 02 	call	0x478	; 0x478 <LCDWriteString>
LCDWriteStringXY(9,0,pressures);
     2e6:	89 e0       	ldi	r24, 0x09	; 9
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	0e 94 ca 02 	call	0x594	; 0x594 <LCDGotoXY>
     2ee:	c3 01       	movw	r24, r6
     2f0:	0e 94 3c 02 	call	0x478	; 0x478 <LCDWriteString>
LCDWriteStringXY(2,1,altitudes);
     2f4:	82 e0       	ldi	r24, 0x02	; 2
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	0e 94 ca 02 	call	0x594	; 0x594 <LCDGotoXY>
     2fc:	c4 01       	movw	r24, r8
     2fe:	0e 94 3c 02 	call	0x478	; 0x478 <LCDWriteString>
 LCDWriteStringXY(10,1,int_buffer);
     302:	8a e0       	ldi	r24, 0x0A	; 10
     304:	61 e0       	ldi	r22, 0x01	; 1
     306:	0e 94 ca 02 	call	0x594	; 0x594 <LCDGotoXY>
     30a:	c5 01       	movw	r24, r10
     30c:	0e 94 3c 02 	call	0x478	; 0x478 <LCDWriteString>
  PORTB = SEVEN_SEG[num%10];
     310:	8f 2d       	mov	r24, r15
     312:	6a e0       	ldi	r22, 0x0A	; 10
     314:	0e 94 23 09 	call	0x1246	; 0x1246 <__udivmodqi4>
     318:	f6 01       	movw	r30, r12
     31a:	e9 0f       	add	r30, r25
     31c:	f1 1d       	adc	r31, r1
     31e:	90 81       	ld	r25, Z
     320:	95 b9       	out	0x05, r25	; 5
  D0=1;
     322:	14 9a       	sbi	0x02, 4	; 2
  D1=0;
     324:	15 98       	cbi	0x02, 5	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     326:	e1 ee       	ldi	r30, 0xE1	; 225
     328:	f4 e0       	ldi	r31, 0x04	; 4
     32a:	31 97       	sbiw	r30, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <main+0x1c0>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x1c6>
     330:	00 00       	nop
  _delay_us(500);
  D0=0;
     332:	14 98       	cbi	0x02, 4	; 2
  D1=0;
     334:	15 98       	cbi	0x02, 5	; 2
  PORTB = SEVEN_SEG[num/10];
     336:	f6 01       	movw	r30, r12
     338:	e8 0f       	add	r30, r24
     33a:	f1 1d       	adc	r31, r1
     33c:	80 81       	ld	r24, Z
     33e:	85 b9       	out	0x05, r24	; 5
  D0=0;
     340:	14 98       	cbi	0x02, 4	; 2
  D1=1;
     342:	15 9a       	sbi	0x02, 5	; 2
     344:	81 ee       	ldi	r24, 0xE1	; 225
     346:	94 e0       	ldi	r25, 0x04	; 4
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <main+0x1de>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <main+0x1e4>
     34e:	00 00       	nop
  D1=0;
  bmp085Convert(&temperature, &pressure, &alt, &weatherDiff);
   ltoa(weatherDiff, altitudes, 10);
   ltoa(pressure, pressures, 10);
   itoa(temperature, temperatures, 10);
 for (i=0; i<50; i++) {
     350:	0f 5f       	subi	r16, 0xFF	; 255
     352:	1f 4f       	sbci	r17, 0xFF	; 255
     354:	02 33       	cpi	r16, 0x32	; 50
     356:	11 05       	cpc	r17, r1
     358:	09 f0       	breq	.+2      	; 0x35c <main+0x1f2>
     35a:	b1 cf       	rjmp	.-158    	; 0x2be <main+0x154>
     35c:	87 cf       	rjmp	.-242    	; 0x26c <main+0x102>

0000035e <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
     35e:	87 b1       	in	r24, 0x07	; 7
     360:	8f 70       	andi	r24, 0x0F	; 15
     362:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     364:	5d 9a       	sbi	0x0b, 5	; 11
	CLEAR_RS();		//Read status
     366:	5e 98       	cbi	0x0b, 6	; 11
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	8a 95       	dec	r24
     36c:	f1 f7       	brne	.-4      	; 0x36a <LCDBusyLoop+0xc>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <LCDBusyLoop+0x12>

	
	do
	{

		SET_E();
     370:	5f 9a       	sbi	0x0b, 7	; 11
     372:	92 e0       	ldi	r25, 0x02	; 2
     374:	9a 95       	dec	r25
     376:	f1 f7       	brne	.-4      	; 0x374 <LCDBusyLoop+0x16>
     378:	00 c0       	rjmp	.+0      	; 0x37a <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
     37a:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     37c:	80 7f       	andi	r24, 0xF0	; 240
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	9a 95       	dec	r25
     382:	f1 f7       	brne	.-4      	; 0x380 <LCDBusyLoop+0x22>
     384:	00 c0       	rjmp	.+0      	; 0x386 <LCDBusyLoop+0x28>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
     386:	5f 98       	cbi	0x0b, 7	; 11
     388:	95 e0       	ldi	r25, 0x05	; 5
     38a:	9a 95       	dec	r25
     38c:	f1 f7       	brne	.-4      	; 0x38a <LCDBusyLoop+0x2c>
     38e:	00 00       	nop
		_delay_us(1);	//tEL

		SET_E();
     390:	5f 9a       	sbi	0x0b, 7	; 11
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	9a 95       	dec	r25
     396:	f1 f7       	brne	.-4      	; 0x394 <LCDBusyLoop+0x36>
     398:	00 c0       	rjmp	.+0      	; 0x39a <LCDBusyLoop+0x3c>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
     39a:	96 b1       	in	r25, 0x06	; 6
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	9a 95       	dec	r25
     3a0:	f1 f7       	brne	.-4      	; 0x39e <LCDBusyLoop+0x40>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LCDBusyLoop+0x46>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
     3a4:	5f 98       	cbi	0x0b, 7	; 11
     3a6:	95 e0       	ldi	r25, 0x05	; 5
     3a8:	9a 95       	dec	r25
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCDBusyLoop+0x4a>
     3ac:	00 00       	nop
		_delay_us(1);	//tEL
	}while(busy);
     3ae:	88 23       	and	r24, r24
     3b0:	fc f2       	brlt	.-66     	; 0x370 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
     3b2:	5d 98       	cbi	0x0b, 5	; 11
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     3b4:	87 b1       	in	r24, 0x07	; 7
     3b6:	80 6f       	ori	r24, 0xF0	; 240
     3b8:	87 b9       	out	0x07, r24	; 7

}
     3ba:	08 95       	ret

000003bc <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     3bc:	28 2f       	mov	r18, r24
     3be:	22 95       	swap	r18
     3c0:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     3c2:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     3c4:	66 23       	and	r22, r22
     3c6:	11 f4       	brne	.+4      	; 0x3cc <LCDByte+0x10>
	CLEAR_RS();
     3c8:	5e 98       	cbi	0x0b, 6	; 11
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <LCDByte+0x12>
else
	SET_RS();
     3cc:	5e 9a       	sbi	0x0b, 6	; 11
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	9a 95       	dec	r25
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <LCDByte+0x14>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCDByte+0x1a>

_delay_us(0.500);		//tAS

SET_E();
     3d6:	5f 9a       	sbi	0x0b, 7	; 11

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     3d8:	98 b1       	in	r25, 0x08	; 8
     3da:	22 95       	swap	r18
     3dc:	20 7f       	andi	r18, 0xF0	; 240
     3de:	9f 70       	andi	r25, 0x0F	; 15
     3e0:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     3e2:	98 b9       	out	0x08, r25	; 8
     3e4:	95 e0       	ldi	r25, 0x05	; 5
     3e6:	9a 95       	dec	r25
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCDByte+0x2a>
     3ea:	00 00       	nop

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     3ec:	5f 98       	cbi	0x0b, 7	; 11
     3ee:	95 e0       	ldi	r25, 0x05	; 5
     3f0:	9a 95       	dec	r25
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <LCDByte+0x34>
     3f4:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     3f6:	5f 9a       	sbi	0x0b, 7	; 11

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     3f8:	98 b1       	in	r25, 0x08	; 8
     3fa:	82 95       	swap	r24
     3fc:	80 7f       	andi	r24, 0xF0	; 240
     3fe:	9f 70       	andi	r25, 0x0F	; 15
     400:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     402:	88 b9       	out	0x08, r24	; 8
     404:	85 e0       	ldi	r24, 0x05	; 5
     406:	8a 95       	dec	r24
     408:	f1 f7       	brne	.-4      	; 0x406 <LCDByte+0x4a>
     40a:	00 00       	nop

_delay_us(1);			//tEH

//SEND

CLEAR_E();
     40c:	5f 98       	cbi	0x0b, 7	; 11
     40e:	95 e0       	ldi	r25, 0x05	; 5
     410:	9a 95       	dec	r25
     412:	f1 f7       	brne	.-4      	; 0x410 <LCDByte+0x54>
     414:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     416:	0e 94 af 01 	call	0x35e	; 0x35e <LCDBusyLoop>
}
     41a:	08 95       	ret

0000041c <InitLCD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     41c:	8f ef       	ldi	r24, 0xFF	; 255
     41e:	96 e7       	ldi	r25, 0x76	; 118
     420:	a1 e0       	ldi	r26, 0x01	; 1
     422:	81 50       	subi	r24, 0x01	; 1
     424:	90 40       	sbci	r25, 0x00	; 0
     426:	a0 40       	sbci	r26, 0x00	; 0
     428:	e1 f7       	brne	.-8      	; 0x422 <InitLCD+0x6>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <InitLCD+0x10>
     42c:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     42e:	87 b1       	in	r24, 0x07	; 7
     430:	80 6f       	ori	r24, 0xF0	; 240
     432:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     434:	57 9a       	sbi	0x0a, 7	; 10
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     436:	56 9a       	sbi	0x0a, 6	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     438:	55 9a       	sbi	0x0a, 5	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     43a:	88 b1       	in	r24, 0x08	; 8
     43c:	8f 70       	andi	r24, 0x0F	; 15
     43e:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     440:	5f 98       	cbi	0x0b, 7	; 11
	CLEAR_RW();
     442:	5d 98       	cbi	0x0b, 5	; 11
	CLEAR_RS();
     444:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     446:	00 c0       	rjmp	.+0      	; 0x448 <InitLCD+0x2c>
     448:	00 c0       	rjmp	.+0      	; 0x44a <InitLCD+0x2e>
     44a:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
     44c:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     44e:	45 9a       	sbi	0x08, 5	; 8
     450:	95 e0       	ldi	r25, 0x05	; 5
     452:	9a 95       	dec	r25
     454:	f1 f7       	brne	.-4      	; 0x452 <InitLCD+0x36>
     456:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
     458:	5f 98       	cbi	0x0b, 7	; 11
     45a:	a5 e0       	ldi	r26, 0x05	; 5
     45c:	aa 95       	dec	r26
     45e:	f1 f7       	brne	.-4      	; 0x45c <InitLCD+0x40>
     460:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     462:	0e 94 af 01 	call	0x35e	; 0x35e <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100);	//Display On
     466:	8c e0       	ldi	r24, 0x0C	; 12
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     46e:	88 e2       	ldi	r24, 0x28	; 40
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCDByte>
}
     476:	08 95       	ret

00000478 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     47e:	88 81       	ld	r24, Y
     480:	88 23       	and	r24, r24
     482:	39 f0       	breq	.+14     	; 0x492 <LCDWriteString+0x1a>
	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100);	//Display On
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void LCDWriteString(const char *msg)
     484:	21 96       	adiw	r28, 0x01	; 1


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
     486:	61 e0       	ldi	r22, 0x01	; 1
     488:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     48c:	89 91       	ld	r24, Y+
     48e:	88 23       	and	r24, r24
     490:	d1 f7       	brne	.-12     	; 0x486 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <LCDWriteNum>:

void LCDWriteNum(long val,unsigned int field_length)
{
     498:	af 92       	push	r10
     49a:	bf 92       	push	r11
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	df 93       	push	r29
     4aa:	cf 93       	push	r28
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <LCDWriteNum+0x16>
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <LCDWriteNum+0x18>
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <LCDWriteNum+0x1a>
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	5a 01       	movw	r10, r20
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[6]={0,0,0,0,0,0};
     4b8:	fe 01       	movw	r30, r28
     4ba:	31 96       	adiw	r30, 0x01	; 1
     4bc:	26 e0       	ldi	r18, 0x06	; 6
     4be:	df 01       	movw	r26, r30
     4c0:	1d 92       	st	X+, r1
     4c2:	2a 95       	dec	r18
     4c4:	e9 f7       	brne	.-6      	; 0x4c0 <LCDWriteNum+0x28>
	int i=5,j=0;
	while(val)
     4c6:	61 15       	cp	r22, r1
     4c8:	71 05       	cpc	r23, r1
     4ca:	81 05       	cpc	r24, r1
     4cc:	91 05       	cpc	r25, r1
     4ce:	e9 f0       	breq	.+58     	; 0x50a <LCDWriteNum+0x72>
     4d0:	8e 01       	movw	r16, r28
     4d2:	09 5f       	subi	r16, 0xF9	; 249
     4d4:	1f 4f       	sbci	r17, 0xFF	; 255
	{
	str[i]=val%10;
     4d6:	0f 2e       	mov	r0, r31
     4d8:	fa e0       	ldi	r31, 0x0A	; 10
     4da:	cf 2e       	mov	r12, r31
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	df 2e       	mov	r13, r31
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	ef 2e       	mov	r14, r31
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	ff 2e       	mov	r15, r31
     4e8:	f0 2d       	mov	r31, r0
     4ea:	a7 01       	movw	r20, r14
     4ec:	96 01       	movw	r18, r12
     4ee:	0e 94 43 09 	call	0x1286	; 0x1286 <__divmodsi4>
     4f2:	f8 01       	movw	r30, r16
     4f4:	62 93       	st	-Z, r22
     4f6:	8f 01       	movw	r16, r30
	val=val/10;
     4f8:	62 2f       	mov	r22, r18
     4fa:	73 2f       	mov	r23, r19
     4fc:	84 2f       	mov	r24, r20
     4fe:	95 2f       	mov	r25, r21

	****************************************************************/

	char str[6]={0,0,0,0,0,0};
	int i=5,j=0;
	while(val)
     500:	61 15       	cp	r22, r1
     502:	71 05       	cpc	r23, r1
     504:	81 05       	cpc	r24, r1
     506:	91 05       	cpc	r25, r1
     508:	81 f7       	brne	.-32     	; 0x4ea <LCDWriteNum+0x52>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     50a:	ff ef       	ldi	r31, 0xFF	; 255
     50c:	af 16       	cp	r10, r31
     50e:	ff ef       	ldi	r31, 0xFF	; 255
     510:	bf 06       	cpc	r11, r31
     512:	69 f4       	brne	.+26     	; 0x52e <LCDWriteNum+0x96>
		while(str[j]==0) j++;
     514:	29 81       	ldd	r18, Y+1	; 0x01
     516:	22 23       	and	r18, r18
     518:	79 f4       	brne	.+30     	; 0x538 <LCDWriteNum+0xa0>
     51a:	fe 01       	movw	r30, r28
     51c:	32 96       	adiw	r30, 0x02	; 2
     51e:	00 e0       	ldi	r16, 0x00	; 0
     520:	10 e0       	ldi	r17, 0x00	; 0
     522:	0f 5f       	subi	r16, 0xFF	; 255
     524:	1f 4f       	sbci	r17, 0xFF	; 255
     526:	21 91       	ld	r18, Z+
     528:	22 23       	and	r18, r18
     52a:	d9 f3       	breq	.-10     	; 0x522 <LCDWriteNum+0x8a>
     52c:	07 c0       	rjmp	.+14     	; 0x53c <LCDWriteNum+0xa4>
	else
		j=6-field_length;
     52e:	06 e0       	ldi	r16, 0x06	; 6
     530:	10 e0       	ldi	r17, 0x00	; 0
     532:	0a 19       	sub	r16, r10
     534:	1b 09       	sbc	r17, r11
     536:	02 c0       	rjmp	.+4      	; 0x53c <LCDWriteNum+0xa4>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     538:	00 e0       	ldi	r16, 0x00	; 0
     53a:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=6-field_length;

	if(val<0) LCDData('-');
     53c:	99 23       	and	r25, r25
     53e:	24 f4       	brge	.+8      	; 0x548 <LCDWriteNum+0xb0>
     540:	8d e2       	ldi	r24, 0x2D	; 45
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCDByte>
	for(i=j;i<6;i++)
     548:	06 30       	cpi	r16, 0x06	; 6
     54a:	11 05       	cpc	r17, r1
     54c:	94 f4       	brge	.+36     	; 0x572 <LCDWriteNum+0xda>
	LCDData(*msg);
	msg++;
 }
}

void LCDWriteNum(long val,unsigned int field_length)
     54e:	7e 01       	movw	r14, r28
     550:	08 94       	sec
     552:	e1 1c       	adc	r14, r1
     554:	f1 1c       	adc	r15, r1
     556:	e0 0e       	add	r14, r16
     558:	f1 1e       	adc	r15, r17
		j=6-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<6;i++)
	{
	LCDData(48+str[i]);
     55a:	d7 01       	movw	r26, r14
     55c:	8d 91       	ld	r24, X+
     55e:	7d 01       	movw	r14, r26
     560:	80 5d       	subi	r24, 0xD0	; 208
     562:	61 e0       	ldi	r22, 0x01	; 1
     564:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCDByte>
		while(str[j]==0) j++;
	else
		j=6-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<6;i++)
     568:	0f 5f       	subi	r16, 0xFF	; 255
     56a:	1f 4f       	sbci	r17, 0xFF	; 255
     56c:	06 30       	cpi	r16, 0x06	; 6
     56e:	11 05       	cpc	r17, r1
     570:	a4 f3       	brlt	.-24     	; 0x55a <LCDWriteNum+0xc2>
	{
	LCDData(48+str[i]);
	}
}
     572:	26 96       	adiw	r28, 0x06	; 6
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	cf 91       	pop	r28
     580:	df 91       	pop	r29
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	ff 90       	pop	r15
     588:	ef 90       	pop	r14
     58a:	df 90       	pop	r13
     58c:	cf 90       	pop	r12
     58e:	bf 90       	pop	r11
     590:	af 90       	pop	r10
     592:	08 95       	ret

00000594 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     594:	88 32       	cpi	r24, 0x28	; 40
     596:	30 f4       	brcc	.+12     	; 0x5a4 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
     598:	61 11       	cpse	r22, r1
     59a:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     59c:	80 68       	ori	r24, 0x80	; 128
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCDByte>
     5a4:	08 95       	ret

000005a6 <uart_putchar>:
	
	stdout = &mystdout; //Required for printf init
}

static int uart_putchar(char c, FILE *stream)
{
     5a6:	1f 93       	push	r17
     5a8:	18 2f       	mov	r17, r24
    if (c == '\n') uart_putchar('\r', stream);
     5aa:	8a 30       	cpi	r24, 0x0A	; 10
     5ac:	19 f4       	brne	.+6      	; 0x5b4 <uart_putchar+0xe>
     5ae:	8d e0       	ldi	r24, 0x0D	; 13
     5b0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart_putchar>
  
    loop_until_bit_is_set(UCSR0A, UDRE0);
     5b4:	e0 ec       	ldi	r30, 0xC0	; 192
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	80 81       	ld	r24, Z
     5ba:	85 ff       	sbrs	r24, 5
     5bc:	fd cf       	rjmp	.-6      	; 0x5b8 <uart_putchar+0x12>
    UDR0 = c;
     5be:	10 93 c6 00 	sts	0x00C6, r17
    
    return 0;
}
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	1f 91       	pop	r17
     5c8:	08 95       	ret

000005ca <i2cSetBitrate>:
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);	// Enable TWI
}

void i2cSetBitrate(unsigned short bitrateKHz)
{
     5ca:	bc 01       	movw	r22, r24
	unsigned char bitrate_div;
	// set i2c bitrate
	// SCL freq = F_CPU/(16+2*TWBR))
	cbi(TWSR, TWPS0);
     5cc:	e9 eb       	ldi	r30, 0xB9	; 185
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	80 81       	ld	r24, Z
     5d2:	8e 7f       	andi	r24, 0xFE	; 254
     5d4:	80 83       	st	Z, r24
	cbi(TWSR, TWPS1);
     5d6:	80 81       	ld	r24, Z
     5d8:	8d 7f       	andi	r24, 0xFD	; 253
     5da:	80 83       	st	Z, r24
	
	//calculate bitrate division	
	bitrate_div = ((F_CPU/4000l)/bitrateKHz);
     5dc:	80 ea       	ldi	r24, 0xA0	; 160
     5de:	9f e0       	ldi	r25, 0x0F	; 15
     5e0:	0e 94 2f 09 	call	0x125e	; 0x125e <__udivmodhi4>
	if(bitrate_div >= 16)
     5e4:	60 31       	cpi	r22, 0x10	; 16
     5e6:	40 f0       	brcs	.+16     	; 0x5f8 <i2cSetBitrate+0x2e>
		bitrate_div = (bitrate_div-16)/2;
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	60 51       	subi	r22, 0x10	; 16
     5ec:	70 40       	sbci	r23, 0x00	; 0
     5ee:	12 f4       	brpl	.+4      	; 0x5f4 <i2cSetBitrate+0x2a>
     5f0:	6f 5f       	subi	r22, 0xFF	; 255
     5f2:	7f 4f       	sbci	r23, 0xFF	; 255
     5f4:	75 95       	asr	r23
     5f6:	67 95       	ror	r22
	outb(TWBR, bitrate_div);
     5f8:	60 93 b8 00 	sts	0x00B8, r22
}
     5fc:	08 95       	ret

000005fe <i2cInit>:
 *********************/

void i2cInit(void)
{
	// set i2c bit rate to 40KHz
	i2cSetBitrate(100);
     5fe:	84 e6       	ldi	r24, 0x64	; 100
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);	// Enable TWI
     606:	ec eb       	ldi	r30, 0xBC	; 188
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	84 60       	ori	r24, 0x04	; 4
     60e:	80 83       	st	Z, r24
}
     610:	08 95       	ret

00000612 <i2cSendStart>:
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     612:	39 9a       	sbi	0x07, 1	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     614:	84 ea       	ldi	r24, 0xA4	; 164
     616:	80 93 bc 00 	sts	0x00BC, r24
}
     61a:	08 95       	ret

0000061c <i2cSendStop>:

void i2cSendStop(void)
{
	// transmit stop condition
        TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     61c:	84 e9       	ldi	r24, 0x94	; 148
     61e:	80 93 bc 00 	sts	0x00BC, r24
}
     622:	08 95       	ret

00000624 <i2cWaitForComplete>:
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     624:	80 91 bc 00 	lds	r24, 0x00BC
     628:	88 23       	and	r24, r24
     62a:	9c f0       	brlt	.+38     	; 0x652 <i2cWaitForComplete+0x2e>
        TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
}

void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     630:	ec eb       	ldi	r30, 0xBC	; 188
     632:	f0 e0       	ldi	r31, 0x00	; 0
		i++;
     634:	01 96       	adiw	r24, 0x01	; 1
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     636:	20 81       	ld	r18, Z
     638:	22 23       	and	r18, r18
     63a:	24 f0       	brlt	.+8      	; 0x644 <i2cWaitForComplete+0x20>
     63c:	8a 35       	cpi	r24, 0x5A	; 90
     63e:	91 05       	cpc	r25, r1
     640:	c9 f7       	brne	.-14     	; 0x634 <i2cWaitForComplete+0x10>
     642:	03 c0       	rjmp	.+6      	; 0x64a <i2cWaitForComplete+0x26>
		i++;
	if (i>88)
     644:	89 35       	cpi	r24, 0x59	; 89
     646:	91 05       	cpc	r25, r1
     648:	24 f0       	brlt	.+8      	; 0x652 <i2cWaitForComplete+0x2e>
		printf("complete timed out\n");
     64a:	8c e1       	ldi	r24, 0x1C	; 28
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <puts>
     652:	08 95       	ret

00000654 <i2cReceiveByte>:
}

void i2cReceiveByte(unsigned char ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
     654:	88 23       	and	r24, r24
     656:	39 f0       	breq	.+14     	; 0x666 <i2cReceiveByte+0x12>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
     658:	ec eb       	ldi	r30, 0xBC	; 188
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	8f 70       	andi	r24, 0x0F	; 15
     660:	80 6c       	ori	r24, 0xC0	; 192
     662:	80 83       	st	Z, r24
     664:	08 95       	ret
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
     666:	ec eb       	ldi	r30, 0xBC	; 188
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	80 81       	ld	r24, Z
     66c:	8f 70       	andi	r24, 0x0F	; 15
     66e:	80 68       	ori	r24, 0x80	; 128
     670:	80 83       	st	Z, r24
     672:	08 95       	ret

00000674 <i2cGetReceivedByte>:
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     674:	80 91 bb 00 	lds	r24, 0x00BB
}
     678:	08 95       	ret

0000067a <i2cGetStatus>:

unsigned char i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
     67a:	80 91 b9 00 	lds	r24, 0x00B9
}
     67e:	08 95       	ret

00000680 <delay_ms>:

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     680:	00 97       	sbiw	r24, 0x00	; 0
     682:	59 f4       	brne	.+22     	; 0x69a <delay_ms+0x1a>
     684:	08 95       	ret
	...
    for ( y = 0 ; y < 90 ; y++){
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
     692:	21 50       	subi	r18, 0x01	; 1

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    for ( y = 0 ; y < 90 ; y++){
     694:	c1 f7       	brne	.-16     	; 0x686 <delay_ms+0x6>
}

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     696:	01 97       	sbiw	r24, 0x01	; 1
     698:	11 f0       	breq	.+4      	; 0x69e <delay_ms+0x1e>
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
}

void delay_ms(uint16_t x)
{
     69a:	2a e5       	ldi	r18, 0x5A	; 90
     69c:	f4 cf       	rjmp	.-24     	; 0x686 <delay_ms+0x6>
     69e:	08 95       	ret

000006a0 <i2cSendByte>:
	if (i>88)
		printf("complete timed out\n");
}

void i2cSendByte(unsigned char data)
{
     6a0:	1f 93       	push	r17
     6a2:	18 2f       	mov	r17, r24
	delay_ms(1);
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 40 03 	call	0x680	; 0x680 <delay_ms>
	//printf("sending 0x%x\n", data);
	WRITE_sda();
     6ac:	39 9a       	sbi	0x07, 1	; 7
	// save data to the TWDR
	TWDR = data;
     6ae:	10 93 bb 00 	sts	0x00BB, r17
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     6b2:	84 e8       	ldi	r24, 0x84	; 132
     6b4:	80 93 bc 00 	sts	0x00BC, r24
}
     6b8:	1f 91       	pop	r17
     6ba:	08 95       	ret

000006bc <bmp085ReadShort>:
// bmp085ReadShort will read two sequential 8-bit registers, and return a 16-bit value
// the MSB register is read first
// Input: First register to read
// Output: 16-bit value of (first register value << 8) | (sequential register value)
short bmp085ReadShort(unsigned char address)
{
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	18 2f       	mov	r17, r24
	uint16_t msb, lsb;
	short data;
	
	i2cSendStart();
     6c2:	0e 94 09 03 	call	0x612	; 0x612 <i2cSendStart>
	i2cWaitForComplete();
     6c6:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	
	i2cSendByte(BMP085_W);	// write 0xEE
     6ca:	8e ee       	ldi	r24, 0xEE	; 238
     6cc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2cSendByte>
	i2cWaitForComplete();
     6d0:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	
	i2cSendByte(address);	// write register address
     6d4:	81 2f       	mov	r24, r17
     6d6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2cSendByte>
	i2cWaitForComplete();
     6da:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	
	i2cSendStart();
     6de:	0e 94 09 03 	call	0x612	; 0x612 <i2cSendStart>
	
	i2cSendByte(BMP085_R);	// write 0xEF
     6e2:	8f ee       	ldi	r24, 0xEF	; 239
     6e4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2cSendByte>
	i2cWaitForComplete();
     6e8:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	
	i2cReceiveByte(TRUE);
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	0e 94 2a 03 	call	0x654	; 0x654 <i2cReceiveByte>
	i2cWaitForComplete();
     6f2:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	msb = i2cGetReceivedByte();	// Get MSB result
     6f6:	0e 94 3a 03 	call	0x674	; 0x674 <i2cGetReceivedByte>
     6fa:	08 2f       	mov	r16, r24
	i2cWaitForComplete();
     6fc:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	
	i2cReceiveByte(FALSE);
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	0e 94 2a 03 	call	0x654	; 0x654 <i2cReceiveByte>
	i2cWaitForComplete();
     706:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	lsb = i2cGetReceivedByte();	// Get LSB result
     70a:	0e 94 3a 03 	call	0x674	; 0x674 <i2cGetReceivedByte>
     70e:	18 2f       	mov	r17, r24
	i2cWaitForComplete();
     710:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	
	//i2cSendStop();
	
	data = msb << 8;
     714:	50 2f       	mov	r21, r16
     716:	40 e0       	ldi	r20, 0x00	; 0
	msb = i2cGetReceivedByte();	// Get MSB result
	i2cWaitForComplete();
	
	i2cReceiveByte(FALSE);
	i2cWaitForComplete();
	lsb = i2cGetReceivedByte();	// Get LSB result
     718:	21 2f       	mov	r18, r17
     71a:	30 e0       	ldi	r19, 0x00	; 0
	i2cWaitForComplete();
	
	//i2cSendStop();
	
	data = msb << 8;
	data |= lsb;
     71c:	24 2b       	or	r18, r20
     71e:	35 2b       	or	r19, r21
	
	return data;
}
     720:	82 2f       	mov	r24, r18
     722:	93 2f       	mov	r25, r19
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	08 95       	ret

0000072a <BMP085_Calibration>:
short md;

void BMP085_Calibration(void)
{

	ac1 = bmp085ReadShort(0xAA);
     72a:	8a ea       	ldi	r24, 0xAA	; 170
     72c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <bmp085ReadShort>
     730:	90 93 43 01 	sts	0x0143, r25
     734:	80 93 42 01 	sts	0x0142, r24
	ac2 = bmp085ReadShort(0xAC);
     738:	8c ea       	ldi	r24, 0xAC	; 172
     73a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <bmp085ReadShort>
     73e:	90 93 4b 01 	sts	0x014B, r25
     742:	80 93 4a 01 	sts	0x014A, r24
	ac3 = bmp085ReadShort(0xAE);
     746:	8e ea       	ldi	r24, 0xAE	; 174
     748:	0e 94 5e 03 	call	0x6bc	; 0x6bc <bmp085ReadShort>
     74c:	90 93 53 01 	sts	0x0153, r25
     750:	80 93 52 01 	sts	0x0152, r24
	ac4 = bmp085ReadShort(0xB0);
     754:	80 eb       	ldi	r24, 0xB0	; 176
     756:	0e 94 5e 03 	call	0x6bc	; 0x6bc <bmp085ReadShort>
     75a:	90 93 4f 01 	sts	0x014F, r25
     75e:	80 93 4e 01 	sts	0x014E, r24
	ac5 = bmp085ReadShort(0xB2);
     762:	82 eb       	ldi	r24, 0xB2	; 178
     764:	0e 94 5e 03 	call	0x6bc	; 0x6bc <bmp085ReadShort>
     768:	90 93 49 01 	sts	0x0149, r25
     76c:	80 93 48 01 	sts	0x0148, r24
	ac6 = bmp085ReadShort(0xB4);
     770:	84 eb       	ldi	r24, 0xB4	; 180
     772:	0e 94 5e 03 	call	0x6bc	; 0x6bc <bmp085ReadShort>
     776:	90 93 47 01 	sts	0x0147, r25
     77a:	80 93 46 01 	sts	0x0146, r24
	b1 = bmp085ReadShort(0xB6);
     77e:	86 eb       	ldi	r24, 0xB6	; 182
     780:	0e 94 5e 03 	call	0x6bc	; 0x6bc <bmp085ReadShort>
     784:	90 93 45 01 	sts	0x0145, r25
     788:	80 93 44 01 	sts	0x0144, r24
	b2 = bmp085ReadShort(0xB8);
     78c:	88 eb       	ldi	r24, 0xB8	; 184
     78e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <bmp085ReadShort>
     792:	90 93 3f 01 	sts	0x013F, r25
     796:	80 93 3e 01 	sts	0x013E, r24
	mb = bmp085ReadShort(0xBA);
     79a:	8a eb       	ldi	r24, 0xBA	; 186
     79c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <bmp085ReadShort>
     7a0:	90 93 41 01 	sts	0x0141, r25
     7a4:	80 93 40 01 	sts	0x0140, r24
	mc = bmp085ReadShort(0xBC);
     7a8:	8c eb       	ldi	r24, 0xBC	; 188
     7aa:	0e 94 5e 03 	call	0x6bc	; 0x6bc <bmp085ReadShort>
     7ae:	90 93 51 01 	sts	0x0151, r25
     7b2:	80 93 50 01 	sts	0x0150, r24
	md = bmp085ReadShort(0xBE);
     7b6:	8e eb       	ldi	r24, 0xBE	; 190
     7b8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <bmp085ReadShort>
     7bc:	90 93 4d 01 	sts	0x014D, r25
     7c0:	80 93 4c 01 	sts	0x014C, r24
	
}
     7c4:	08 95       	ret

000007c6 <bmp085ReadTemp>:
}

long bmp085ReadTemp(void)
{
	long temperature = 0;
	i2cSendStart();
     7c6:	0e 94 09 03 	call	0x612	; 0x612 <i2cSendStart>
	i2cWaitForComplete();
     7ca:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	
	i2cSendByte(BMP085_W);	// write 0xEE
     7ce:	8e ee       	ldi	r24, 0xEE	; 238
     7d0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2cSendByte>
	i2cWaitForComplete();
     7d4:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	
	i2cSendByte(0xF4);	// write register address for Temp
     7d8:	84 ef       	ldi	r24, 0xF4	; 244
     7da:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2cSendByte>
	i2cWaitForComplete();
     7de:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	
	i2cSendByte(0x2E);	// write register data for temp
     7e2:	8e e2       	ldi	r24, 0x2E	; 46
     7e4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2cSendByte>
	i2cWaitForComplete();
     7e8:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	
	//i2cSendStop();
	
	delay_ms(10);	// max time is 4.5ms
     7ec:	8a e0       	ldi	r24, 0x0A	; 10
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 40 03 	call	0x680	; 0x680 <delay_ms>
	
	temperature = bmp085ReadShort(0xF6);
     7f4:	86 ef       	ldi	r24, 0xF6	; 246
     7f6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <bmp085ReadShort>
	temperature &= 0x0000FFFF;
     7fa:	9c 01       	movw	r18, r24
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	50 e0       	ldi	r21, 0x00	; 0
	
	return temperature;
}
     800:	68 2f       	mov	r22, r24
     802:	73 2f       	mov	r23, r19
     804:	84 2f       	mov	r24, r20
     806:	95 2f       	mov	r25, r21
     808:	08 95       	ret

0000080a <bmp085ReadPressure>:

long bmp085ReadPressure(void)
{
	long pressure = 0;
	
	i2cSendStart();
     80a:	0e 94 09 03 	call	0x612	; 0x612 <i2cSendStart>
	i2cWaitForComplete();
     80e:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	
	i2cSendByte(BMP085_W);	// write 0xEE
     812:	8e ee       	ldi	r24, 0xEE	; 238
     814:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2cSendByte>
	i2cWaitForComplete();
     818:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	
	i2cSendByte(0xF4);	// write register address for pressure
     81c:	84 ef       	ldi	r24, 0xF4	; 244
     81e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2cSendByte>
	i2cWaitForComplete();
     822:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	
	i2cSendByte(0x34);	// write register data for pressure
     826:	84 e3       	ldi	r24, 0x34	; 52
     828:	0e 94 50 03 	call	0x6a0	; 0x6a0 <i2cSendByte>
	i2cWaitForComplete();
     82c:	0e 94 12 03 	call	0x624	; 0x624 <i2cWaitForComplete>
	
	i2cSendStop();
     830:	0e 94 0e 03 	call	0x61c	; 0x61c <i2cSendStop>
	
	delay_ms(10);	// max time is 4.5ms
     834:	8a e0       	ldi	r24, 0x0A	; 10
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 40 03 	call	0x680	; 0x680 <delay_ms>
	
	pressure = bmp085ReadShort(0xF6);
     83c:	86 ef       	ldi	r24, 0xF6	; 246
     83e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <bmp085ReadShort>
	pressure &= 0x0000FFFF;
     842:	9c 01       	movw	r18, r24
     844:	40 e0       	ldi	r20, 0x00	; 0
     846:	50 e0       	ldi	r21, 0x00	; 0
	
	return pressure;
	
	//return (long) bmp085ReadShort(0xF6);
}
     848:	68 2f       	mov	r22, r24
     84a:	73 2f       	mov	r23, r19
     84c:	84 2f       	mov	r24, r20
     84e:	95 2f       	mov	r25, r21
     850:	08 95       	ret

00000852 <bmp085Convert>:

void bmp085Convert(long* temperature, long* pressure, long* alt, long* weatherDiff)
{
     852:	cf 92       	push	r12
     854:	df 92       	push	r13
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	ec 01       	movw	r28, r24
     864:	7b 01       	movw	r14, r22
     866:	8a 01       	movw	r16, r20
     868:	69 01       	movw	r12, r18
	const float currentAltitude = 1224.4;
	const float p0=101325;
	long x1, x2, b5, b6, x3, b3, p;
	unsigned long b4, b7;
	
	ut = bmp085ReadTemp();
     86a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <bmp085ReadTemp>
	ut = bmp085ReadTemp();
     86e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <bmp085ReadTemp>
	up = bmp085ReadPressure();
     872:	0e 94 05 04 	call	0x80a	; 0x80a <bmp085ReadPressure>
	up = bmp085ReadPressure();
     876:	0e 94 05 04 	call	0x80a	; 0x80a <bmp085ReadPressure>
	
	x1 = ((long)ut - ac6) * ac5 >> 15;
	x2 = ((long) mc << 11) / (x1 + md);
	b5 = x1 + x2;
	*temperature = 248;//(b5 + 8) >> 4;
     87a:	88 ef       	ldi	r24, 0xF8	; 248
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	a0 e0       	ldi	r26, 0x00	; 0
     880:	b0 e0       	ldi	r27, 0x00	; 0
     882:	88 83       	st	Y, r24
     884:	99 83       	std	Y+1, r25	; 0x01
     886:	aa 83       	std	Y+2, r26	; 0x02
     888:	bb 83       	std	Y+3, r27	; 0x03
	p = b7 < 0x80000000 ? (b7 * 2) / b4 : (b7 / b4) * 2;
	x1 = (p >> 8) * (p >> 8);
	x1 = (x1 * 3038) >> 16;
	x2 = (-7357 * p) >> 16;
	tpressure = 90000;//p + 12000 +((x1 + x2 + 3791) >> 4); 
	*alt = 1224.4;//((float)44330 * (1 - pow(((float) tpressure/p0), 0.190295)))*3.2808399;
     88a:	88 ec       	ldi	r24, 0xC8	; 200
     88c:	94 e0       	ldi	r25, 0x04	; 4
     88e:	a0 e0       	ldi	r26, 0x00	; 0
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	f8 01       	movw	r30, r16
     894:	80 83       	st	Z, r24
     896:	91 83       	std	Z+1, r25	; 0x01
     898:	a2 83       	std	Z+2, r26	; 0x02
     89a:	b3 83       	std	Z+3, r27	; 0x03
	*pressure = tpressure*pow(1- (((*alt/3.2808399)*0.0065)/(((*temperature/10))+(0.0065*(*alt/3.2808399)+273.15))), -5.257);
     89c:	68 81       	ld	r22, Y
     89e:	79 81       	ldd	r23, Y+1	; 0x01
     8a0:	8a 81       	ldd	r24, Y+2	; 0x02
     8a2:	9b 81       	ldd	r25, Y+3	; 0x03
     8a4:	2a e0       	ldi	r18, 0x0A	; 10
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	0e 94 43 09 	call	0x1286	; 0x1286 <__divmodsi4>
     8b0:	ca 01       	movw	r24, r20
     8b2:	b9 01       	movw	r22, r18
     8b4:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__floatsisf>
     8b8:	29 e9       	ldi	r18, 0x99	; 153
     8ba:	39 ec       	ldi	r19, 0xC9	; 201
     8bc:	49 e8       	ldi	r20, 0x89	; 137
     8be:	53 e4       	ldi	r21, 0x43	; 67
     8c0:	0e 94 d0 05 	call	0xba0	; 0xba0 <__addsf3>
     8c4:	9b 01       	movw	r18, r22
     8c6:	ac 01       	movw	r20, r24
     8c8:	64 e0       	ldi	r22, 0x04	; 4
     8ca:	73 e3       	ldi	r23, 0x33	; 51
     8cc:	8b e1       	ldi	r24, 0x1B	; 27
     8ce:	90 e4       	ldi	r25, 0x40	; 64
     8d0:	0e 94 34 06 	call	0xc68	; 0xc68 <__divsf3>
     8d4:	9b 01       	movw	r18, r22
     8d6:	ac 01       	movw	r20, r24
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	80 e8       	ldi	r24, 0x80	; 128
     8de:	9f e3       	ldi	r25, 0x3F	; 63
     8e0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__subsf3>
     8e4:	28 e5       	ldi	r18, 0x58	; 88
     8e6:	39 e3       	ldi	r19, 0x39	; 57
     8e8:	48 ea       	ldi	r20, 0xA8	; 168
     8ea:	50 ec       	ldi	r21, 0xC0	; 192
     8ec:	0e 94 be 07 	call	0xf7c	; 0xf7c <pow>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	38 ec       	ldi	r19, 0xC8	; 200
     8f4:	4f ea       	ldi	r20, 0xAF	; 175
     8f6:	57 e4       	ldi	r21, 0x47	; 71
     8f8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__mulsf3>
     8fc:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fixsfsi>
     900:	f7 01       	movw	r30, r14
     902:	60 83       	st	Z, r22
     904:	71 83       	std	Z+1, r23	; 0x01
     906:	82 83       	std	Z+2, r24	; 0x02
     908:	93 83       	std	Z+3, r25	; 0x03
	epressure = p0* pow((1-currentAltitude/44330), 5.257);
	*weatherDiff= tpressure - epressure;
     90a:	84 ef       	ldi	r24, 0xF4	; 244
     90c:	99 e0       	ldi	r25, 0x09	; 9
     90e:	a0 e0       	ldi	r26, 0x00	; 0
     910:	b0 e0       	ldi	r27, 0x00	; 0
     912:	f6 01       	movw	r30, r12
     914:	80 83       	st	Z, r24
     916:	91 83       	std	Z+1, r25	; 0x01
     918:	a2 83       	std	Z+2, r26	; 0x02
     91a:	b3 83       	std	Z+3, r27	; 0x03
		
}
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	df 90       	pop	r13
     92a:	cf 90       	pop	r12
     92c:	08 95       	ret

0000092e <UART_Init>:
}

void UART_Init( unsigned int ubrr)
{
	// Set baud rate 
	UBRR0H = ubrr>>8;
     92e:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = ubrr;
     932:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable receiver and transmitter 
	UCSR0A = (0<<U2X0);
     936:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     93a:	88 e1       	ldi	r24, 0x18	; 24
     93c:	80 93 c1 00 	sts	0x00C1, r24
	
	// Set frame format: 8 bit, no parity, 1 stop bit,   
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
     940:	86 e0       	ldi	r24, 0x06	; 6
     942:	80 93 c2 00 	sts	0x00C2, r24
	
	stdout = &mystdout; //Required for printf init
     946:	8f e2       	ldi	r24, 0x2F	; 47
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	90 93 57 01 	sts	0x0157, r25
     94e:	80 93 56 01 	sts	0x0156, r24
}
     952:	08 95       	ret

00000954 <ioinit>:
 
void ioinit (void)
{
    //1 = output, 0 = input

    DDRB |= 0b11000000; //PORTC4 (SDA), PORTC5 (SCL), PORTC all others are inputs
     954:	84 b1       	in	r24, 0x04	; 4
     956:	80 6c       	ori	r24, 0xC0	; 192
     958:	84 b9       	out	0x04, r24	; 4
    DDRC |= 0b00000010; //PORTC4 (SDA), PORTC5 (SCL), PORTC all others are inputs
     95a:	39 9a       	sbi	0x07, 1	; 7
    DDRD |= 0b11111110; 
     95c:	8a b1       	in	r24, 0x0a	; 10
     95e:	8e 6f       	ori	r24, 0xFE	; 254
     960:	8a b9       	out	0x0a, r24	; 10
	PORTC |= 0b00000011; //pullups on the I2C bus
     962:	88 b1       	in	r24, 0x08	; 8
     964:	83 60       	ori	r24, 0x03	; 3
     966:	88 b9       	out	0x08, r24	; 8
	
	UART_Init((unsigned int)(FOSC/16/BAUD-1));		// ocillator fq/16/baud rate -1	
     968:	83 e3       	ldi	r24, 0x33	; 51
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 97 04 	call	0x92e	; 0x92e <UART_Init>
}
     970:	08 95       	ret

00000972 <put_char>:
}

void put_char(unsigned char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     972:	e0 ec       	ldi	r30, 0xC0	; 192
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	90 81       	ld	r25, Z
     978:	95 ff       	sbrs	r25, 5
     97a:	fd cf       	rjmp	.-6      	; 0x976 <put_char+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
     97c:	80 93 c6 00 	sts	0x00C6, r24
     980:	08 95       	ret

00000982 <SPI_MasterInit>:
#define SCK      ((volatile io_reg*)_SFR_MEM_ADDR(PORTC))->bit3

void SPI_MasterInit(void)
{
/* Set MOSI and SCK output, all others input */
DDRB |= (1<<PB5)|(1<PB7);
     982:	84 b1       	in	r24, 0x04	; 4
     984:	81 62       	ori	r24, 0x21	; 33
     986:	84 b9       	out	0x04, r24	; 4
/* Enable SPI, Master, set clock rate fck/16 */
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     988:	81 e5       	ldi	r24, 0x51	; 81
     98a:	8c bd       	out	0x2c, r24	; 44
}
     98c:	08 95       	ret

0000098e <SPI_MasterTransmit>:
void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     98e:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF)));
     990:	0d b4       	in	r0, 0x2d	; 45
     992:	07 fe       	sbrs	r0, 7
     994:	fd cf       	rjmp	.-6      	; 0x990 <SPI_MasterTransmit+0x2>
}
     996:	08 95       	ret

00000998 <s_write_byte>:

char s_write_byte(unsigned char value)
{
     998:	28 e0       	ldi	r18, 0x08	; 8
     99a:	30 e0       	ldi	r19, 0x00	; 0
//PORTA= (0<<PA0);DDRA= (1<<PA0);PORTB= (1<<PB7);DDRB= (1<<DDB7);
	
unsigned char i,error=0;
for (i=0x80;i>0;i/=2); //shift bit for masking
     99c:	90 e8       	ldi	r25, 0x80	; 128
     99e:	96 95       	lsr	r25
     9a0:	21 50       	subi	r18, 0x01	; 1
     9a2:	30 40       	sbci	r19, 0x00	; 0
     9a4:	e1 f7       	brne	.-8      	; 0x99e <s_write_byte+0x6>
 if (i & value)
     9a6:	98 23       	and	r25, r24
     9a8:	11 f0       	breq	.+4      	; 0x9ae <s_write_byte+0x16>
DATA == 1; //masking value with i , write to SENSI-BUS
     9aa:	88 b1       	in	r24, 0x08	; 8
     9ac:	08 c0       	rjmp	.+16     	; 0x9be <s_write_byte+0x26>
else
{ 
DATA == 0;
     9ae:	88 b1       	in	r24, 0x08	; 8
_NOP(); //observe setup time
     9b0:	00 00       	nop
SCK == 1; //clk for SENSI-BUS
     9b2:	88 b1       	in	r24, 0x08	; 8
_NOP();_NOP();_NOP();
     9b4:	00 00       	nop
     9b6:	00 00       	nop
     9b8:	00 00       	nop
SCK == 0;
     9ba:	88 b1       	in	r24, 0x08	; 8
_NOP(); //observe hold time
     9bc:	00 00       	nop
}
DATA == 1; //release DATA-line
     9be:	88 b1       	in	r24, 0x08	; 8
_NOP(); //observe setup time
     9c0:	00 00       	nop
SCK == 1; //clk #9 for ack
     9c2:	88 b1       	in	r24, 0x08	; 8
error=DATA; //check ack (DATA will be pulled down by SHT11)
     9c4:	88 b1       	in	r24, 0x08	; 8
     9c6:	86 95       	lsr	r24
     9c8:	86 95       	lsr	r24
SCK == 0;
     9ca:	98 b1       	in	r25, 0x08	; 8
return error; //error=1 in case of no acknowledge	
}
     9cc:	81 70       	andi	r24, 0x01	; 1
     9ce:	08 95       	ret

000009d0 <s_read_byte>:

char s_read_byte(unsigned char ack)
{
	unsigned char i,val=0;
DATA == 1;                                  //release DATA-line
     9d0:	88 b1       	in	r24, 0x08	; 8
     9d2:	28 e0       	ldi	r18, 0x08	; 8
     9d4:	30 e0       	ldi	r19, 0x00	; 0
return error; //error=1 in case of no acknowledge	
}

char s_read_byte(unsigned char ack)
{
	unsigned char i,val=0;
     9d6:	80 e0       	ldi	r24, 0x00	; 0
DATA == 1;                                  //release DATA-line
for (i=0x80;i>0;i/=2)                         //shift bit for masking
     9d8:	90 e8       	ldi	r25, 0x80	; 128
 {
SCK== 0;                                //clk for SENSI-BUS
     9da:	48 b1       	in	r20, 0x08	; 8
if (DATA) val=(val | i);                      //read bit
     9dc:	48 b1       	in	r20, 0x08	; 8
     9de:	42 fd       	sbrc	r20, 2
     9e0:	89 2b       	or	r24, r25
SCK == 0;
     9e2:	48 b1       	in	r20, 0x08	; 8

char s_read_byte(unsigned char ack)
{
	unsigned char i,val=0;
DATA == 1;                                  //release DATA-line
for (i=0x80;i>0;i/=2)                         //shift bit for masking
     9e4:	96 95       	lsr	r25
     9e6:	21 50       	subi	r18, 0x01	; 1
     9e8:	30 40       	sbci	r19, 0x00	; 0
     9ea:	b9 f7       	brne	.-18     	; 0x9da <s_read_byte+0xa>
 {
SCK== 0;                                //clk for SENSI-BUS
if (DATA) val=(val | i);                      //read bit
SCK == 0;
}
DATA == !ACK;                             //in case of "ack==1" pull down DATA-Line
     9ec:	98 b1       	in	r25, 0x08	; 8
_NOP();                             //observe setup time
     9ee:	00 00       	nop
SCK == 1;                                  //clk #9 for ack
     9f0:	98 b1       	in	r25, 0x08	; 8
_NOP();_NOP();_NOP();                 //pulswith approx. 5 us
     9f2:	00 00       	nop
     9f4:	00 00       	nop
     9f6:	00 00       	nop
SCK == 0;
     9f8:	98 b1       	in	r25, 0x08	; 8
_NOP();                                  //observe hold time
     9fa:	00 00       	nop
DATA == 1;                                      //release DATA-line
     9fc:	98 b1       	in	r25, 0x08	; 8
return val;
}
     9fe:	08 95       	ret

00000a00 <s_transstart>:

void s_transstart(void)
{
DATA == 1;
     a00:	88 b1       	in	r24, 0x08	; 8
SCK == 0; //Initial state
     a02:	88 b1       	in	r24, 0x08	; 8
 _NOP();
     a04:	00 00       	nop
SCK == 1;
     a06:	88 b1       	in	r24, 0x08	; 8
 _NOP();
     a08:	00 00       	nop
DATA == 0;
     a0a:	88 b1       	in	r24, 0x08	; 8
 _NOP();
     a0c:	00 00       	nop
SCK == 0;
     a0e:	88 b1       	in	r24, 0x08	; 8
 _NOP(); _NOP(); _NOP();
     a10:	00 00       	nop
     a12:	00 00       	nop
     a14:	00 00       	nop
SCK == 1;
     a16:	88 b1       	in	r24, 0x08	; 8
 _NOP();
     a18:	00 00       	nop
DATA == 1;
     a1a:	88 b1       	in	r24, 0x08	; 8
 _NOP();
     a1c:	00 00       	nop
SCK == 0;	
     a1e:	88 b1       	in	r24, 0x08	; 8
}
     a20:	08 95       	ret

00000a22 <s_connectionreset>:

void s_connectionreset(void)
{
	unsigned char i;
DATA == 1;
     a22:	88 b1       	in	r24, 0x08	; 8
SCK == 0; //Initial state
     a24:	88 b1       	in	r24, 0x08	; 8
     a26:	89 e0       	ldi	r24, 0x09	; 9
for(i=0;i<9;i++) //9 SCK cycles
{
SCK == 1;
     a28:	98 b1       	in	r25, 0x08	; 8
SCK == 0;
     a2a:	98 b1       	in	r25, 0x08	; 8
     a2c:	81 50       	subi	r24, 0x01	; 1
void s_connectionreset(void)
{
	unsigned char i;
DATA == 1;
SCK == 0; //Initial state
for(i=0;i<9;i++) //9 SCK cycles
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <s_connectionreset+0x6>
{
SCK == 1;
SCK == 0;
}
s_transstart(); //transmission start
     a30:	0e 94 00 05 	call	0xa00	; 0xa00 <s_transstart>
}
     a34:	08 95       	ret

00000a36 <s_read_statusreg>:

char s_read_statusreg(unsigned char *p_value, unsigned char *p_checksum)
{
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	ec 01       	movw	r28, r24
     a42:	7b 01       	movw	r14, r22
unsigned char error=0;  // reads the status register with checksum (8-bit)
s_transstart(); //transmission start
     a44:	0e 94 00 05 	call	0xa00	; 0xa00 <s_transstart>
error=s_write_byte(read_status_reg); //send command to sensor
     a48:	87 e0       	ldi	r24, 0x07	; 7
     a4a:	0e 94 cc 04 	call	0x998	; 0x998 <s_write_byte>
     a4e:	18 2f       	mov	r17, r24
*p_value=s_read_byte(ACK); //read status register (8-bit)
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <s_read_byte>
     a56:	88 83       	st	Y, r24
*p_checksum=s_read_byte(noACK); //read checksum (8-bit)
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <s_read_byte>
     a5e:	f7 01       	movw	r30, r14
     a60:	80 83       	st	Z, r24
return error;
}
     a62:	81 2f       	mov	r24, r17
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	08 95       	ret

00000a70 <s_write_statusreg>:

char s_write_statusreg(unsigned char *p_value)
{
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	ec 01       	movw	r28, r24
unsigned char error=0;  // writes the status register with checksum (8-bit)
s_transstart(); //transmission start
     a78:	0e 94 00 05 	call	0xa00	; 0xa00 <s_transstart>
error+=s_write_byte(write_status_reg);//send command to sensor
     a7c:	86 e0       	ldi	r24, 0x06	; 6
     a7e:	0e 94 cc 04 	call	0x998	; 0x998 <s_write_byte>
     a82:	18 2f       	mov	r17, r24
error+=s_write_byte(*p_value); //send value of status register
     a84:	88 81       	ld	r24, Y
     a86:	0e 94 cc 04 	call	0x998	; 0x998 <s_write_byte>
return error;
}
     a8a:	81 0f       	add	r24, r17
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	08 95       	ret

00000a94 <s_measure>:

char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
{
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	ec 01       	movw	r28, r24
     aa0:	7b 01       	movw	r14, r22
     aa2:	14 2f       	mov	r17, r20
unsigned char error=0;  // makes a measurement (humidity/temperature) with checksum
unsigned int i;
s_transstart(); //transmission start
     aa4:	0e 94 00 05 	call	0xa00	; 0xa00 <s_transstart>
switch(mode)
     aa8:	11 23       	and	r17, r17
     aaa:	19 f0       	breq	.+6      	; 0xab2 <s_measure+0x1e>
     aac:	11 30       	cpi	r17, 0x01	; 1
     aae:	59 f4       	brne	.+22     	; 0xac6 <s_measure+0x32>
     ab0:	05 c0       	rjmp	.+10     	; 0xabc <s_measure+0x28>
{
 //send command to sensor
case TEMP : error+=s_write_byte (measure_temp); break;
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	0e 94 cc 04 	call	0x998	; 0x998 <s_write_byte>
     ab8:	18 2f       	mov	r17, r24
     aba:	06 c0       	rjmp	.+12     	; 0xac8 <s_measure+0x34>
case HUMI : error+=s_write_byte(measure_humidity); break;
     abc:	85 e0       	ldi	r24, 0x05	; 5
     abe:	0e 94 cc 04 	call	0x998	; 0x998 <s_write_byte>
     ac2:	18 2f       	mov	r17, r24
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <s_measure+0x34>
return error;
}

char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
{
unsigned char error=0;  // makes a measurement (humidity/temperature) with checksum
     ac6:	10 e0       	ldi	r17, 0x00	; 0
case TEMP : error+=s_write_byte (measure_temp); break;
case HUMI : error+=s_write_byte(measure_humidity); break;
default : break;
}
for (i=0;i<65535;i++)
if(DATA == 0)
     ac8:	88 b1       	in	r24, 0x08	; 8
     aca:	82 ff       	sbrs	r24, 2
     acc:	07 c0       	rjmp	.+14     	; 0xadc <s_measure+0x48>
     ace:	8e ef       	ldi	r24, 0xFE	; 254
     ad0:	9f ef       	ldi	r25, 0xFF	; 255
     ad2:	28 b1       	in	r18, 0x08	; 8
     ad4:	22 ff       	sbrs	r18, 2
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <s_measure+0x48>
     ad8:	01 97       	sbiw	r24, 0x01	; 1
 //send command to sensor
case TEMP : error+=s_write_byte (measure_temp); break;
case HUMI : error+=s_write_byte(measure_humidity); break;
default : break;
}
for (i=0;i<65535;i++)
     ada:	d9 f7       	brne	.-10     	; 0xad2 <s_measure+0x3e>
if(DATA == 0)
break; //wait until sensor has finished the
//measurement
if(DATA) error+=1; // or timeout (~2 sec.) is reached
     adc:	88 b1       	in	r24, 0x08	; 8
     ade:	82 fd       	sbrc	r24, 2
     ae0:	1f 5f       	subi	r17, 0xFF	; 255
*(p_value) =s_read_byte(ACK); //read the first byte (MSB)
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <s_read_byte>
     ae8:	88 83       	st	Y, r24
*(p_value+1)=s_read_byte(ACK); //read the second byte (LSB)
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <s_read_byte>
     af0:	89 83       	std	Y+1, r24	; 0x01
*p_checksum =s_read_byte(noACK); //read checksum
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <s_read_byte>
     af8:	f7 01       	movw	r30, r14
     afa:	80 83       	st	Z, r24
return error;
}
     afc:	81 2f       	mov	r24, r17
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	08 95       	ret

00000b0a <calcth>:
t_C=d1+d2*t;
rh_linear=c1+c2*rh+c3*rh*rh;
rh_true=(t_C-25)*(t1+t2*rh)+rh_linear;
ftemperature=t_C;
fhumidity=rh_true;
}
     b0a:	08 95       	ret

00000b0c <SHT1x>:


int SHT1x(void)
{
     b0c:	af 92       	push	r10
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	df 93       	push	r29
     b1c:	cf 93       	push	r28
     b1e:	00 d0       	rcall	.+0      	; 0xb20 <SHT1x+0x14>
     b20:	00 d0       	rcall	.+0      	; 0xb22 <SHT1x+0x16>
     b22:	0f 92       	push	r0
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
float rh;
float t;
    while(1)
    {
     error=0;
error+=s_measure((unsigned char*) &humi_val, &checksum, HUMI);
     b28:	8e 01       	movw	r16, r28
     b2a:	0b 5f       	subi	r16, 0xFB	; 251
     b2c:	1f 4f       	sbci	r17, 0xFF	; 255
     b2e:	6e 01       	movw	r12, r28
     b30:	08 94       	sec
     b32:	c1 1c       	adc	r12, r1
     b34:	d1 1c       	adc	r13, r1
error+=s_measure((unsigned char*) &temp_val, &checksum, TEMP);
     b36:	0f 2e       	mov	r0, r31
     b38:	f3 e0       	ldi	r31, 0x03	; 3
     b3a:	af 2e       	mov	r10, r31
     b3c:	bb 24       	eor	r11, r11
     b3e:	f0 2d       	mov	r31, r0
     b40:	ac 0e       	add	r10, r28
     b42:	bd 1e       	adc	r11, r29
float rh;
float t;
    while(1)
    {
     error=0;
error+=s_measure((unsigned char*) &humi_val, &checksum, HUMI);
     b44:	c6 01       	movw	r24, r12
     b46:	b8 01       	movw	r22, r16
     b48:	41 e0       	ldi	r20, 0x01	; 1
     b4a:	0e 94 4a 05 	call	0xa94	; 0xa94 <s_measure>
     b4e:	f8 2e       	mov	r15, r24
error+=s_measure((unsigned char*) &temp_val, &checksum, TEMP);
     b50:	c5 01       	movw	r24, r10
     b52:	b8 01       	movw	r22, r16
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	0e 94 4a 05 	call	0xa94	; 0xa94 <s_measure>
     b5a:	8f 0d       	add	r24, r15
if(error!=0)
     b5c:	99 f3       	breq	.-26     	; 0xb44 <SHT1x+0x38>
s_connectionreset();
     b5e:	0e 94 11 05 	call	0xa22	; 0xa22 <s_connectionreset>
     b62:	f0 cf       	rjmp	.-32     	; 0xb44 <SHT1x+0x38>

00000b64 <adc_init>:

// initialize adc
void adc_init()
{
    // AREF = AVcc
    ADMUX = (1<<REFS0);
     b64:	80 e4       	ldi	r24, 0x40	; 64
     b66:	80 93 7c 00 	sts	0x007C, r24
    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     b6a:	87 e8       	ldi	r24, 0x87	; 135
     b6c:	80 93 7a 00 	sts	0x007A, r24
}
     b70:	08 95       	ret

00000b72 <adc_read>:
{
    // select the corresponding channel 0~7
    // ANDing with '7' will always keep the value
    // of 'ch' between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     b72:	ec e7       	ldi	r30, 0x7C	; 124
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	90 81       	ld	r25, Z
int16_t adc_read(uint8_t ch)
{
    // select the corresponding channel 0~7
    // ANDing with '7' will always keep the value
    // of 'ch' between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
     b78:	87 70       	andi	r24, 0x07	; 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     b7a:	98 7f       	andi	r25, 0xF8	; 248
     b7c:	98 2b       	or	r25, r24
     b7e:	90 83       	st	Z, r25

    // start single convertion
    // write '1' to ADSC
    ADCSRA |= (1<<ADSC);
     b80:	ea e7       	ldi	r30, 0x7A	; 122
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	80 64       	ori	r24, 0x40	; 64
     b88:	80 83       	st	Z, r24

    // wait for conversion to complete
    // ADSC becomes '0' again
    // till then, run loop continuously
    while(ADCSRA & (1<<ADSC));
     b8a:	80 81       	ld	r24, Z
     b8c:	86 fd       	sbrc	r24, 6
     b8e:	fd cf       	rjmp	.-6      	; 0xb8a <adc_read+0x18>

    return (ADC);
     b90:	20 91 78 00 	lds	r18, 0x0078
     b94:	30 91 79 00 	lds	r19, 0x0079
}
     b98:	82 2f       	mov	r24, r18
     b9a:	93 2f       	mov	r25, r19
     b9c:	08 95       	ret

00000b9e <__subsf3>:
     b9e:	50 58       	subi	r21, 0x80	; 128

00000ba0 <__addsf3>:
     ba0:	bb 27       	eor	r27, r27
     ba2:	aa 27       	eor	r26, r26
     ba4:	0e d0       	rcall	.+28     	; 0xbc2 <__addsf3x>
     ba6:	4d c1       	rjmp	.+666    	; 0xe42 <__fp_round>
     ba8:	3e d1       	rcall	.+636    	; 0xe26 <__fp_pscA>
     baa:	30 f0       	brcs	.+12     	; 0xbb8 <__addsf3+0x18>
     bac:	43 d1       	rcall	.+646    	; 0xe34 <__fp_pscB>
     bae:	20 f0       	brcs	.+8      	; 0xbb8 <__addsf3+0x18>
     bb0:	31 f4       	brne	.+12     	; 0xbbe <__addsf3+0x1e>
     bb2:	9f 3f       	cpi	r25, 0xFF	; 255
     bb4:	11 f4       	brne	.+4      	; 0xbba <__addsf3+0x1a>
     bb6:	1e f4       	brtc	.+6      	; 0xbbe <__addsf3+0x1e>
     bb8:	33 c1       	rjmp	.+614    	; 0xe20 <__fp_nan>
     bba:	0e f4       	brtc	.+2      	; 0xbbe <__addsf3+0x1e>
     bbc:	e0 95       	com	r30
     bbe:	e7 fb       	bst	r30, 7
     bc0:	29 c1       	rjmp	.+594    	; 0xe14 <__fp_inf>

00000bc2 <__addsf3x>:
     bc2:	e9 2f       	mov	r30, r25
     bc4:	4f d1       	rcall	.+670    	; 0xe64 <__fp_split3>
     bc6:	80 f3       	brcs	.-32     	; 0xba8 <__addsf3+0x8>
     bc8:	ba 17       	cp	r27, r26
     bca:	62 07       	cpc	r22, r18
     bcc:	73 07       	cpc	r23, r19
     bce:	84 07       	cpc	r24, r20
     bd0:	95 07       	cpc	r25, r21
     bd2:	18 f0       	brcs	.+6      	; 0xbda <__addsf3x+0x18>
     bd4:	71 f4       	brne	.+28     	; 0xbf2 <__addsf3x+0x30>
     bd6:	9e f5       	brtc	.+102    	; 0xc3e <__addsf3x+0x7c>
     bd8:	67 c1       	rjmp	.+718    	; 0xea8 <__fp_zero>
     bda:	0e f4       	brtc	.+2      	; 0xbde <__addsf3x+0x1c>
     bdc:	e0 95       	com	r30
     bde:	0b 2e       	mov	r0, r27
     be0:	ba 2f       	mov	r27, r26
     be2:	a0 2d       	mov	r26, r0
     be4:	0b 01       	movw	r0, r22
     be6:	b9 01       	movw	r22, r18
     be8:	90 01       	movw	r18, r0
     bea:	0c 01       	movw	r0, r24
     bec:	ca 01       	movw	r24, r20
     bee:	a0 01       	movw	r20, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	ff 27       	eor	r31, r31
     bf4:	59 1b       	sub	r21, r25
     bf6:	99 f0       	breq	.+38     	; 0xc1e <__addsf3x+0x5c>
     bf8:	59 3f       	cpi	r21, 0xF9	; 249
     bfa:	50 f4       	brcc	.+20     	; 0xc10 <__addsf3x+0x4e>
     bfc:	50 3e       	cpi	r21, 0xE0	; 224
     bfe:	68 f1       	brcs	.+90     	; 0xc5a <__addsf3x+0x98>
     c00:	1a 16       	cp	r1, r26
     c02:	f0 40       	sbci	r31, 0x00	; 0
     c04:	a2 2f       	mov	r26, r18
     c06:	23 2f       	mov	r18, r19
     c08:	34 2f       	mov	r19, r20
     c0a:	44 27       	eor	r20, r20
     c0c:	58 5f       	subi	r21, 0xF8	; 248
     c0e:	f3 cf       	rjmp	.-26     	; 0xbf6 <__addsf3x+0x34>
     c10:	46 95       	lsr	r20
     c12:	37 95       	ror	r19
     c14:	27 95       	ror	r18
     c16:	a7 95       	ror	r26
     c18:	f0 40       	sbci	r31, 0x00	; 0
     c1a:	53 95       	inc	r21
     c1c:	c9 f7       	brne	.-14     	; 0xc10 <__addsf3x+0x4e>
     c1e:	7e f4       	brtc	.+30     	; 0xc3e <__addsf3x+0x7c>
     c20:	1f 16       	cp	r1, r31
     c22:	ba 0b       	sbc	r27, r26
     c24:	62 0b       	sbc	r22, r18
     c26:	73 0b       	sbc	r23, r19
     c28:	84 0b       	sbc	r24, r20
     c2a:	ba f0       	brmi	.+46     	; 0xc5a <__addsf3x+0x98>
     c2c:	91 50       	subi	r25, 0x01	; 1
     c2e:	a1 f0       	breq	.+40     	; 0xc58 <__addsf3x+0x96>
     c30:	ff 0f       	add	r31, r31
     c32:	bb 1f       	adc	r27, r27
     c34:	66 1f       	adc	r22, r22
     c36:	77 1f       	adc	r23, r23
     c38:	88 1f       	adc	r24, r24
     c3a:	c2 f7       	brpl	.-16     	; 0xc2c <__addsf3x+0x6a>
     c3c:	0e c0       	rjmp	.+28     	; 0xc5a <__addsf3x+0x98>
     c3e:	ba 0f       	add	r27, r26
     c40:	62 1f       	adc	r22, r18
     c42:	73 1f       	adc	r23, r19
     c44:	84 1f       	adc	r24, r20
     c46:	48 f4       	brcc	.+18     	; 0xc5a <__addsf3x+0x98>
     c48:	87 95       	ror	r24
     c4a:	77 95       	ror	r23
     c4c:	67 95       	ror	r22
     c4e:	b7 95       	ror	r27
     c50:	f7 95       	ror	r31
     c52:	9e 3f       	cpi	r25, 0xFE	; 254
     c54:	08 f0       	brcs	.+2      	; 0xc58 <__addsf3x+0x96>
     c56:	b3 cf       	rjmp	.-154    	; 0xbbe <__addsf3+0x1e>
     c58:	93 95       	inc	r25
     c5a:	88 0f       	add	r24, r24
     c5c:	08 f0       	brcs	.+2      	; 0xc60 <__addsf3x+0x9e>
     c5e:	99 27       	eor	r25, r25
     c60:	ee 0f       	add	r30, r30
     c62:	97 95       	ror	r25
     c64:	87 95       	ror	r24
     c66:	08 95       	ret

00000c68 <__divsf3>:
     c68:	0c d0       	rcall	.+24     	; 0xc82 <__divsf3x>
     c6a:	eb c0       	rjmp	.+470    	; 0xe42 <__fp_round>
     c6c:	e3 d0       	rcall	.+454    	; 0xe34 <__fp_pscB>
     c6e:	40 f0       	brcs	.+16     	; 0xc80 <__divsf3+0x18>
     c70:	da d0       	rcall	.+436    	; 0xe26 <__fp_pscA>
     c72:	30 f0       	brcs	.+12     	; 0xc80 <__divsf3+0x18>
     c74:	21 f4       	brne	.+8      	; 0xc7e <__divsf3+0x16>
     c76:	5f 3f       	cpi	r21, 0xFF	; 255
     c78:	19 f0       	breq	.+6      	; 0xc80 <__divsf3+0x18>
     c7a:	cc c0       	rjmp	.+408    	; 0xe14 <__fp_inf>
     c7c:	51 11       	cpse	r21, r1
     c7e:	15 c1       	rjmp	.+554    	; 0xeaa <__fp_szero>
     c80:	cf c0       	rjmp	.+414    	; 0xe20 <__fp_nan>

00000c82 <__divsf3x>:
     c82:	f0 d0       	rcall	.+480    	; 0xe64 <__fp_split3>
     c84:	98 f3       	brcs	.-26     	; 0xc6c <__divsf3+0x4>

00000c86 <__divsf3_pse>:
     c86:	99 23       	and	r25, r25
     c88:	c9 f3       	breq	.-14     	; 0xc7c <__divsf3+0x14>
     c8a:	55 23       	and	r21, r21
     c8c:	b1 f3       	breq	.-20     	; 0xc7a <__divsf3+0x12>
     c8e:	95 1b       	sub	r25, r21
     c90:	55 0b       	sbc	r21, r21
     c92:	bb 27       	eor	r27, r27
     c94:	aa 27       	eor	r26, r26
     c96:	62 17       	cp	r22, r18
     c98:	73 07       	cpc	r23, r19
     c9a:	84 07       	cpc	r24, r20
     c9c:	38 f0       	brcs	.+14     	; 0xcac <__divsf3_pse+0x26>
     c9e:	9f 5f       	subi	r25, 0xFF	; 255
     ca0:	5f 4f       	sbci	r21, 0xFF	; 255
     ca2:	22 0f       	add	r18, r18
     ca4:	33 1f       	adc	r19, r19
     ca6:	44 1f       	adc	r20, r20
     ca8:	aa 1f       	adc	r26, r26
     caa:	a9 f3       	breq	.-22     	; 0xc96 <__divsf3_pse+0x10>
     cac:	33 d0       	rcall	.+102    	; 0xd14 <__divsf3_pse+0x8e>
     cae:	0e 2e       	mov	r0, r30
     cb0:	3a f0       	brmi	.+14     	; 0xcc0 <__divsf3_pse+0x3a>
     cb2:	e0 e8       	ldi	r30, 0x80	; 128
     cb4:	30 d0       	rcall	.+96     	; 0xd16 <__divsf3_pse+0x90>
     cb6:	91 50       	subi	r25, 0x01	; 1
     cb8:	50 40       	sbci	r21, 0x00	; 0
     cba:	e6 95       	lsr	r30
     cbc:	00 1c       	adc	r0, r0
     cbe:	ca f7       	brpl	.-14     	; 0xcb2 <__divsf3_pse+0x2c>
     cc0:	29 d0       	rcall	.+82     	; 0xd14 <__divsf3_pse+0x8e>
     cc2:	fe 2f       	mov	r31, r30
     cc4:	27 d0       	rcall	.+78     	; 0xd14 <__divsf3_pse+0x8e>
     cc6:	66 0f       	add	r22, r22
     cc8:	77 1f       	adc	r23, r23
     cca:	88 1f       	adc	r24, r24
     ccc:	bb 1f       	adc	r27, r27
     cce:	26 17       	cp	r18, r22
     cd0:	37 07       	cpc	r19, r23
     cd2:	48 07       	cpc	r20, r24
     cd4:	ab 07       	cpc	r26, r27
     cd6:	b0 e8       	ldi	r27, 0x80	; 128
     cd8:	09 f0       	breq	.+2      	; 0xcdc <__divsf3_pse+0x56>
     cda:	bb 0b       	sbc	r27, r27
     cdc:	80 2d       	mov	r24, r0
     cde:	bf 01       	movw	r22, r30
     ce0:	ff 27       	eor	r31, r31
     ce2:	93 58       	subi	r25, 0x83	; 131
     ce4:	5f 4f       	sbci	r21, 0xFF	; 255
     ce6:	2a f0       	brmi	.+10     	; 0xcf2 <__divsf3_pse+0x6c>
     ce8:	9e 3f       	cpi	r25, 0xFE	; 254
     cea:	51 05       	cpc	r21, r1
     cec:	68 f0       	brcs	.+26     	; 0xd08 <__divsf3_pse+0x82>
     cee:	92 c0       	rjmp	.+292    	; 0xe14 <__fp_inf>
     cf0:	dc c0       	rjmp	.+440    	; 0xeaa <__fp_szero>
     cf2:	5f 3f       	cpi	r21, 0xFF	; 255
     cf4:	ec f3       	brlt	.-6      	; 0xcf0 <__divsf3_pse+0x6a>
     cf6:	98 3e       	cpi	r25, 0xE8	; 232
     cf8:	dc f3       	brlt	.-10     	; 0xcf0 <__divsf3_pse+0x6a>
     cfa:	86 95       	lsr	r24
     cfc:	77 95       	ror	r23
     cfe:	67 95       	ror	r22
     d00:	b7 95       	ror	r27
     d02:	f7 95       	ror	r31
     d04:	9f 5f       	subi	r25, 0xFF	; 255
     d06:	c9 f7       	brne	.-14     	; 0xcfa <__divsf3_pse+0x74>
     d08:	88 0f       	add	r24, r24
     d0a:	91 1d       	adc	r25, r1
     d0c:	96 95       	lsr	r25
     d0e:	87 95       	ror	r24
     d10:	97 f9       	bld	r25, 7
     d12:	08 95       	ret
     d14:	e1 e0       	ldi	r30, 0x01	; 1
     d16:	66 0f       	add	r22, r22
     d18:	77 1f       	adc	r23, r23
     d1a:	88 1f       	adc	r24, r24
     d1c:	bb 1f       	adc	r27, r27
     d1e:	62 17       	cp	r22, r18
     d20:	73 07       	cpc	r23, r19
     d22:	84 07       	cpc	r24, r20
     d24:	ba 07       	cpc	r27, r26
     d26:	20 f0       	brcs	.+8      	; 0xd30 <__divsf3_pse+0xaa>
     d28:	62 1b       	sub	r22, r18
     d2a:	73 0b       	sbc	r23, r19
     d2c:	84 0b       	sbc	r24, r20
     d2e:	ba 0b       	sbc	r27, r26
     d30:	ee 1f       	adc	r30, r30
     d32:	88 f7       	brcc	.-30     	; 0xd16 <__divsf3_pse+0x90>
     d34:	e0 95       	com	r30
     d36:	08 95       	ret

00000d38 <__fixsfsi>:
     d38:	04 d0       	rcall	.+8      	; 0xd42 <__fixunssfsi>
     d3a:	68 94       	set
     d3c:	b1 11       	cpse	r27, r1
     d3e:	b5 c0       	rjmp	.+362    	; 0xeaa <__fp_szero>
     d40:	08 95       	ret

00000d42 <__fixunssfsi>:
     d42:	98 d0       	rcall	.+304    	; 0xe74 <__fp_splitA>
     d44:	88 f0       	brcs	.+34     	; 0xd68 <__fixunssfsi+0x26>
     d46:	9f 57       	subi	r25, 0x7F	; 127
     d48:	90 f0       	brcs	.+36     	; 0xd6e <__fixunssfsi+0x2c>
     d4a:	b9 2f       	mov	r27, r25
     d4c:	99 27       	eor	r25, r25
     d4e:	b7 51       	subi	r27, 0x17	; 23
     d50:	a0 f0       	brcs	.+40     	; 0xd7a <__fixunssfsi+0x38>
     d52:	d1 f0       	breq	.+52     	; 0xd88 <__fixunssfsi+0x46>
     d54:	66 0f       	add	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	88 1f       	adc	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	1a f0       	brmi	.+6      	; 0xd64 <__fixunssfsi+0x22>
     d5e:	ba 95       	dec	r27
     d60:	c9 f7       	brne	.-14     	; 0xd54 <__fixunssfsi+0x12>
     d62:	12 c0       	rjmp	.+36     	; 0xd88 <__fixunssfsi+0x46>
     d64:	b1 30       	cpi	r27, 0x01	; 1
     d66:	81 f0       	breq	.+32     	; 0xd88 <__fixunssfsi+0x46>
     d68:	9f d0       	rcall	.+318    	; 0xea8 <__fp_zero>
     d6a:	b1 e0       	ldi	r27, 0x01	; 1
     d6c:	08 95       	ret
     d6e:	9c c0       	rjmp	.+312    	; 0xea8 <__fp_zero>
     d70:	67 2f       	mov	r22, r23
     d72:	78 2f       	mov	r23, r24
     d74:	88 27       	eor	r24, r24
     d76:	b8 5f       	subi	r27, 0xF8	; 248
     d78:	39 f0       	breq	.+14     	; 0xd88 <__fixunssfsi+0x46>
     d7a:	b9 3f       	cpi	r27, 0xF9	; 249
     d7c:	cc f3       	brlt	.-14     	; 0xd70 <__fixunssfsi+0x2e>
     d7e:	86 95       	lsr	r24
     d80:	77 95       	ror	r23
     d82:	67 95       	ror	r22
     d84:	b3 95       	inc	r27
     d86:	d9 f7       	brne	.-10     	; 0xd7e <__fixunssfsi+0x3c>
     d88:	3e f4       	brtc	.+14     	; 0xd98 <__fixunssfsi+0x56>
     d8a:	90 95       	com	r25
     d8c:	80 95       	com	r24
     d8e:	70 95       	com	r23
     d90:	61 95       	neg	r22
     d92:	7f 4f       	sbci	r23, 0xFF	; 255
     d94:	8f 4f       	sbci	r24, 0xFF	; 255
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	08 95       	ret

00000d9a <__floatunsisf>:
     d9a:	e8 94       	clt
     d9c:	09 c0       	rjmp	.+18     	; 0xdb0 <__floatsisf+0x12>

00000d9e <__floatsisf>:
     d9e:	97 fb       	bst	r25, 7
     da0:	3e f4       	brtc	.+14     	; 0xdb0 <__floatsisf+0x12>
     da2:	90 95       	com	r25
     da4:	80 95       	com	r24
     da6:	70 95       	com	r23
     da8:	61 95       	neg	r22
     daa:	7f 4f       	sbci	r23, 0xFF	; 255
     dac:	8f 4f       	sbci	r24, 0xFF	; 255
     dae:	9f 4f       	sbci	r25, 0xFF	; 255
     db0:	99 23       	and	r25, r25
     db2:	a9 f0       	breq	.+42     	; 0xdde <__floatsisf+0x40>
     db4:	f9 2f       	mov	r31, r25
     db6:	96 e9       	ldi	r25, 0x96	; 150
     db8:	bb 27       	eor	r27, r27
     dba:	93 95       	inc	r25
     dbc:	f6 95       	lsr	r31
     dbe:	87 95       	ror	r24
     dc0:	77 95       	ror	r23
     dc2:	67 95       	ror	r22
     dc4:	b7 95       	ror	r27
     dc6:	f1 11       	cpse	r31, r1
     dc8:	f8 cf       	rjmp	.-16     	; 0xdba <__floatsisf+0x1c>
     dca:	fa f4       	brpl	.+62     	; 0xe0a <__floatsisf+0x6c>
     dcc:	bb 0f       	add	r27, r27
     dce:	11 f4       	brne	.+4      	; 0xdd4 <__floatsisf+0x36>
     dd0:	60 ff       	sbrs	r22, 0
     dd2:	1b c0       	rjmp	.+54     	; 0xe0a <__floatsisf+0x6c>
     dd4:	6f 5f       	subi	r22, 0xFF	; 255
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	8f 4f       	sbci	r24, 0xFF	; 255
     dda:	9f 4f       	sbci	r25, 0xFF	; 255
     ddc:	16 c0       	rjmp	.+44     	; 0xe0a <__floatsisf+0x6c>
     dde:	88 23       	and	r24, r24
     de0:	11 f0       	breq	.+4      	; 0xde6 <__floatsisf+0x48>
     de2:	96 e9       	ldi	r25, 0x96	; 150
     de4:	11 c0       	rjmp	.+34     	; 0xe08 <__floatsisf+0x6a>
     de6:	77 23       	and	r23, r23
     de8:	21 f0       	breq	.+8      	; 0xdf2 <__floatsisf+0x54>
     dea:	9e e8       	ldi	r25, 0x8E	; 142
     dec:	87 2f       	mov	r24, r23
     dee:	76 2f       	mov	r23, r22
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <__floatsisf+0x5e>
     df2:	66 23       	and	r22, r22
     df4:	71 f0       	breq	.+28     	; 0xe12 <__floatsisf+0x74>
     df6:	96 e8       	ldi	r25, 0x86	; 134
     df8:	86 2f       	mov	r24, r22
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	2a f0       	brmi	.+10     	; 0xe0a <__floatsisf+0x6c>
     e00:	9a 95       	dec	r25
     e02:	66 0f       	add	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	88 1f       	adc	r24, r24
     e08:	da f7       	brpl	.-10     	; 0xe00 <__floatsisf+0x62>
     e0a:	88 0f       	add	r24, r24
     e0c:	96 95       	lsr	r25
     e0e:	87 95       	ror	r24
     e10:	97 f9       	bld	r25, 7
     e12:	08 95       	ret

00000e14 <__fp_inf>:
     e14:	97 f9       	bld	r25, 7
     e16:	9f 67       	ori	r25, 0x7F	; 127
     e18:	80 e8       	ldi	r24, 0x80	; 128
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	08 95       	ret

00000e20 <__fp_nan>:
     e20:	9f ef       	ldi	r25, 0xFF	; 255
     e22:	80 ec       	ldi	r24, 0xC0	; 192
     e24:	08 95       	ret

00000e26 <__fp_pscA>:
     e26:	00 24       	eor	r0, r0
     e28:	0a 94       	dec	r0
     e2a:	16 16       	cp	r1, r22
     e2c:	17 06       	cpc	r1, r23
     e2e:	18 06       	cpc	r1, r24
     e30:	09 06       	cpc	r0, r25
     e32:	08 95       	ret

00000e34 <__fp_pscB>:
     e34:	00 24       	eor	r0, r0
     e36:	0a 94       	dec	r0
     e38:	12 16       	cp	r1, r18
     e3a:	13 06       	cpc	r1, r19
     e3c:	14 06       	cpc	r1, r20
     e3e:	05 06       	cpc	r0, r21
     e40:	08 95       	ret

00000e42 <__fp_round>:
     e42:	09 2e       	mov	r0, r25
     e44:	03 94       	inc	r0
     e46:	00 0c       	add	r0, r0
     e48:	11 f4       	brne	.+4      	; 0xe4e <__fp_round+0xc>
     e4a:	88 23       	and	r24, r24
     e4c:	52 f0       	brmi	.+20     	; 0xe62 <__fp_round+0x20>
     e4e:	bb 0f       	add	r27, r27
     e50:	40 f4       	brcc	.+16     	; 0xe62 <__fp_round+0x20>
     e52:	bf 2b       	or	r27, r31
     e54:	11 f4       	brne	.+4      	; 0xe5a <__fp_round+0x18>
     e56:	60 ff       	sbrs	r22, 0
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <__fp_round+0x20>
     e5a:	6f 5f       	subi	r22, 0xFF	; 255
     e5c:	7f 4f       	sbci	r23, 0xFF	; 255
     e5e:	8f 4f       	sbci	r24, 0xFF	; 255
     e60:	9f 4f       	sbci	r25, 0xFF	; 255
     e62:	08 95       	ret

00000e64 <__fp_split3>:
     e64:	57 fd       	sbrc	r21, 7
     e66:	90 58       	subi	r25, 0x80	; 128
     e68:	44 0f       	add	r20, r20
     e6a:	55 1f       	adc	r21, r21
     e6c:	59 f0       	breq	.+22     	; 0xe84 <__fp_splitA+0x10>
     e6e:	5f 3f       	cpi	r21, 0xFF	; 255
     e70:	71 f0       	breq	.+28     	; 0xe8e <__fp_splitA+0x1a>
     e72:	47 95       	ror	r20

00000e74 <__fp_splitA>:
     e74:	88 0f       	add	r24, r24
     e76:	97 fb       	bst	r25, 7
     e78:	99 1f       	adc	r25, r25
     e7a:	61 f0       	breq	.+24     	; 0xe94 <__fp_splitA+0x20>
     e7c:	9f 3f       	cpi	r25, 0xFF	; 255
     e7e:	79 f0       	breq	.+30     	; 0xe9e <__fp_splitA+0x2a>
     e80:	87 95       	ror	r24
     e82:	08 95       	ret
     e84:	12 16       	cp	r1, r18
     e86:	13 06       	cpc	r1, r19
     e88:	14 06       	cpc	r1, r20
     e8a:	55 1f       	adc	r21, r21
     e8c:	f2 cf       	rjmp	.-28     	; 0xe72 <__fp_split3+0xe>
     e8e:	46 95       	lsr	r20
     e90:	f1 df       	rcall	.-30     	; 0xe74 <__fp_splitA>
     e92:	08 c0       	rjmp	.+16     	; 0xea4 <__fp_splitA+0x30>
     e94:	16 16       	cp	r1, r22
     e96:	17 06       	cpc	r1, r23
     e98:	18 06       	cpc	r1, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	f1 cf       	rjmp	.-30     	; 0xe80 <__fp_splitA+0xc>
     e9e:	86 95       	lsr	r24
     ea0:	71 05       	cpc	r23, r1
     ea2:	61 05       	cpc	r22, r1
     ea4:	08 94       	sec
     ea6:	08 95       	ret

00000ea8 <__fp_zero>:
     ea8:	e8 94       	clt

00000eaa <__fp_szero>:
     eaa:	bb 27       	eor	r27, r27
     eac:	66 27       	eor	r22, r22
     eae:	77 27       	eor	r23, r23
     eb0:	cb 01       	movw	r24, r22
     eb2:	97 f9       	bld	r25, 7
     eb4:	08 95       	ret

00000eb6 <__mulsf3>:
     eb6:	0b d0       	rcall	.+22     	; 0xece <__mulsf3x>
     eb8:	c4 cf       	rjmp	.-120    	; 0xe42 <__fp_round>
     eba:	b5 df       	rcall	.-150    	; 0xe26 <__fp_pscA>
     ebc:	28 f0       	brcs	.+10     	; 0xec8 <__mulsf3+0x12>
     ebe:	ba df       	rcall	.-140    	; 0xe34 <__fp_pscB>
     ec0:	18 f0       	brcs	.+6      	; 0xec8 <__mulsf3+0x12>
     ec2:	95 23       	and	r25, r21
     ec4:	09 f0       	breq	.+2      	; 0xec8 <__mulsf3+0x12>
     ec6:	a6 cf       	rjmp	.-180    	; 0xe14 <__fp_inf>
     ec8:	ab cf       	rjmp	.-170    	; 0xe20 <__fp_nan>
     eca:	11 24       	eor	r1, r1
     ecc:	ee cf       	rjmp	.-36     	; 0xeaa <__fp_szero>

00000ece <__mulsf3x>:
     ece:	ca df       	rcall	.-108    	; 0xe64 <__fp_split3>
     ed0:	a0 f3       	brcs	.-24     	; 0xeba <__mulsf3+0x4>

00000ed2 <__mulsf3_pse>:
     ed2:	95 9f       	mul	r25, r21
     ed4:	d1 f3       	breq	.-12     	; 0xeca <__mulsf3+0x14>
     ed6:	95 0f       	add	r25, r21
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	55 1f       	adc	r21, r21
     edc:	62 9f       	mul	r22, r18
     ede:	f0 01       	movw	r30, r0
     ee0:	72 9f       	mul	r23, r18
     ee2:	bb 27       	eor	r27, r27
     ee4:	f0 0d       	add	r31, r0
     ee6:	b1 1d       	adc	r27, r1
     ee8:	63 9f       	mul	r22, r19
     eea:	aa 27       	eor	r26, r26
     eec:	f0 0d       	add	r31, r0
     eee:	b1 1d       	adc	r27, r1
     ef0:	aa 1f       	adc	r26, r26
     ef2:	64 9f       	mul	r22, r20
     ef4:	66 27       	eor	r22, r22
     ef6:	b0 0d       	add	r27, r0
     ef8:	a1 1d       	adc	r26, r1
     efa:	66 1f       	adc	r22, r22
     efc:	82 9f       	mul	r24, r18
     efe:	22 27       	eor	r18, r18
     f00:	b0 0d       	add	r27, r0
     f02:	a1 1d       	adc	r26, r1
     f04:	62 1f       	adc	r22, r18
     f06:	73 9f       	mul	r23, r19
     f08:	b0 0d       	add	r27, r0
     f0a:	a1 1d       	adc	r26, r1
     f0c:	62 1f       	adc	r22, r18
     f0e:	83 9f       	mul	r24, r19
     f10:	a0 0d       	add	r26, r0
     f12:	61 1d       	adc	r22, r1
     f14:	22 1f       	adc	r18, r18
     f16:	74 9f       	mul	r23, r20
     f18:	33 27       	eor	r19, r19
     f1a:	a0 0d       	add	r26, r0
     f1c:	61 1d       	adc	r22, r1
     f1e:	23 1f       	adc	r18, r19
     f20:	84 9f       	mul	r24, r20
     f22:	60 0d       	add	r22, r0
     f24:	21 1d       	adc	r18, r1
     f26:	82 2f       	mov	r24, r18
     f28:	76 2f       	mov	r23, r22
     f2a:	6a 2f       	mov	r22, r26
     f2c:	11 24       	eor	r1, r1
     f2e:	9f 57       	subi	r25, 0x7F	; 127
     f30:	50 40       	sbci	r21, 0x00	; 0
     f32:	8a f0       	brmi	.+34     	; 0xf56 <__mulsf3_pse+0x84>
     f34:	e1 f0       	breq	.+56     	; 0xf6e <__mulsf3_pse+0x9c>
     f36:	88 23       	and	r24, r24
     f38:	4a f0       	brmi	.+18     	; 0xf4c <__mulsf3_pse+0x7a>
     f3a:	ee 0f       	add	r30, r30
     f3c:	ff 1f       	adc	r31, r31
     f3e:	bb 1f       	adc	r27, r27
     f40:	66 1f       	adc	r22, r22
     f42:	77 1f       	adc	r23, r23
     f44:	88 1f       	adc	r24, r24
     f46:	91 50       	subi	r25, 0x01	; 1
     f48:	50 40       	sbci	r21, 0x00	; 0
     f4a:	a9 f7       	brne	.-22     	; 0xf36 <__mulsf3_pse+0x64>
     f4c:	9e 3f       	cpi	r25, 0xFE	; 254
     f4e:	51 05       	cpc	r21, r1
     f50:	70 f0       	brcs	.+28     	; 0xf6e <__mulsf3_pse+0x9c>
     f52:	60 cf       	rjmp	.-320    	; 0xe14 <__fp_inf>
     f54:	aa cf       	rjmp	.-172    	; 0xeaa <__fp_szero>
     f56:	5f 3f       	cpi	r21, 0xFF	; 255
     f58:	ec f3       	brlt	.-6      	; 0xf54 <__mulsf3_pse+0x82>
     f5a:	98 3e       	cpi	r25, 0xE8	; 232
     f5c:	dc f3       	brlt	.-10     	; 0xf54 <__mulsf3_pse+0x82>
     f5e:	86 95       	lsr	r24
     f60:	77 95       	ror	r23
     f62:	67 95       	ror	r22
     f64:	b7 95       	ror	r27
     f66:	f7 95       	ror	r31
     f68:	e7 95       	ror	r30
     f6a:	9f 5f       	subi	r25, 0xFF	; 255
     f6c:	c1 f7       	brne	.-16     	; 0xf5e <__mulsf3_pse+0x8c>
     f6e:	fe 2b       	or	r31, r30
     f70:	88 0f       	add	r24, r24
     f72:	91 1d       	adc	r25, r1
     f74:	96 95       	lsr	r25
     f76:	87 95       	ror	r24
     f78:	97 f9       	bld	r25, 7
     f7a:	08 95       	ret

00000f7c <pow>:
     f7c:	fa 01       	movw	r30, r20
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	30 96       	adiw	r30, 0x00	; 0
     f84:	21 05       	cpc	r18, r1
     f86:	31 05       	cpc	r19, r1
     f88:	99 f1       	breq	.+102    	; 0xff0 <pow+0x74>
     f8a:	61 15       	cp	r22, r1
     f8c:	71 05       	cpc	r23, r1
     f8e:	61 f4       	brne	.+24     	; 0xfa8 <pow+0x2c>
     f90:	80 38       	cpi	r24, 0x80	; 128
     f92:	bf e3       	ldi	r27, 0x3F	; 63
     f94:	9b 07       	cpc	r25, r27
     f96:	49 f1       	breq	.+82     	; 0xfea <pow+0x6e>
     f98:	68 94       	set
     f9a:	90 38       	cpi	r25, 0x80	; 128
     f9c:	81 05       	cpc	r24, r1
     f9e:	61 f0       	breq	.+24     	; 0xfb8 <pow+0x3c>
     fa0:	80 38       	cpi	r24, 0x80	; 128
     fa2:	bf ef       	ldi	r27, 0xFF	; 255
     fa4:	9b 07       	cpc	r25, r27
     fa6:	41 f0       	breq	.+16     	; 0xfb8 <pow+0x3c>
     fa8:	99 23       	and	r25, r25
     faa:	42 f5       	brpl	.+80     	; 0xffc <pow+0x80>
     fac:	ff 3f       	cpi	r31, 0xFF	; 255
     fae:	e1 05       	cpc	r30, r1
     fb0:	31 05       	cpc	r19, r1
     fb2:	21 05       	cpc	r18, r1
     fb4:	11 f1       	breq	.+68     	; 0xffa <pow+0x7e>
     fb6:	e8 94       	clt
     fb8:	08 94       	sec
     fba:	e7 95       	ror	r30
     fbc:	d9 01       	movw	r26, r18
     fbe:	aa 23       	and	r26, r26
     fc0:	29 f4       	brne	.+10     	; 0xfcc <pow+0x50>
     fc2:	ab 2f       	mov	r26, r27
     fc4:	be 2f       	mov	r27, r30
     fc6:	f8 5f       	subi	r31, 0xF8	; 248
     fc8:	d0 f3       	brcs	.-12     	; 0xfbe <pow+0x42>
     fca:	10 c0       	rjmp	.+32     	; 0xfec <pow+0x70>
     fcc:	ff 5f       	subi	r31, 0xFF	; 255
     fce:	70 f4       	brcc	.+28     	; 0xfec <pow+0x70>
     fd0:	a6 95       	lsr	r26
     fd2:	e0 f7       	brcc	.-8      	; 0xfcc <pow+0x50>
     fd4:	f7 39       	cpi	r31, 0x97	; 151
     fd6:	50 f0       	brcs	.+20     	; 0xfec <pow+0x70>
     fd8:	19 f0       	breq	.+6      	; 0xfe0 <pow+0x64>
     fda:	ff 3a       	cpi	r31, 0xAF	; 175
     fdc:	38 f4       	brcc	.+14     	; 0xfec <pow+0x70>
     fde:	9f 77       	andi	r25, 0x7F	; 127
     fe0:	9f 93       	push	r25
     fe2:	0c d0       	rcall	.+24     	; 0xffc <pow+0x80>
     fe4:	0f 90       	pop	r0
     fe6:	07 fc       	sbrc	r0, 7
     fe8:	90 58       	subi	r25, 0x80	; 128
     fea:	08 95       	ret
     fec:	3e f0       	brts	.+14     	; 0xffc <pow+0x80>
     fee:	18 cf       	rjmp	.-464    	; 0xe20 <__fp_nan>
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	80 e8       	ldi	r24, 0x80	; 128
     ff6:	9f e3       	ldi	r25, 0x3F	; 63
     ff8:	08 95       	ret
     ffa:	4f e7       	ldi	r20, 0x7F	; 127
     ffc:	9f 77       	andi	r25, 0x7F	; 127
     ffe:	5f 93       	push	r21
    1000:	4f 93       	push	r20
    1002:	3f 93       	push	r19
    1004:	2f 93       	push	r18
    1006:	9e d0       	rcall	.+316    	; 0x1144 <log>
    1008:	2f 91       	pop	r18
    100a:	3f 91       	pop	r19
    100c:	4f 91       	pop	r20
    100e:	5f 91       	pop	r21
    1010:	52 df       	rcall	.-348    	; 0xeb6 <__mulsf3>
    1012:	05 c0       	rjmp	.+10     	; 0x101e <exp>
    1014:	19 f4       	brne	.+6      	; 0x101c <pow+0xa0>
    1016:	0e f0       	brts	.+2      	; 0x101a <pow+0x9e>
    1018:	fd ce       	rjmp	.-518    	; 0xe14 <__fp_inf>
    101a:	46 cf       	rjmp	.-372    	; 0xea8 <__fp_zero>
    101c:	01 cf       	rjmp	.-510    	; 0xe20 <__fp_nan>

0000101e <exp>:
    101e:	2a df       	rcall	.-428    	; 0xe74 <__fp_splitA>
    1020:	c8 f3       	brcs	.-14     	; 0x1014 <pow+0x98>
    1022:	96 38       	cpi	r25, 0x86	; 134
    1024:	c0 f7       	brcc	.-16     	; 0x1016 <pow+0x9a>
    1026:	07 f8       	bld	r0, 7
    1028:	0f 92       	push	r0
    102a:	e8 94       	clt
    102c:	2b e3       	ldi	r18, 0x3B	; 59
    102e:	3a ea       	ldi	r19, 0xAA	; 170
    1030:	48 eb       	ldi	r20, 0xB8	; 184
    1032:	5f e7       	ldi	r21, 0x7F	; 127
    1034:	4e df       	rcall	.-356    	; 0xed2 <__mulsf3_pse>
    1036:	0f 92       	push	r0
    1038:	0f 92       	push	r0
    103a:	0f 92       	push	r0
    103c:	4d b7       	in	r20, 0x3d	; 61
    103e:	5e b7       	in	r21, 0x3e	; 62
    1040:	0f 92       	push	r0
    1042:	c0 d0       	rcall	.+384    	; 0x11c4 <modf>
    1044:	ec e7       	ldi	r30, 0x7C	; 124
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	16 d0       	rcall	.+44     	; 0x1076 <__fp_powser>
    104a:	4f 91       	pop	r20
    104c:	5f 91       	pop	r21
    104e:	ef 91       	pop	r30
    1050:	ff 91       	pop	r31
    1052:	e5 95       	asr	r30
    1054:	ee 1f       	adc	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	49 f0       	breq	.+18     	; 0x106c <exp+0x4e>
    105a:	fe 57       	subi	r31, 0x7E	; 126
    105c:	e0 68       	ori	r30, 0x80	; 128
    105e:	44 27       	eor	r20, r20
    1060:	ee 0f       	add	r30, r30
    1062:	44 1f       	adc	r20, r20
    1064:	fa 95       	dec	r31
    1066:	e1 f7       	brne	.-8      	; 0x1060 <exp+0x42>
    1068:	41 95       	neg	r20
    106a:	55 0b       	sbc	r21, r21
    106c:	32 d0       	rcall	.+100    	; 0x10d2 <ldexp>
    106e:	0f 90       	pop	r0
    1070:	07 fe       	sbrs	r0, 7
    1072:	26 c0       	rjmp	.+76     	; 0x10c0 <inverse>
    1074:	08 95       	ret

00001076 <__fp_powser>:
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	1f 93       	push	r17
    107c:	0f 93       	push	r16
    107e:	ff 92       	push	r15
    1080:	ef 92       	push	r14
    1082:	df 92       	push	r13
    1084:	7b 01       	movw	r14, r22
    1086:	8c 01       	movw	r16, r24
    1088:	68 94       	set
    108a:	05 c0       	rjmp	.+10     	; 0x1096 <__fp_powser+0x20>
    108c:	da 2e       	mov	r13, r26
    108e:	ef 01       	movw	r28, r30
    1090:	1e df       	rcall	.-452    	; 0xece <__mulsf3x>
    1092:	fe 01       	movw	r30, r28
    1094:	e8 94       	clt
    1096:	a5 91       	lpm	r26, Z+
    1098:	25 91       	lpm	r18, Z+
    109a:	35 91       	lpm	r19, Z+
    109c:	45 91       	lpm	r20, Z+
    109e:	55 91       	lpm	r21, Z+
    10a0:	ae f3       	brts	.-22     	; 0x108c <__fp_powser+0x16>
    10a2:	ef 01       	movw	r28, r30
    10a4:	8e dd       	rcall	.-1252   	; 0xbc2 <__addsf3x>
    10a6:	fe 01       	movw	r30, r28
    10a8:	97 01       	movw	r18, r14
    10aa:	a8 01       	movw	r20, r16
    10ac:	da 94       	dec	r13
    10ae:	79 f7       	brne	.-34     	; 0x108e <__fp_powser+0x18>
    10b0:	df 90       	pop	r13
    10b2:	ef 90       	pop	r14
    10b4:	ff 90       	pop	r15
    10b6:	0f 91       	pop	r16
    10b8:	1f 91       	pop	r17
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <inverse>:
    10c0:	9b 01       	movw	r18, r22
    10c2:	ac 01       	movw	r20, r24
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	80 e8       	ldi	r24, 0x80	; 128
    10ca:	9f e3       	ldi	r25, 0x3F	; 63
    10cc:	cd cd       	rjmp	.-1126   	; 0xc68 <__divsf3>
    10ce:	a2 ce       	rjmp	.-700    	; 0xe14 <__fp_inf>
    10d0:	ac c0       	rjmp	.+344    	; 0x122a <__fp_mpack>

000010d2 <ldexp>:
    10d2:	d0 de       	rcall	.-608    	; 0xe74 <__fp_splitA>
    10d4:	e8 f3       	brcs	.-6      	; 0x10d0 <inverse+0x10>
    10d6:	99 23       	and	r25, r25
    10d8:	d9 f3       	breq	.-10     	; 0x10d0 <inverse+0x10>
    10da:	94 0f       	add	r25, r20
    10dc:	51 1d       	adc	r21, r1
    10de:	bb f3       	brvs	.-18     	; 0x10ce <inverse+0xe>
    10e0:	91 50       	subi	r25, 0x01	; 1
    10e2:	50 40       	sbci	r21, 0x00	; 0
    10e4:	94 f0       	brlt	.+36     	; 0x110a <__stack+0xb>
    10e6:	59 f0       	breq	.+22     	; 0x10fe <ldexp+0x2c>
    10e8:	88 23       	and	r24, r24
    10ea:	32 f0       	brmi	.+12     	; 0x10f8 <ldexp+0x26>
    10ec:	66 0f       	add	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	88 1f       	adc	r24, r24
    10f2:	91 50       	subi	r25, 0x01	; 1
    10f4:	50 40       	sbci	r21, 0x00	; 0
    10f6:	c1 f7       	brne	.-16     	; 0x10e8 <ldexp+0x16>
    10f8:	9e 3f       	cpi	r25, 0xFE	; 254
    10fa:	51 05       	cpc	r21, r1
    10fc:	44 f7       	brge	.-48     	; 0x10ce <inverse+0xe>
    10fe:	88 0f       	add	r24, r24
    1100:	91 1d       	adc	r25, r1
    1102:	96 95       	lsr	r25
    1104:	87 95       	ror	r24
    1106:	97 f9       	bld	r25, 7
    1108:	08 95       	ret
    110a:	5f 3f       	cpi	r21, 0xFF	; 255
    110c:	ac f0       	brlt	.+42     	; 0x1138 <__stack+0x39>
    110e:	98 3e       	cpi	r25, 0xE8	; 232
    1110:	9c f0       	brlt	.+38     	; 0x1138 <__stack+0x39>
    1112:	bb 27       	eor	r27, r27
    1114:	86 95       	lsr	r24
    1116:	77 95       	ror	r23
    1118:	67 95       	ror	r22
    111a:	b7 95       	ror	r27
    111c:	08 f4       	brcc	.+2      	; 0x1120 <__stack+0x21>
    111e:	b1 60       	ori	r27, 0x01	; 1
    1120:	93 95       	inc	r25
    1122:	c1 f7       	brne	.-16     	; 0x1114 <__stack+0x15>
    1124:	bb 0f       	add	r27, r27
    1126:	58 f7       	brcc	.-42     	; 0x10fe <ldexp+0x2c>
    1128:	11 f4       	brne	.+4      	; 0x112e <__stack+0x2f>
    112a:	60 ff       	sbrs	r22, 0
    112c:	e8 cf       	rjmp	.-48     	; 0x10fe <ldexp+0x2c>
    112e:	6f 5f       	subi	r22, 0xFF	; 255
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	8f 4f       	sbci	r24, 0xFF	; 255
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	e3 cf       	rjmp	.-58     	; 0x10fe <ldexp+0x2c>
    1138:	b8 ce       	rjmp	.-656    	; 0xeaa <__fp_szero>
    113a:	0e f0       	brts	.+2      	; 0x113e <__stack+0x3f>
    113c:	76 c0       	rjmp	.+236    	; 0x122a <__fp_mpack>
    113e:	70 ce       	rjmp	.-800    	; 0xe20 <__fp_nan>
    1140:	68 94       	set
    1142:	68 ce       	rjmp	.-816    	; 0xe14 <__fp_inf>

00001144 <log>:
    1144:	97 de       	rcall	.-722    	; 0xe74 <__fp_splitA>
    1146:	c8 f3       	brcs	.-14     	; 0x113a <__stack+0x3b>
    1148:	99 23       	and	r25, r25
    114a:	d1 f3       	breq	.-12     	; 0x1140 <__stack+0x41>
    114c:	c6 f3       	brts	.-16     	; 0x113e <__stack+0x3f>
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	1f 93       	push	r17
    1154:	0f 93       	push	r16
    1156:	ff 92       	push	r15
    1158:	c9 2f       	mov	r28, r25
    115a:	dd 27       	eor	r29, r29
    115c:	88 23       	and	r24, r24
    115e:	2a f0       	brmi	.+10     	; 0x116a <log+0x26>
    1160:	21 97       	sbiw	r28, 0x01	; 1
    1162:	66 0f       	add	r22, r22
    1164:	77 1f       	adc	r23, r23
    1166:	88 1f       	adc	r24, r24
    1168:	da f7       	brpl	.-10     	; 0x1160 <log+0x1c>
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e8       	ldi	r20, 0x80	; 128
    1170:	5f eb       	ldi	r21, 0xBF	; 191
    1172:	9f e3       	ldi	r25, 0x3F	; 63
    1174:	88 39       	cpi	r24, 0x98	; 152
    1176:	20 f0       	brcs	.+8      	; 0x1180 <log+0x3c>
    1178:	80 3e       	cpi	r24, 0xE0	; 224
    117a:	30 f0       	brcs	.+12     	; 0x1188 <log+0x44>
    117c:	21 96       	adiw	r28, 0x01	; 1
    117e:	8f 77       	andi	r24, 0x7F	; 127
    1180:	0f dd       	rcall	.-1506   	; 0xba0 <__addsf3>
    1182:	e4 ea       	ldi	r30, 0xA4	; 164
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	03 c0       	rjmp	.+6      	; 0x118e <log+0x4a>
    1188:	0b dd       	rcall	.-1514   	; 0xba0 <__addsf3>
    118a:	e1 ed       	ldi	r30, 0xD1	; 209
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	73 df       	rcall	.-282    	; 0x1076 <__fp_powser>
    1190:	8b 01       	movw	r16, r22
    1192:	be 01       	movw	r22, r28
    1194:	ec 01       	movw	r28, r24
    1196:	fb 2e       	mov	r15, r27
    1198:	6f 57       	subi	r22, 0x7F	; 127
    119a:	71 09       	sbc	r23, r1
    119c:	75 95       	asr	r23
    119e:	77 1f       	adc	r23, r23
    11a0:	88 0b       	sbc	r24, r24
    11a2:	99 0b       	sbc	r25, r25
    11a4:	fc dd       	rcall	.-1032   	; 0xd9e <__floatsisf>
    11a6:	28 e1       	ldi	r18, 0x18	; 24
    11a8:	32 e7       	ldi	r19, 0x72	; 114
    11aa:	41 e3       	ldi	r20, 0x31	; 49
    11ac:	5f e3       	ldi	r21, 0x3F	; 63
    11ae:	8f de       	rcall	.-738    	; 0xece <__mulsf3x>
    11b0:	af 2d       	mov	r26, r15
    11b2:	98 01       	movw	r18, r16
    11b4:	ae 01       	movw	r20, r28
    11b6:	ff 90       	pop	r15
    11b8:	0f 91       	pop	r16
    11ba:	1f 91       	pop	r17
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	00 dd       	rcall	.-1536   	; 0xbc2 <__addsf3x>
    11c2:	3f ce       	rjmp	.-898    	; 0xe42 <__fp_round>

000011c4 <modf>:
    11c4:	fa 01       	movw	r30, r20
    11c6:	dc 01       	movw	r26, r24
    11c8:	aa 0f       	add	r26, r26
    11ca:	bb 1f       	adc	r27, r27
    11cc:	9b 01       	movw	r18, r22
    11ce:	ac 01       	movw	r20, r24
    11d0:	bf 57       	subi	r27, 0x7F	; 127
    11d2:	28 f4       	brcc	.+10     	; 0x11de <modf+0x1a>
    11d4:	22 27       	eor	r18, r18
    11d6:	33 27       	eor	r19, r19
    11d8:	44 27       	eor	r20, r20
    11da:	50 78       	andi	r21, 0x80	; 128
    11dc:	1f c0       	rjmp	.+62     	; 0x121c <modf+0x58>
    11de:	b7 51       	subi	r27, 0x17	; 23
    11e0:	88 f4       	brcc	.+34     	; 0x1204 <modf+0x40>
    11e2:	ab 2f       	mov	r26, r27
    11e4:	00 24       	eor	r0, r0
    11e6:	46 95       	lsr	r20
    11e8:	37 95       	ror	r19
    11ea:	27 95       	ror	r18
    11ec:	01 1c       	adc	r0, r1
    11ee:	a3 95       	inc	r26
    11f0:	d2 f3       	brmi	.-12     	; 0x11e6 <modf+0x22>
    11f2:	00 20       	and	r0, r0
    11f4:	69 f0       	breq	.+26     	; 0x1210 <modf+0x4c>
    11f6:	22 0f       	add	r18, r18
    11f8:	33 1f       	adc	r19, r19
    11fa:	44 1f       	adc	r20, r20
    11fc:	b3 95       	inc	r27
    11fe:	da f3       	brmi	.-10     	; 0x11f6 <modf+0x32>
    1200:	0d d0       	rcall	.+26     	; 0x121c <modf+0x58>
    1202:	cd cc       	rjmp	.-1638   	; 0xb9e <__subsf3>
    1204:	61 30       	cpi	r22, 0x01	; 1
    1206:	71 05       	cpc	r23, r1
    1208:	a0 e8       	ldi	r26, 0x80	; 128
    120a:	8a 07       	cpc	r24, r26
    120c:	b9 46       	sbci	r27, 0x69	; 105
    120e:	30 f4       	brcc	.+12     	; 0x121c <modf+0x58>
    1210:	9b 01       	movw	r18, r22
    1212:	ac 01       	movw	r20, r24
    1214:	66 27       	eor	r22, r22
    1216:	77 27       	eor	r23, r23
    1218:	88 27       	eor	r24, r24
    121a:	90 78       	andi	r25, 0x80	; 128
    121c:	30 96       	adiw	r30, 0x00	; 0
    121e:	21 f0       	breq	.+8      	; 0x1228 <modf+0x64>
    1220:	20 83       	st	Z, r18
    1222:	31 83       	std	Z+1, r19	; 0x01
    1224:	42 83       	std	Z+2, r20	; 0x02
    1226:	53 83       	std	Z+3, r21	; 0x03
    1228:	08 95       	ret

0000122a <__fp_mpack>:
    122a:	9f 3f       	cpi	r25, 0xFF	; 255
    122c:	31 f0       	breq	.+12     	; 0x123a <__fp_mpack_finite+0xc>

0000122e <__fp_mpack_finite>:
    122e:	91 50       	subi	r25, 0x01	; 1
    1230:	20 f4       	brcc	.+8      	; 0x123a <__fp_mpack_finite+0xc>
    1232:	87 95       	ror	r24
    1234:	77 95       	ror	r23
    1236:	67 95       	ror	r22
    1238:	b7 95       	ror	r27
    123a:	88 0f       	add	r24, r24
    123c:	91 1d       	adc	r25, r1
    123e:	96 95       	lsr	r25
    1240:	87 95       	ror	r24
    1242:	97 f9       	bld	r25, 7
    1244:	08 95       	ret

00001246 <__udivmodqi4>:
    1246:	99 1b       	sub	r25, r25
    1248:	79 e0       	ldi	r23, 0x09	; 9
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <__udivmodqi4_ep>

0000124c <__udivmodqi4_loop>:
    124c:	99 1f       	adc	r25, r25
    124e:	96 17       	cp	r25, r22
    1250:	08 f0       	brcs	.+2      	; 0x1254 <__udivmodqi4_ep>
    1252:	96 1b       	sub	r25, r22

00001254 <__udivmodqi4_ep>:
    1254:	88 1f       	adc	r24, r24
    1256:	7a 95       	dec	r23
    1258:	c9 f7       	brne	.-14     	; 0x124c <__udivmodqi4_loop>
    125a:	80 95       	com	r24
    125c:	08 95       	ret

0000125e <__udivmodhi4>:
    125e:	aa 1b       	sub	r26, r26
    1260:	bb 1b       	sub	r27, r27
    1262:	51 e1       	ldi	r21, 0x11	; 17
    1264:	07 c0       	rjmp	.+14     	; 0x1274 <__udivmodhi4_ep>

00001266 <__udivmodhi4_loop>:
    1266:	aa 1f       	adc	r26, r26
    1268:	bb 1f       	adc	r27, r27
    126a:	a6 17       	cp	r26, r22
    126c:	b7 07       	cpc	r27, r23
    126e:	10 f0       	brcs	.+4      	; 0x1274 <__udivmodhi4_ep>
    1270:	a6 1b       	sub	r26, r22
    1272:	b7 0b       	sbc	r27, r23

00001274 <__udivmodhi4_ep>:
    1274:	88 1f       	adc	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	5a 95       	dec	r21
    127a:	a9 f7       	brne	.-22     	; 0x1266 <__udivmodhi4_loop>
    127c:	80 95       	com	r24
    127e:	90 95       	com	r25
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	08 95       	ret

00001286 <__divmodsi4>:
    1286:	97 fb       	bst	r25, 7
    1288:	09 2e       	mov	r0, r25
    128a:	05 26       	eor	r0, r21
    128c:	0e d0       	rcall	.+28     	; 0x12aa <__divmodsi4_neg1>
    128e:	57 fd       	sbrc	r21, 7
    1290:	04 d0       	rcall	.+8      	; 0x129a <__divmodsi4_neg2>
    1292:	14 d0       	rcall	.+40     	; 0x12bc <__udivmodsi4>
    1294:	0a d0       	rcall	.+20     	; 0x12aa <__divmodsi4_neg1>
    1296:	00 1c       	adc	r0, r0
    1298:	38 f4       	brcc	.+14     	; 0x12a8 <__divmodsi4_exit>

0000129a <__divmodsi4_neg2>:
    129a:	50 95       	com	r21
    129c:	40 95       	com	r20
    129e:	30 95       	com	r19
    12a0:	21 95       	neg	r18
    12a2:	3f 4f       	sbci	r19, 0xFF	; 255
    12a4:	4f 4f       	sbci	r20, 0xFF	; 255
    12a6:	5f 4f       	sbci	r21, 0xFF	; 255

000012a8 <__divmodsi4_exit>:
    12a8:	08 95       	ret

000012aa <__divmodsi4_neg1>:
    12aa:	f6 f7       	brtc	.-4      	; 0x12a8 <__divmodsi4_exit>
    12ac:	90 95       	com	r25
    12ae:	80 95       	com	r24
    12b0:	70 95       	com	r23
    12b2:	61 95       	neg	r22
    12b4:	7f 4f       	sbci	r23, 0xFF	; 255
    12b6:	8f 4f       	sbci	r24, 0xFF	; 255
    12b8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ba:	08 95       	ret

000012bc <__udivmodsi4>:
    12bc:	a1 e2       	ldi	r26, 0x21	; 33
    12be:	1a 2e       	mov	r1, r26
    12c0:	aa 1b       	sub	r26, r26
    12c2:	bb 1b       	sub	r27, r27
    12c4:	fd 01       	movw	r30, r26
    12c6:	0d c0       	rjmp	.+26     	; 0x12e2 <__udivmodsi4_ep>

000012c8 <__udivmodsi4_loop>:
    12c8:	aa 1f       	adc	r26, r26
    12ca:	bb 1f       	adc	r27, r27
    12cc:	ee 1f       	adc	r30, r30
    12ce:	ff 1f       	adc	r31, r31
    12d0:	a2 17       	cp	r26, r18
    12d2:	b3 07       	cpc	r27, r19
    12d4:	e4 07       	cpc	r30, r20
    12d6:	f5 07       	cpc	r31, r21
    12d8:	20 f0       	brcs	.+8      	; 0x12e2 <__udivmodsi4_ep>
    12da:	a2 1b       	sub	r26, r18
    12dc:	b3 0b       	sbc	r27, r19
    12de:	e4 0b       	sbc	r30, r20
    12e0:	f5 0b       	sbc	r31, r21

000012e2 <__udivmodsi4_ep>:
    12e2:	66 1f       	adc	r22, r22
    12e4:	77 1f       	adc	r23, r23
    12e6:	88 1f       	adc	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	1a 94       	dec	r1
    12ec:	69 f7       	brne	.-38     	; 0x12c8 <__udivmodsi4_loop>
    12ee:	60 95       	com	r22
    12f0:	70 95       	com	r23
    12f2:	80 95       	com	r24
    12f4:	90 95       	com	r25
    12f6:	9b 01       	movw	r18, r22
    12f8:	ac 01       	movw	r20, r24
    12fa:	bd 01       	movw	r22, r26
    12fc:	cf 01       	movw	r24, r30
    12fe:	08 95       	ret

00001300 <itoa>:
    1300:	fb 01       	movw	r30, r22
    1302:	9f 01       	movw	r18, r30
    1304:	e8 94       	clt
    1306:	42 30       	cpi	r20, 0x02	; 2
    1308:	c4 f0       	brlt	.+48     	; 0x133a <itoa+0x3a>
    130a:	45 32       	cpi	r20, 0x25	; 37
    130c:	b4 f4       	brge	.+44     	; 0x133a <itoa+0x3a>
    130e:	4a 30       	cpi	r20, 0x0A	; 10
    1310:	29 f4       	brne	.+10     	; 0x131c <itoa+0x1c>
    1312:	97 fb       	bst	r25, 7
    1314:	1e f4       	brtc	.+6      	; 0x131c <itoa+0x1c>
    1316:	90 95       	com	r25
    1318:	81 95       	neg	r24
    131a:	9f 4f       	sbci	r25, 0xFF	; 255
    131c:	64 2f       	mov	r22, r20
    131e:	77 27       	eor	r23, r23
    1320:	0e 94 2f 09 	call	0x125e	; 0x125e <__udivmodhi4>
    1324:	80 5d       	subi	r24, 0xD0	; 208
    1326:	8a 33       	cpi	r24, 0x3A	; 58
    1328:	0c f0       	brlt	.+2      	; 0x132c <itoa+0x2c>
    132a:	89 5d       	subi	r24, 0xD9	; 217
    132c:	81 93       	st	Z+, r24
    132e:	cb 01       	movw	r24, r22
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	a1 f7       	brne	.-24     	; 0x131c <itoa+0x1c>
    1334:	16 f4       	brtc	.+4      	; 0x133a <itoa+0x3a>
    1336:	5d e2       	ldi	r21, 0x2D	; 45
    1338:	51 93       	st	Z+, r21
    133a:	10 82       	st	Z, r1
    133c:	c9 01       	movw	r24, r18
    133e:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <strrev>

00001342 <ltoa>:
    1342:	fa 01       	movw	r30, r20
    1344:	cf 93       	push	r28
    1346:	ff 93       	push	r31
    1348:	ef 93       	push	r30
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	44 f1       	brlt	.+80     	; 0x139e <ltoa+0x5c>
    134e:	25 32       	cpi	r18, 0x25	; 37
    1350:	34 f5       	brge	.+76     	; 0x139e <ltoa+0x5c>
    1352:	c2 2f       	mov	r28, r18
    1354:	e8 94       	clt
    1356:	ca 30       	cpi	r28, 0x0A	; 10
    1358:	49 f4       	brne	.+18     	; 0x136c <ltoa+0x2a>
    135a:	97 fb       	bst	r25, 7
    135c:	3e f4       	brtc	.+14     	; 0x136c <ltoa+0x2a>
    135e:	90 95       	com	r25
    1360:	80 95       	com	r24
    1362:	70 95       	com	r23
    1364:	61 95       	neg	r22
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	8f 4f       	sbci	r24, 0xFF	; 255
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	2c 2f       	mov	r18, r28
    136e:	33 27       	eor	r19, r19
    1370:	44 27       	eor	r20, r20
    1372:	55 27       	eor	r21, r21
    1374:	ff 93       	push	r31
    1376:	ef 93       	push	r30
    1378:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__udivmodsi4>
    137c:	ef 91       	pop	r30
    137e:	ff 91       	pop	r31
    1380:	60 5d       	subi	r22, 0xD0	; 208
    1382:	6a 33       	cpi	r22, 0x3A	; 58
    1384:	0c f0       	brlt	.+2      	; 0x1388 <ltoa+0x46>
    1386:	69 5d       	subi	r22, 0xD9	; 217
    1388:	61 93       	st	Z+, r22
    138a:	b9 01       	movw	r22, r18
    138c:	ca 01       	movw	r24, r20
    138e:	60 50       	subi	r22, 0x00	; 0
    1390:	70 40       	sbci	r23, 0x00	; 0
    1392:	80 40       	sbci	r24, 0x00	; 0
    1394:	90 40       	sbci	r25, 0x00	; 0
    1396:	51 f7       	brne	.-44     	; 0x136c <ltoa+0x2a>
    1398:	16 f4       	brtc	.+4      	; 0x139e <ltoa+0x5c>
    139a:	cd e2       	ldi	r28, 0x2D	; 45
    139c:	c1 93       	st	Z+, r28
    139e:	10 82       	st	Z, r1
    13a0:	8f 91       	pop	r24
    13a2:	9f 91       	pop	r25
    13a4:	cf 91       	pop	r28
    13a6:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <strrev>

000013aa <puts>:
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	8c 01       	movw	r16, r24
    13b8:	e0 91 56 01 	lds	r30, 0x0156
    13bc:	f0 91 57 01 	lds	r31, 0x0157
    13c0:	83 81       	ldd	r24, Z+3	; 0x03
    13c2:	81 ff       	sbrs	r24, 1
    13c4:	1f c0       	rjmp	.+62     	; 0x1404 <puts+0x5a>
    13c6:	c0 e0       	ldi	r28, 0x00	; 0
    13c8:	d0 e0       	ldi	r29, 0x00	; 0
    13ca:	0a c0       	rjmp	.+20     	; 0x13e0 <puts+0x36>
    13cc:	db 01       	movw	r26, r22
    13ce:	18 96       	adiw	r26, 0x08	; 8
    13d0:	ed 91       	ld	r30, X+
    13d2:	fc 91       	ld	r31, X
    13d4:	19 97       	sbiw	r26, 0x09	; 9
    13d6:	09 95       	icall
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	11 f0       	breq	.+4      	; 0x13e0 <puts+0x36>
    13dc:	cf ef       	ldi	r28, 0xFF	; 255
    13de:	df ef       	ldi	r29, 0xFF	; 255
    13e0:	f8 01       	movw	r30, r16
    13e2:	81 91       	ld	r24, Z+
    13e4:	8f 01       	movw	r16, r30
    13e6:	60 91 56 01 	lds	r22, 0x0156
    13ea:	70 91 57 01 	lds	r23, 0x0157
    13ee:	88 23       	and	r24, r24
    13f0:	69 f7       	brne	.-38     	; 0x13cc <puts+0x22>
    13f2:	db 01       	movw	r26, r22
    13f4:	18 96       	adiw	r26, 0x08	; 8
    13f6:	ed 91       	ld	r30, X+
    13f8:	fc 91       	ld	r31, X
    13fa:	19 97       	sbiw	r26, 0x09	; 9
    13fc:	8a e0       	ldi	r24, 0x0A	; 10
    13fe:	09 95       	icall
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	11 f0       	breq	.+4      	; 0x1408 <puts+0x5e>
    1404:	cf ef       	ldi	r28, 0xFF	; 255
    1406:	df ef       	ldi	r29, 0xFF	; 255
    1408:	ce 01       	movw	r24, r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	e6 e0       	ldi	r30, 0x06	; 6
    1410:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__epilogue_restores__+0x18>

00001414 <strrev>:
    1414:	dc 01       	movw	r26, r24
    1416:	fc 01       	movw	r30, r24
    1418:	67 2f       	mov	r22, r23
    141a:	71 91       	ld	r23, Z+
    141c:	77 23       	and	r23, r23
    141e:	e1 f7       	brne	.-8      	; 0x1418 <strrev+0x4>
    1420:	32 97       	sbiw	r30, 0x02	; 2
    1422:	04 c0       	rjmp	.+8      	; 0x142c <strrev+0x18>
    1424:	7c 91       	ld	r23, X
    1426:	6d 93       	st	X+, r22
    1428:	70 83       	st	Z, r23
    142a:	62 91       	ld	r22, -Z
    142c:	ae 17       	cp	r26, r30
    142e:	bf 07       	cpc	r27, r31
    1430:	c8 f3       	brcs	.-14     	; 0x1424 <strrev+0x10>
    1432:	08 95       	ret

00001434 <__epilogue_restores__>:
    1434:	2a 88       	ldd	r2, Y+18	; 0x12
    1436:	39 88       	ldd	r3, Y+17	; 0x11
    1438:	48 88       	ldd	r4, Y+16	; 0x10
    143a:	5f 84       	ldd	r5, Y+15	; 0x0f
    143c:	6e 84       	ldd	r6, Y+14	; 0x0e
    143e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1440:	8c 84       	ldd	r8, Y+12	; 0x0c
    1442:	9b 84       	ldd	r9, Y+11	; 0x0b
    1444:	aa 84       	ldd	r10, Y+10	; 0x0a
    1446:	b9 84       	ldd	r11, Y+9	; 0x09
    1448:	c8 84       	ldd	r12, Y+8	; 0x08
    144a:	df 80       	ldd	r13, Y+7	; 0x07
    144c:	ee 80       	ldd	r14, Y+6	; 0x06
    144e:	fd 80       	ldd	r15, Y+5	; 0x05
    1450:	0c 81       	ldd	r16, Y+4	; 0x04
    1452:	1b 81       	ldd	r17, Y+3	; 0x03
    1454:	aa 81       	ldd	r26, Y+2	; 0x02
    1456:	b9 81       	ldd	r27, Y+1	; 0x01
    1458:	ce 0f       	add	r28, r30
    145a:	d1 1d       	adc	r29, r1
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	ed 01       	movw	r28, r26
    1468:	08 95       	ret

0000146a <_exit>:
    146a:	f8 94       	cli

0000146c <__stop_program>:
    146c:	ff cf       	rjmp	.-2      	; 0x146c <__stop_program>
