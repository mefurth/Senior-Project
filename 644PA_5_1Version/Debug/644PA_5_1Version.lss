
644PA_5_1Version.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000016f0  00001784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080013e  0080013e  000017c2  2**0
                  ALLOC
  3 .stab         0000366c  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b9b  00000000  00000000  00004e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000059cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000036b  00000000  00000000  00005a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a78  00000000  00000000  00005df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000904  00000000  00000000  0000786e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000167b  00000000  00000000  00008172  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002f0  00000000  00000000  000097f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005c3  00000000  00000000  00009ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b9c  00000000  00000000  0000a0a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000017c  00000000  00000000  0000ac3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000028  00000000  00000000  0000adbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
       4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      40:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      50:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      54:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      60:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      68:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      6c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      70:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      74:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      78:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	08 00       	.word	0x0008	; ????
      a6:	00 00       	nop
      a8:	be 92       	st	-X, r11
      aa:	24 49       	sbci	r18, 0x94	; 148
      ac:	12 3e       	cpi	r17, 0xE2	; 226
      ae:	ab aa       	std	Y+51, r10	; 0x33
      b0:	aa 2a       	or	r10, r26
      b2:	be cd       	rjmp	.-1156   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
      b4:	cc cc       	rjmp	.-1640   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
      b6:	4c 3e       	cpi	r20, 0xEC	; 236
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	be ab       	std	Y+54, r27	; 0x36
      be:	aa aa       	std	Y+50, r10	; 0x32
      c0:	aa 3e       	cpi	r26, 0xEA	; 234
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	bf 00       	.word	0x00bf	; ????
      c8:	00 00       	nop
      ca:	80 3f       	cpi	r24, 0xF0	; 240
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 08       	sbc	r0, r0
      d2:	41 78       	andi	r20, 0x81	; 129
      d4:	d3 bb       	out	0x13, r29	; 19
      d6:	43 87       	std	Z+11, r20	; 0x0b
      d8:	d1 13       	cpse	r29, r17
      da:	3d 19       	sub	r19, r13
      dc:	0e 3c       	cpi	r16, 0xCE	; 206
      de:	c3 bd       	out	0x23, r28	; 35
      e0:	42 82       	std	Z+2, r4	; 0x02
      e2:	ad 2b       	or	r26, r29
      e4:	3e 68       	ori	r19, 0x8E	; 142
      e6:	ec 82       	std	Y+4, r14	; 0x04
      e8:	76 be       	out	0x36, r7	; 54
      ea:	d9 8f       	std	Y+25, r29	; 0x19
      ec:	e1 a9       	ldd	r30, Z+49	; 0x31
      ee:	3e 4c       	sbci	r19, 0xCE	; 206
      f0:	80 ef       	ldi	r24, 0xF0	; 240
      f2:	ff be       	out	0x3f, r15	; 63
      f4:	01 c4       	rjmp	.+2050   	; 0x8f8 <bmp085Convert+0xee>
      f6:	ff 7f       	andi	r31, 0xFF	; 255
      f8:	3f 00       	.word	0x003f	; ????
      fa:	00 00       	nop
	...

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d0 e1       	ldi	r29, 0x10	; 16
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	e0 ef       	ldi	r30, 0xF0	; 240
     112:	f6 e1       	ldi	r31, 0x16	; 22
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x10>
     116:	05 90       	lpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	ae 33       	cpi	r26, 0x3E	; 62
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0xc>

00000120 <__do_clear_bss>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	ae e3       	ldi	r26, 0x3E	; 62
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	aa 35       	cpi	r26, 0x5A	; 90
     12c:	b1 07       	cpc	r27, r17
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
     134:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <_exit>

00000138 <__bad_interrupt>:
     138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <speed_limit>:
 uint16_t Condition;
 uint16_t Condition2;
 uint16_t adc_result0;
 Condition=250;
 Condition2=30;
 adc_result0 = adc_read(0);      // read adc value at PA0
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 0f 07 	call	0xe1e	; 0xe1e <adc_read>
     144:	28 2f       	mov	r18, r24
     146:	39 2f       	mov	r19, r25
	 int speed;
	 if ((adc_result0 <= Condition2))
     148:	2f 31       	cpi	r18, 0x1F	; 31
     14a:	31 05       	cpc	r19, r1
     14c:	30 f0       	brcs	.+12     	; 0x15a <speed_limit+0x1e>
	 {
		 speed = 55;
	 }
	else if((Condition2 < adc_result0)&&(adc_result0<=Condition) ) {
     14e:	2b 3f       	cpi	r18, 0xFB	; 251
     150:	31 05       	cpc	r19, r1
     152:	30 f4       	brcc	.+12     	; 0x160 <speed_limit+0x24>
 speed = 65; }// this is where we set our speed limit
     154:	21 e4       	ldi	r18, 0x41	; 65
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	05 c0       	rjmp	.+10     	; 0x164 <speed_limit+0x28>
 Condition2=30;
 adc_result0 = adc_read(0);      // read adc value at PA0
	 int speed;
	 if ((adc_result0 <= Condition2))
	 {
		 speed = 55;
     15a:	27 e3       	ldi	r18, 0x37	; 55
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	02 c0       	rjmp	.+4      	; 0x164 <speed_limit+0x28>
	 }
	else if((Condition2 < adc_result0)&&(adc_result0<=Condition) ) {
 speed = 65; }// this is where we set our speed limit
 else {
	 speed =95;}
     160:	2f e5       	ldi	r18, 0x5F	; 95
     162:	30 e0       	ldi	r19, 0x00	; 0
  return speed; // returns value stored in speed variable 	
 }	
     164:	82 2f       	mov	r24, r18
     166:	93 2f       	mov	r25, r19
     168:	08 95       	ret

0000016a <main>:
void main()
{
     16a:	4f 92       	push	r4
     16c:	5f 92       	push	r5
     16e:	6f 92       	push	r6
     170:	7f 92       	push	r7
     172:	8f 92       	push	r8
     174:	9f 92       	push	r9
     176:	af 92       	push	r10
     178:	bf 92       	push	r11
     17a:	cf 92       	push	r12
     17c:	df 92       	push	r13
     17e:	ef 92       	push	r14
     180:	ff 92       	push	r15
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	df 93       	push	r29
     188:	cf 93       	push	r28
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	62 97       	sbiw	r28, 0x12	; 18
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	f8 94       	cli
     194:	de bf       	out	0x3e, r29	; 62
     196:	0f be       	out	0x3f, r0	; 63
     198:	cd bf       	out	0x3d, r28	; 61
	
	//Initialize LCD module
	InitLCD();
     19a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <InitLCD>
	//Clear the screen
	LCDClear();
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	60 e0       	ldi	r22, 0x00	; 0
     1a2:	0e 94 ba 01 	call	0x374	; 0x374 <LCDByte>
	//Simple string printing
	LCDWriteString("T:");
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	91 e0       	ldi	r25, 0x01	; 1
     1aa:	0e 94 18 02 	call	0x430	; 0x430 <LCDWriteString>
	LCDWriteStringXY(0,1,"H:");	
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	61 e0       	ldi	r22, 0x01	; 1
     1b2:	0e 94 a6 02 	call	0x54c	; 0x54c <LCDGotoXY>
     1b6:	83 e0       	ldi	r24, 0x03	; 3
     1b8:	91 e0       	ldi	r25, 0x01	; 1
     1ba:	0e 94 18 02 	call	0x430	; 0x430 <LCDWriteString>
	LCDWriteStringXY(5,1,"L:");
     1be:	85 e0       	ldi	r24, 0x05	; 5
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	0e 94 a6 02 	call	0x54c	; 0x54c <LCDGotoXY>
     1c6:	86 e0       	ldi	r24, 0x06	; 6
     1c8:	91 e0       	ldi	r25, 0x01	; 1
     1ca:	0e 94 18 02 	call	0x430	; 0x430 <LCDWriteString>
	LCDWriteStringXY(5,0,"P:");
     1ce:	85 e0       	ldi	r24, 0x05	; 5
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	0e 94 a6 02 	call	0x54c	; 0x54c <LCDGotoXY>
     1d6:	89 e0       	ldi	r24, 0x09	; 9
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	0e 94 18 02 	call	0x430	; 0x430 <LCDWriteString>
	//Print some numbers
	
unsigned char num = 0x01;
int i; 
int speed_limit(); // calling the speed_limit function
DDRB |= 0xFF;
     1de:	84 b1       	in	r24, 0x04	; 4
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	84 b9       	out	0x04, r24	; 4
DDRA |= 0xFE; 
     1e4:	81 b1       	in	r24, 0x01	; 1
     1e6:	8e 6f       	ori	r24, 0xFE	; 254
     1e8:	81 b9       	out	0x01, r24	; 1

	long temperature = 0;
     1ea:	19 82       	std	Y+1, r1	; 0x01
     1ec:	1a 82       	std	Y+2, r1	; 0x02
     1ee:	1b 82       	std	Y+3, r1	; 0x03
     1f0:	1c 82       	std	Y+4, r1	; 0x04
	long pressure = 0;
     1f2:	1d 82       	std	Y+5, r1	; 0x05
     1f4:	1e 82       	std	Y+6, r1	; 0x06
     1f6:	1f 82       	std	Y+7, r1	; 0x07
     1f8:	18 86       	std	Y+8, r1	; 0x08
	long up = 0;

	//long altitude = 0;
	//double temp = 0;
	
	ioinit();
     1fa:	0e 94 00 06 	call	0xc00	; 0xc00 <ioinit>
	i2cInit();
     1fe:	0e 94 db 02 	call	0x5b6	; 0x5b6 <i2cInit>
	delay_ms(100);
     202:	84 e6       	ldi	r24, 0x64	; 100
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>
	
	BMP085_Calibration();
     20a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <BMP085_Calibration>

	uint16_t adc_result0; 
    char int_buffer[10];

    // initialize adc and lcd
    adc_init();
     20e:	0e 94 08 07 	call	0xe10	; 0xe10 <adc_init>

while (1) {
  D0=0;
  D1=0;
  bmp085Convert(&temperature, &pressure);
     212:	0f 2e       	mov	r0, r31
     214:	f5 e0       	ldi	r31, 0x05	; 5
     216:	4f 2e       	mov	r4, r31
     218:	55 24       	eor	r5, r5
     21a:	f0 2d       	mov	r31, r0
     21c:	4c 0e       	add	r4, r28
     21e:	5d 1e       	adc	r5, r29
     220:	3e 01       	movw	r6, r28
     222:	08 94       	sec
     224:	61 1c       	adc	r6, r1
     226:	71 1c       	adc	r7, r1
 for (i=0; i<50; i++) {
     228:	88 24       	eor	r8, r8
     22a:	99 24       	eor	r9, r9
 itoa(adc_result0, int_buffer, 10);
LCDWriteNumXY(2,0,temperature,3);
LCDWriteNumXY(9,0,pressure,6);
LCDWriteNumXY(2,1,22,2);
 LCDWriteStringXY(8,1,int_buffer);
  PORTB = SEVEN_SEG[num%10];
     22c:	0f 2e       	mov	r0, r31
     22e:	fa e0       	ldi	r31, 0x0A	; 10
     230:	ef 2e       	mov	r14, r31
     232:	f0 2d       	mov	r31, r0
     234:	0f 2e       	mov	r0, r31
     236:	fc e0       	ldi	r31, 0x0C	; 12
     238:	cf 2e       	mov	r12, r31
     23a:	f1 e0       	ldi	r31, 0x01	; 1
     23c:	df 2e       	mov	r13, r31
     23e:	f0 2d       	mov	r31, r0
 for (i=0; i<50; i++) {
  D0=0;
  D1=0;
  num = speed_limit();
adc_result0 = adc_read(0);      // read adc value at PA0
 itoa(adc_result0, int_buffer, 10);
     240:	0f 2e       	mov	r0, r31
     242:	f9 e0       	ldi	r31, 0x09	; 9
     244:	af 2e       	mov	r10, r31
     246:	bb 24       	eor	r11, r11
     248:	f0 2d       	mov	r31, r0
     24a:	ac 0e       	add	r10, r28
     24c:	bd 1e       	adc	r11, r29

    // initialize adc and lcd
    adc_init();

while (1) {
  D0=0;
     24e:	14 98       	cbi	0x02, 4	; 2
  D1=0;
     250:	15 98       	cbi	0x02, 5	; 2
  bmp085Convert(&temperature, &pressure);
     252:	c3 01       	movw	r24, r6
     254:	b2 01       	movw	r22, r4
     256:	0e 94 05 04 	call	0x80a	; 0x80a <bmp085Convert>
 for (i=0; i<50; i++) {
     25a:	84 01       	movw	r16, r8
  D0=0;
     25c:	14 98       	cbi	0x02, 4	; 2
  D1=0;
     25e:	15 98       	cbi	0x02, 5	; 2
  num = speed_limit();
     260:	0e 94 9e 00 	call	0x13c	; 0x13c <speed_limit>
     264:	f8 2e       	mov	r15, r24
adc_result0 = adc_read(0);      // read adc value at PA0
     266:	c4 01       	movw	r24, r8
     268:	0e 94 0f 07 	call	0xe1e	; 0xe1e <adc_read>
 itoa(adc_result0, int_buffer, 10);
     26c:	b5 01       	movw	r22, r10
     26e:	4a e0       	ldi	r20, 0x0A	; 10
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <itoa>
LCDWriteNumXY(2,0,temperature,3);
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	0e 94 a6 02 	call	0x54c	; 0x54c <LCDGotoXY>
     27e:	69 81       	ldd	r22, Y+1	; 0x01
     280:	7a 81       	ldd	r23, Y+2	; 0x02
     282:	8b 81       	ldd	r24, Y+3	; 0x03
     284:	9c 81       	ldd	r25, Y+4	; 0x04
     286:	43 e0       	ldi	r20, 0x03	; 3
     288:	50 e0       	ldi	r21, 0x00	; 0
     28a:	0e 94 28 02 	call	0x450	; 0x450 <LCDWriteNum>
LCDWriteNumXY(9,0,pressure,6);
     28e:	89 e0       	ldi	r24, 0x09	; 9
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	0e 94 a6 02 	call	0x54c	; 0x54c <LCDGotoXY>
     296:	6d 81       	ldd	r22, Y+5	; 0x05
     298:	7e 81       	ldd	r23, Y+6	; 0x06
     29a:	8f 81       	ldd	r24, Y+7	; 0x07
     29c:	98 85       	ldd	r25, Y+8	; 0x08
     29e:	46 e0       	ldi	r20, 0x06	; 6
     2a0:	50 e0       	ldi	r21, 0x00	; 0
     2a2:	0e 94 28 02 	call	0x450	; 0x450 <LCDWriteNum>
LCDWriteNumXY(2,1,22,2);
     2a6:	82 e0       	ldi	r24, 0x02	; 2
     2a8:	61 e0       	ldi	r22, 0x01	; 1
     2aa:	0e 94 a6 02 	call	0x54c	; 0x54c <LCDGotoXY>
     2ae:	86 e1       	ldi	r24, 0x16	; 22
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	62 e0       	ldi	r22, 0x02	; 2
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	0e 94 28 02 	call	0x450	; 0x450 <LCDWriteNum>
 LCDWriteStringXY(8,1,int_buffer);
     2ba:	88 e0       	ldi	r24, 0x08	; 8
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	0e 94 a6 02 	call	0x54c	; 0x54c <LCDGotoXY>
     2c2:	c5 01       	movw	r24, r10
     2c4:	0e 94 18 02 	call	0x430	; 0x430 <LCDWriteString>
  PORTB = SEVEN_SEG[num%10];
     2c8:	8f 2d       	mov	r24, r15
     2ca:	6e 2d       	mov	r22, r14
     2cc:	0e 94 98 0a 	call	0x1530	; 0x1530 <__udivmodqi4>
     2d0:	f6 01       	movw	r30, r12
     2d2:	e9 0f       	add	r30, r25
     2d4:	f1 1d       	adc	r31, r1
     2d6:	90 81       	ld	r25, Z
     2d8:	95 b9       	out	0x05, r25	; 5
  D0=1;
     2da:	14 9a       	sbi	0x02, 4	; 2
  D1=0;
     2dc:	15 98       	cbi	0x02, 5	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2de:	e1 ee       	ldi	r30, 0xE1	; 225
     2e0:	f4 e0       	ldi	r31, 0x04	; 4
     2e2:	31 97       	sbiw	r30, 0x01	; 1
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <main+0x178>
     2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0x17e>
     2e8:	00 00       	nop
  _delay_us(500);
  D0=0;
     2ea:	14 98       	cbi	0x02, 4	; 2
  D1=0;
     2ec:	15 98       	cbi	0x02, 5	; 2
  PORTB = SEVEN_SEG[num/10];
     2ee:	f6 01       	movw	r30, r12
     2f0:	e8 0f       	add	r30, r24
     2f2:	f1 1d       	adc	r31, r1
     2f4:	80 81       	ld	r24, Z
     2f6:	85 b9       	out	0x05, r24	; 5
  D0=0;
     2f8:	14 98       	cbi	0x02, 4	; 2
  D1=1;
     2fa:	15 9a       	sbi	0x02, 5	; 2
     2fc:	81 ee       	ldi	r24, 0xE1	; 225
     2fe:	94 e0       	ldi	r25, 0x04	; 4
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <main+0x196>
     304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x19c>
     306:	00 00       	nop

while (1) {
  D0=0;
  D1=0;
  bmp085Convert(&temperature, &pressure);
 for (i=0; i<50; i++) {
     308:	0f 5f       	subi	r16, 0xFF	; 255
     30a:	1f 4f       	sbci	r17, 0xFF	; 255
     30c:	02 33       	cpi	r16, 0x32	; 50
     30e:	11 05       	cpc	r17, r1
     310:	09 f0       	breq	.+2      	; 0x314 <main+0x1aa>
     312:	a4 cf       	rjmp	.-184    	; 0x25c <main+0xf2>
     314:	9c cf       	rjmp	.-200    	; 0x24e <main+0xe4>

00000316 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
     316:	87 b1       	in	r24, 0x07	; 7
     318:	8f 70       	andi	r24, 0x0F	; 15
     31a:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     31c:	5d 9a       	sbi	0x0b, 5	; 11
	CLEAR_RS();		//Read status
     31e:	5e 98       	cbi	0x0b, 6	; 11
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	8a 95       	dec	r24
     324:	f1 f7       	brne	.-4      	; 0x322 <LCDBusyLoop+0xc>
     326:	00 c0       	rjmp	.+0      	; 0x328 <LCDBusyLoop+0x12>

	
	do
	{

		SET_E();
     328:	5f 9a       	sbi	0x0b, 7	; 11
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	9a 95       	dec	r25
     32e:	f1 f7       	brne	.-4      	; 0x32c <LCDBusyLoop+0x16>
     330:	00 c0       	rjmp	.+0      	; 0x332 <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
     332:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     334:	80 7f       	andi	r24, 0xF0	; 240
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	9a 95       	dec	r25
     33a:	f1 f7       	brne	.-4      	; 0x338 <LCDBusyLoop+0x22>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <LCDBusyLoop+0x28>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
     33e:	5f 98       	cbi	0x0b, 7	; 11
     340:	95 e0       	ldi	r25, 0x05	; 5
     342:	9a 95       	dec	r25
     344:	f1 f7       	brne	.-4      	; 0x342 <LCDBusyLoop+0x2c>
     346:	00 00       	nop
		_delay_us(1);	//tEL

		SET_E();
     348:	5f 9a       	sbi	0x0b, 7	; 11
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	9a 95       	dec	r25
     34e:	f1 f7       	brne	.-4      	; 0x34c <LCDBusyLoop+0x36>
     350:	00 c0       	rjmp	.+0      	; 0x352 <LCDBusyLoop+0x3c>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
     352:	96 b1       	in	r25, 0x06	; 6
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	9a 95       	dec	r25
     358:	f1 f7       	brne	.-4      	; 0x356 <LCDBusyLoop+0x40>
     35a:	00 c0       	rjmp	.+0      	; 0x35c <LCDBusyLoop+0x46>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
     35c:	5f 98       	cbi	0x0b, 7	; 11
     35e:	95 e0       	ldi	r25, 0x05	; 5
     360:	9a 95       	dec	r25
     362:	f1 f7       	brne	.-4      	; 0x360 <LCDBusyLoop+0x4a>
     364:	00 00       	nop
		_delay_us(1);	//tEL
	}while(busy);
     366:	88 23       	and	r24, r24
     368:	fc f2       	brlt	.-66     	; 0x328 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
     36a:	5d 98       	cbi	0x0b, 5	; 11
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     36c:	87 b1       	in	r24, 0x07	; 7
     36e:	80 6f       	ori	r24, 0xF0	; 240
     370:	87 b9       	out	0x07, r24	; 7

}
     372:	08 95       	ret

00000374 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     374:	28 2f       	mov	r18, r24
     376:	22 95       	swap	r18
     378:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     37a:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     37c:	66 23       	and	r22, r22
     37e:	11 f4       	brne	.+4      	; 0x384 <LCDByte+0x10>
	CLEAR_RS();
     380:	5e 98       	cbi	0x0b, 6	; 11
     382:	01 c0       	rjmp	.+2      	; 0x386 <LCDByte+0x12>
else
	SET_RS();
     384:	5e 9a       	sbi	0x0b, 6	; 11
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	9a 95       	dec	r25
     38a:	f1 f7       	brne	.-4      	; 0x388 <LCDByte+0x14>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <LCDByte+0x1a>

_delay_us(0.500);		//tAS

SET_E();
     38e:	5f 9a       	sbi	0x0b, 7	; 11

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     390:	98 b1       	in	r25, 0x08	; 8
     392:	22 95       	swap	r18
     394:	20 7f       	andi	r18, 0xF0	; 240
     396:	9f 70       	andi	r25, 0x0F	; 15
     398:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     39a:	98 b9       	out	0x08, r25	; 8
     39c:	95 e0       	ldi	r25, 0x05	; 5
     39e:	9a 95       	dec	r25
     3a0:	f1 f7       	brne	.-4      	; 0x39e <LCDByte+0x2a>
     3a2:	00 00       	nop

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     3a4:	5f 98       	cbi	0x0b, 7	; 11
     3a6:	95 e0       	ldi	r25, 0x05	; 5
     3a8:	9a 95       	dec	r25
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCDByte+0x34>
     3ac:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     3ae:	5f 9a       	sbi	0x0b, 7	; 11

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     3b0:	98 b1       	in	r25, 0x08	; 8
     3b2:	82 95       	swap	r24
     3b4:	80 7f       	andi	r24, 0xF0	; 240
     3b6:	9f 70       	andi	r25, 0x0F	; 15
     3b8:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     3ba:	88 b9       	out	0x08, r24	; 8
     3bc:	85 e0       	ldi	r24, 0x05	; 5
     3be:	8a 95       	dec	r24
     3c0:	f1 f7       	brne	.-4      	; 0x3be <LCDByte+0x4a>
     3c2:	00 00       	nop

_delay_us(1);			//tEH

//SEND

CLEAR_E();
     3c4:	5f 98       	cbi	0x0b, 7	; 11
     3c6:	95 e0       	ldi	r25, 0x05	; 5
     3c8:	9a 95       	dec	r25
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <LCDByte+0x54>
     3cc:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     3ce:	0e 94 8b 01 	call	0x316	; 0x316 <LCDBusyLoop>
}
     3d2:	08 95       	ret

000003d4 <InitLCD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d4:	8f ef       	ldi	r24, 0xFF	; 255
     3d6:	96 e7       	ldi	r25, 0x76	; 118
     3d8:	a1 e0       	ldi	r26, 0x01	; 1
     3da:	81 50       	subi	r24, 0x01	; 1
     3dc:	90 40       	sbci	r25, 0x00	; 0
     3de:	a0 40       	sbci	r26, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <InitLCD+0x6>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <InitLCD+0x10>
     3e4:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     3e6:	87 b1       	in	r24, 0x07	; 7
     3e8:	80 6f       	ori	r24, 0xF0	; 240
     3ea:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     3ec:	57 9a       	sbi	0x0a, 7	; 10
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     3ee:	56 9a       	sbi	0x0a, 6	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     3f0:	55 9a       	sbi	0x0a, 5	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     3f2:	88 b1       	in	r24, 0x08	; 8
     3f4:	8f 70       	andi	r24, 0x0F	; 15
     3f6:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     3f8:	5f 98       	cbi	0x0b, 7	; 11
	CLEAR_RW();
     3fa:	5d 98       	cbi	0x0b, 5	; 11
	CLEAR_RS();
     3fc:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <InitLCD+0x2c>
     400:	00 c0       	rjmp	.+0      	; 0x402 <InitLCD+0x2e>
     402:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
     404:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     406:	45 9a       	sbi	0x08, 5	; 8
     408:	95 e0       	ldi	r25, 0x05	; 5
     40a:	9a 95       	dec	r25
     40c:	f1 f7       	brne	.-4      	; 0x40a <InitLCD+0x36>
     40e:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
     410:	5f 98       	cbi	0x0b, 7	; 11
     412:	a5 e0       	ldi	r26, 0x05	; 5
     414:	aa 95       	dec	r26
     416:	f1 f7       	brne	.-4      	; 0x414 <InitLCD+0x40>
     418:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     41a:	0e 94 8b 01 	call	0x316	; 0x316 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100);	//Display On
     41e:	8c e0       	ldi	r24, 0x0C	; 12
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	0e 94 ba 01 	call	0x374	; 0x374 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     426:	88 e2       	ldi	r24, 0x28	; 40
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	0e 94 ba 01 	call	0x374	; 0x374 <LCDByte>
}
     42e:	08 95       	ret

00000430 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     436:	88 81       	ld	r24, Y
     438:	88 23       	and	r24, r24
     43a:	39 f0       	breq	.+14     	; 0x44a <LCDWriteString+0x1a>
	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100);	//Display On
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void LCDWriteString(const char *msg)
     43c:	21 96       	adiw	r28, 0x01	; 1


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	0e 94 ba 01 	call	0x374	; 0x374 <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     444:	89 91       	ld	r24, Y+
     446:	88 23       	and	r24, r24
     448:	d1 f7       	brne	.-12     	; 0x43e <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <LCDWriteNum>:

void LCDWriteNum(long val,unsigned int field_length)
{
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	df 93       	push	r29
     462:	cf 93       	push	r28
     464:	00 d0       	rcall	.+0      	; 0x466 <LCDWriteNum+0x16>
     466:	00 d0       	rcall	.+0      	; 0x468 <LCDWriteNum+0x18>
     468:	00 d0       	rcall	.+0      	; 0x46a <LCDWriteNum+0x1a>
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	5a 01       	movw	r10, r20
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[6]={0,0,0,0,0,0};
     470:	fe 01       	movw	r30, r28
     472:	31 96       	adiw	r30, 0x01	; 1
     474:	26 e0       	ldi	r18, 0x06	; 6
     476:	df 01       	movw	r26, r30
     478:	1d 92       	st	X+, r1
     47a:	2a 95       	dec	r18
     47c:	e9 f7       	brne	.-6      	; 0x478 <LCDWriteNum+0x28>
	int i=5,j=0;
	while(val)
     47e:	61 15       	cp	r22, r1
     480:	71 05       	cpc	r23, r1
     482:	81 05       	cpc	r24, r1
     484:	91 05       	cpc	r25, r1
     486:	e9 f0       	breq	.+58     	; 0x4c2 <LCDWriteNum+0x72>
     488:	8e 01       	movw	r16, r28
     48a:	09 5f       	subi	r16, 0xF9	; 249
     48c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
	str[i]=val%10;
     48e:	0f 2e       	mov	r0, r31
     490:	fa e0       	ldi	r31, 0x0A	; 10
     492:	cf 2e       	mov	r12, r31
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	df 2e       	mov	r13, r31
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	ef 2e       	mov	r14, r31
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	ff 2e       	mov	r15, r31
     4a0:	f0 2d       	mov	r31, r0
     4a2:	a7 01       	movw	r20, r14
     4a4:	96 01       	movw	r18, r12
     4a6:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__divmodsi4>
     4aa:	f8 01       	movw	r30, r16
     4ac:	62 93       	st	-Z, r22
     4ae:	8f 01       	movw	r16, r30
	val=val/10;
     4b0:	62 2f       	mov	r22, r18
     4b2:	73 2f       	mov	r23, r19
     4b4:	84 2f       	mov	r24, r20
     4b6:	95 2f       	mov	r25, r21

	****************************************************************/

	char str[6]={0,0,0,0,0,0};
	int i=5,j=0;
	while(val)
     4b8:	61 15       	cp	r22, r1
     4ba:	71 05       	cpc	r23, r1
     4bc:	81 05       	cpc	r24, r1
     4be:	91 05       	cpc	r25, r1
     4c0:	81 f7       	brne	.-32     	; 0x4a2 <LCDWriteNum+0x52>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     4c2:	ff ef       	ldi	r31, 0xFF	; 255
     4c4:	af 16       	cp	r10, r31
     4c6:	ff ef       	ldi	r31, 0xFF	; 255
     4c8:	bf 06       	cpc	r11, r31
     4ca:	69 f4       	brne	.+26     	; 0x4e6 <LCDWriteNum+0x96>
		while(str[j]==0) j++;
     4cc:	29 81       	ldd	r18, Y+1	; 0x01
     4ce:	22 23       	and	r18, r18
     4d0:	79 f4       	brne	.+30     	; 0x4f0 <LCDWriteNum+0xa0>
     4d2:	fe 01       	movw	r30, r28
     4d4:	32 96       	adiw	r30, 0x02	; 2
     4d6:	00 e0       	ldi	r16, 0x00	; 0
     4d8:	10 e0       	ldi	r17, 0x00	; 0
     4da:	0f 5f       	subi	r16, 0xFF	; 255
     4dc:	1f 4f       	sbci	r17, 0xFF	; 255
     4de:	21 91       	ld	r18, Z+
     4e0:	22 23       	and	r18, r18
     4e2:	d9 f3       	breq	.-10     	; 0x4da <LCDWriteNum+0x8a>
     4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <LCDWriteNum+0xa4>
	else
		j=6-field_length;
     4e6:	06 e0       	ldi	r16, 0x06	; 6
     4e8:	10 e0       	ldi	r17, 0x00	; 0
     4ea:	0a 19       	sub	r16, r10
     4ec:	1b 09       	sbc	r17, r11
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <LCDWriteNum+0xa4>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     4f0:	00 e0       	ldi	r16, 0x00	; 0
     4f2:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=6-field_length;

	if(val<0) LCDData('-');
     4f4:	99 23       	and	r25, r25
     4f6:	24 f4       	brge	.+8      	; 0x500 <LCDWriteNum+0xb0>
     4f8:	8d e2       	ldi	r24, 0x2D	; 45
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	0e 94 ba 01 	call	0x374	; 0x374 <LCDByte>
	for(i=j;i<6;i++)
     500:	06 30       	cpi	r16, 0x06	; 6
     502:	11 05       	cpc	r17, r1
     504:	94 f4       	brge	.+36     	; 0x52a <LCDWriteNum+0xda>
	LCDData(*msg);
	msg++;
 }
}

void LCDWriteNum(long val,unsigned int field_length)
     506:	7e 01       	movw	r14, r28
     508:	08 94       	sec
     50a:	e1 1c       	adc	r14, r1
     50c:	f1 1c       	adc	r15, r1
     50e:	e0 0e       	add	r14, r16
     510:	f1 1e       	adc	r15, r17
		j=6-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<6;i++)
	{
	LCDData(48+str[i]);
     512:	d7 01       	movw	r26, r14
     514:	8d 91       	ld	r24, X+
     516:	7d 01       	movw	r14, r26
     518:	80 5d       	subi	r24, 0xD0	; 208
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	0e 94 ba 01 	call	0x374	; 0x374 <LCDByte>
		while(str[j]==0) j++;
	else
		j=6-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<6;i++)
     520:	0f 5f       	subi	r16, 0xFF	; 255
     522:	1f 4f       	sbci	r17, 0xFF	; 255
     524:	06 30       	cpi	r16, 0x06	; 6
     526:	11 05       	cpc	r17, r1
     528:	a4 f3       	brlt	.-24     	; 0x512 <LCDWriteNum+0xc2>
	{
	LCDData(48+str[i]);
	}
}
     52a:	26 96       	adiw	r28, 0x06	; 6
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	cf 91       	pop	r28
     538:	df 91       	pop	r29
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	df 90       	pop	r13
     544:	cf 90       	pop	r12
     546:	bf 90       	pop	r11
     548:	af 90       	pop	r10
     54a:	08 95       	ret

0000054c <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     54c:	88 32       	cpi	r24, 0x28	; 40
     54e:	30 f4       	brcc	.+12     	; 0x55c <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
     550:	61 11       	cpse	r22, r1
     552:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     554:	80 68       	ori	r24, 0x80	; 128
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	0e 94 ba 01 	call	0x374	; 0x374 <LCDByte>
     55c:	08 95       	ret

0000055e <uart_putchar>:
	
	stdout = &mystdout; //Required for printf init
}

static int uart_putchar(char c, FILE *stream)
{
     55e:	1f 93       	push	r17
     560:	18 2f       	mov	r17, r24
    if (c == '\n') uart_putchar('\r', stream);
     562:	8a 30       	cpi	r24, 0x0A	; 10
     564:	19 f4       	brne	.+6      	; 0x56c <uart_putchar+0xe>
     566:	8d e0       	ldi	r24, 0x0D	; 13
     568:	0e 94 af 02 	call	0x55e	; 0x55e <uart_putchar>
  
    loop_until_bit_is_set(UCSR0A, UDRE0);
     56c:	e0 ec       	ldi	r30, 0xC0	; 192
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	80 81       	ld	r24, Z
     572:	85 ff       	sbrs	r24, 5
     574:	fd cf       	rjmp	.-6      	; 0x570 <uart_putchar+0x12>
    UDR0 = c;
     576:	10 93 c6 00 	sts	0x00C6, r17
    
    return 0;
}
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	1f 91       	pop	r17
     580:	08 95       	ret

00000582 <i2cSetBitrate>:
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);	// Enable TWI
}

void i2cSetBitrate(unsigned short bitrateKHz)
{
     582:	bc 01       	movw	r22, r24
	unsigned char bitrate_div;
	// set i2c bitrate
	// SCL freq = F_CPU/(16+2*TWBR))
	cbi(TWSR, TWPS0);
     584:	e9 eb       	ldi	r30, 0xB9	; 185
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	8e 7f       	andi	r24, 0xFE	; 254
     58c:	80 83       	st	Z, r24
	cbi(TWSR, TWPS1);
     58e:	80 81       	ld	r24, Z
     590:	8d 7f       	andi	r24, 0xFD	; 253
     592:	80 83       	st	Z, r24
	
	//calculate bitrate division	
	bitrate_div = ((F_CPU/4000l)/bitrateKHz);
     594:	80 ea       	ldi	r24, 0xA0	; 160
     596:	9f e0       	ldi	r25, 0x0F	; 15
     598:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__udivmodhi4>
	if(bitrate_div >= 16)
     59c:	60 31       	cpi	r22, 0x10	; 16
     59e:	40 f0       	brcs	.+16     	; 0x5b0 <i2cSetBitrate+0x2e>
		bitrate_div = (bitrate_div-16)/2;
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	60 51       	subi	r22, 0x10	; 16
     5a4:	70 40       	sbci	r23, 0x00	; 0
     5a6:	12 f4       	brpl	.+4      	; 0x5ac <i2cSetBitrate+0x2a>
     5a8:	6f 5f       	subi	r22, 0xFF	; 255
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	75 95       	asr	r23
     5ae:	67 95       	ror	r22
	outb(TWBR, bitrate_div);
     5b0:	60 93 b8 00 	sts	0x00B8, r22
}
     5b4:	08 95       	ret

000005b6 <i2cInit>:
 *********************/

void i2cInit(void)
{
	// set i2c bit rate to 40KHz
	i2cSetBitrate(100);
     5b6:	84 e6       	ldi	r24, 0x64	; 100
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 c1 02 	call	0x582	; 0x582 <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);	// Enable TWI
     5be:	ec eb       	ldi	r30, 0xBC	; 188
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	80 81       	ld	r24, Z
     5c4:	84 60       	ori	r24, 0x04	; 4
     5c6:	80 83       	st	Z, r24
}
     5c8:	08 95       	ret

000005ca <i2cSendStart>:
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     5ca:	39 9a       	sbi	0x07, 1	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     5cc:	84 ea       	ldi	r24, 0xA4	; 164
     5ce:	80 93 bc 00 	sts	0x00BC, r24
}
     5d2:	08 95       	ret

000005d4 <i2cSendStop>:

void i2cSendStop(void)
{
	// transmit stop condition
        TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     5d4:	84 e9       	ldi	r24, 0x94	; 148
     5d6:	80 93 bc 00 	sts	0x00BC, r24
}
     5da:	08 95       	ret

000005dc <i2cWaitForComplete>:
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     5dc:	80 91 bc 00 	lds	r24, 0x00BC
     5e0:	88 23       	and	r24, r24
     5e2:	9c f0       	brlt	.+38     	; 0x60a <i2cWaitForComplete+0x2e>
        TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
}

void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	90 e0       	ldi	r25, 0x00	; 0
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     5e8:	ec eb       	ldi	r30, 0xBC	; 188
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
		i++;
     5ec:	01 96       	adiw	r24, 0x01	; 1
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     5ee:	20 81       	ld	r18, Z
     5f0:	22 23       	and	r18, r18
     5f2:	24 f0       	brlt	.+8      	; 0x5fc <i2cWaitForComplete+0x20>
     5f4:	8a 35       	cpi	r24, 0x5A	; 90
     5f6:	91 05       	cpc	r25, r1
     5f8:	c9 f7       	brne	.-14     	; 0x5ec <i2cWaitForComplete+0x10>
     5fa:	03 c0       	rjmp	.+6      	; 0x602 <i2cWaitForComplete+0x26>
		i++;
	if (i>88)
     5fc:	89 35       	cpi	r24, 0x59	; 89
     5fe:	91 05       	cpc	r25, r1
     600:	24 f0       	brlt	.+8      	; 0x60a <i2cWaitForComplete+0x2e>
		printf("complete timed out\n");
     602:	8c e1       	ldi	r24, 0x1C	; 28
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	0e 94 16 0b 	call	0x162c	; 0x162c <puts>
     60a:	08 95       	ret

0000060c <i2cReceiveByte>:
}

void i2cReceiveByte(unsigned char ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
     60c:	88 23       	and	r24, r24
     60e:	39 f0       	breq	.+14     	; 0x61e <i2cReceiveByte+0x12>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
     610:	ec eb       	ldi	r30, 0xBC	; 188
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	8f 70       	andi	r24, 0x0F	; 15
     618:	80 6c       	ori	r24, 0xC0	; 192
     61a:	80 83       	st	Z, r24
     61c:	08 95       	ret
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
     61e:	ec eb       	ldi	r30, 0xBC	; 188
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	8f 70       	andi	r24, 0x0F	; 15
     626:	80 68       	ori	r24, 0x80	; 128
     628:	80 83       	st	Z, r24
     62a:	08 95       	ret

0000062c <i2cGetReceivedByte>:
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     62c:	80 91 bb 00 	lds	r24, 0x00BB
}
     630:	08 95       	ret

00000632 <i2cGetStatus>:

unsigned char i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
     632:	80 91 b9 00 	lds	r24, 0x00B9
}
     636:	08 95       	ret

00000638 <delay_ms>:

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     638:	00 97       	sbiw	r24, 0x00	; 0
     63a:	59 f4       	brne	.+22     	; 0x652 <delay_ms+0x1a>
     63c:	08 95       	ret
	...
    for ( y = 0 ; y < 90 ; y++){
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
     64a:	21 50       	subi	r18, 0x01	; 1

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    for ( y = 0 ; y < 90 ; y++){
     64c:	c1 f7       	brne	.-16     	; 0x63e <delay_ms+0x6>
}

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     64e:	01 97       	sbiw	r24, 0x01	; 1
     650:	11 f0       	breq	.+4      	; 0x656 <delay_ms+0x1e>
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
}

void delay_ms(uint16_t x)
{
     652:	2a e5       	ldi	r18, 0x5A	; 90
     654:	f4 cf       	rjmp	.-24     	; 0x63e <delay_ms+0x6>
     656:	08 95       	ret

00000658 <i2cSendByte>:
	if (i>88)
		printf("complete timed out\n");
}

void i2cSendByte(unsigned char data)
{
     658:	1f 93       	push	r17
     65a:	18 2f       	mov	r17, r24
	delay_ms(1);
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>
	//printf("sending 0x%x\n", data);
	WRITE_sda();
     664:	39 9a       	sbi	0x07, 1	; 7
	// save data to the TWDR
	TWDR = data;
     666:	10 93 bb 00 	sts	0x00BB, r17
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     66a:	84 e8       	ldi	r24, 0x84	; 132
     66c:	80 93 bc 00 	sts	0x00BC, r24
}
     670:	1f 91       	pop	r17
     672:	08 95       	ret

00000674 <bmp085ReadShort>:
// bmp085ReadShort will read two sequential 8-bit registers, and return a 16-bit value
// the MSB register is read first
// Input: First register to read
// Output: 16-bit value of (first register value << 8) | (sequential register value)
short bmp085ReadShort(unsigned char address)
{
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	18 2f       	mov	r17, r24
	uint16_t msb, lsb;
	short data;
	
	i2cSendStart();
     67a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2cSendStart>
	i2cWaitForComplete();
     67e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	
	i2cSendByte(BMP085_W);	// write 0xEE
     682:	8e ee       	ldi	r24, 0xEE	; 238
     684:	0e 94 2c 03 	call	0x658	; 0x658 <i2cSendByte>
	i2cWaitForComplete();
     688:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	
	i2cSendByte(address);	// write register address
     68c:	81 2f       	mov	r24, r17
     68e:	0e 94 2c 03 	call	0x658	; 0x658 <i2cSendByte>
	i2cWaitForComplete();
     692:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	
	i2cSendStart();
     696:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2cSendStart>
	
	i2cSendByte(BMP085_R);	// write 0xEF
     69a:	8f ee       	ldi	r24, 0xEF	; 239
     69c:	0e 94 2c 03 	call	0x658	; 0x658 <i2cSendByte>
	i2cWaitForComplete();
     6a0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	
	i2cReceiveByte(TRUE);
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	0e 94 06 03 	call	0x60c	; 0x60c <i2cReceiveByte>
	i2cWaitForComplete();
     6aa:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	msb = i2cGetReceivedByte();	// Get MSB result
     6ae:	0e 94 16 03 	call	0x62c	; 0x62c <i2cGetReceivedByte>
     6b2:	08 2f       	mov	r16, r24
	i2cWaitForComplete();
     6b4:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	
	i2cReceiveByte(FALSE);
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	0e 94 06 03 	call	0x60c	; 0x60c <i2cReceiveByte>
	i2cWaitForComplete();
     6be:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	lsb = i2cGetReceivedByte();	// Get LSB result
     6c2:	0e 94 16 03 	call	0x62c	; 0x62c <i2cGetReceivedByte>
     6c6:	18 2f       	mov	r17, r24
	i2cWaitForComplete();
     6c8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	
	//i2cSendStop();
	
	data = msb << 8;
     6cc:	50 2f       	mov	r21, r16
     6ce:	40 e0       	ldi	r20, 0x00	; 0
	msb = i2cGetReceivedByte();	// Get MSB result
	i2cWaitForComplete();
	
	i2cReceiveByte(FALSE);
	i2cWaitForComplete();
	lsb = i2cGetReceivedByte();	// Get LSB result
     6d0:	21 2f       	mov	r18, r17
     6d2:	30 e0       	ldi	r19, 0x00	; 0
	i2cWaitForComplete();
	
	//i2cSendStop();
	
	data = msb << 8;
	data |= lsb;
     6d4:	24 2b       	or	r18, r20
     6d6:	35 2b       	or	r19, r21
	
	return data;
}
     6d8:	82 2f       	mov	r24, r18
     6da:	93 2f       	mov	r25, r19
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	08 95       	ret

000006e2 <BMP085_Calibration>:
short md;

void BMP085_Calibration(void)
{

	ac1 = bmp085ReadShort(0xAA);
     6e2:	8a ea       	ldi	r24, 0xAA	; 170
     6e4:	0e 94 3a 03 	call	0x674	; 0x674 <bmp085ReadShort>
     6e8:	90 93 43 01 	sts	0x0143, r25
     6ec:	80 93 42 01 	sts	0x0142, r24
	ac2 = bmp085ReadShort(0xAC);
     6f0:	8c ea       	ldi	r24, 0xAC	; 172
     6f2:	0e 94 3a 03 	call	0x674	; 0x674 <bmp085ReadShort>
     6f6:	90 93 4b 01 	sts	0x014B, r25
     6fa:	80 93 4a 01 	sts	0x014A, r24
	ac3 = bmp085ReadShort(0xAE);
     6fe:	8e ea       	ldi	r24, 0xAE	; 174
     700:	0e 94 3a 03 	call	0x674	; 0x674 <bmp085ReadShort>
     704:	90 93 53 01 	sts	0x0153, r25
     708:	80 93 52 01 	sts	0x0152, r24
	ac4 = bmp085ReadShort(0xB0);
     70c:	80 eb       	ldi	r24, 0xB0	; 176
     70e:	0e 94 3a 03 	call	0x674	; 0x674 <bmp085ReadShort>
     712:	90 93 4f 01 	sts	0x014F, r25
     716:	80 93 4e 01 	sts	0x014E, r24
	ac5 = bmp085ReadShort(0xB2);
     71a:	82 eb       	ldi	r24, 0xB2	; 178
     71c:	0e 94 3a 03 	call	0x674	; 0x674 <bmp085ReadShort>
     720:	90 93 49 01 	sts	0x0149, r25
     724:	80 93 48 01 	sts	0x0148, r24
	ac6 = bmp085ReadShort(0xB4);
     728:	84 eb       	ldi	r24, 0xB4	; 180
     72a:	0e 94 3a 03 	call	0x674	; 0x674 <bmp085ReadShort>
     72e:	90 93 47 01 	sts	0x0147, r25
     732:	80 93 46 01 	sts	0x0146, r24
	b1 = bmp085ReadShort(0xB6);
     736:	86 eb       	ldi	r24, 0xB6	; 182
     738:	0e 94 3a 03 	call	0x674	; 0x674 <bmp085ReadShort>
     73c:	90 93 45 01 	sts	0x0145, r25
     740:	80 93 44 01 	sts	0x0144, r24
	b2 = bmp085ReadShort(0xB8);
     744:	88 eb       	ldi	r24, 0xB8	; 184
     746:	0e 94 3a 03 	call	0x674	; 0x674 <bmp085ReadShort>
     74a:	90 93 3f 01 	sts	0x013F, r25
     74e:	80 93 3e 01 	sts	0x013E, r24
	mb = bmp085ReadShort(0xBA);
     752:	8a eb       	ldi	r24, 0xBA	; 186
     754:	0e 94 3a 03 	call	0x674	; 0x674 <bmp085ReadShort>
     758:	90 93 41 01 	sts	0x0141, r25
     75c:	80 93 40 01 	sts	0x0140, r24
	mc = bmp085ReadShort(0xBC);
     760:	8c eb       	ldi	r24, 0xBC	; 188
     762:	0e 94 3a 03 	call	0x674	; 0x674 <bmp085ReadShort>
     766:	90 93 51 01 	sts	0x0151, r25
     76a:	80 93 50 01 	sts	0x0150, r24
	md = bmp085ReadShort(0xBE);
     76e:	8e eb       	ldi	r24, 0xBE	; 190
     770:	0e 94 3a 03 	call	0x674	; 0x674 <bmp085ReadShort>
     774:	90 93 4d 01 	sts	0x014D, r25
     778:	80 93 4c 01 	sts	0x014C, r24
	
}
     77c:	08 95       	ret

0000077e <bmp085ReadTemp>:
}

long bmp085ReadTemp(void)
{
	long temperature = 0;
	i2cSendStart();
     77e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2cSendStart>
	i2cWaitForComplete();
     782:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	
	i2cSendByte(BMP085_W);	// write 0xEE
     786:	8e ee       	ldi	r24, 0xEE	; 238
     788:	0e 94 2c 03 	call	0x658	; 0x658 <i2cSendByte>
	i2cWaitForComplete();
     78c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	
	i2cSendByte(0xF4);	// write register address for Temp
     790:	84 ef       	ldi	r24, 0xF4	; 244
     792:	0e 94 2c 03 	call	0x658	; 0x658 <i2cSendByte>
	i2cWaitForComplete();
     796:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	
	i2cSendByte(0x2E);	// write register data for temp
     79a:	8e e2       	ldi	r24, 0x2E	; 46
     79c:	0e 94 2c 03 	call	0x658	; 0x658 <i2cSendByte>
	i2cWaitForComplete();
     7a0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	
	//i2cSendStop();
	
	delay_ms(10);	// max time is 4.5ms
     7a4:	8a e0       	ldi	r24, 0x0A	; 10
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>
	
	temperature = bmp085ReadShort(0xF6);
     7ac:	86 ef       	ldi	r24, 0xF6	; 246
     7ae:	0e 94 3a 03 	call	0x674	; 0x674 <bmp085ReadShort>
	temperature &= 0x0000FFFF;
     7b2:	9c 01       	movw	r18, r24
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	50 e0       	ldi	r21, 0x00	; 0
	
	return temperature;
}
     7b8:	68 2f       	mov	r22, r24
     7ba:	73 2f       	mov	r23, r19
     7bc:	84 2f       	mov	r24, r20
     7be:	95 2f       	mov	r25, r21
     7c0:	08 95       	ret

000007c2 <bmp085ReadPressure>:

long bmp085ReadPressure(void)
{
	long pressure = 0;
	
	i2cSendStart();
     7c2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2cSendStart>
	i2cWaitForComplete();
     7c6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	
	i2cSendByte(BMP085_W);	// write 0xEE
     7ca:	8e ee       	ldi	r24, 0xEE	; 238
     7cc:	0e 94 2c 03 	call	0x658	; 0x658 <i2cSendByte>
	i2cWaitForComplete();
     7d0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	
	i2cSendByte(0xF4);	// write register address for pressure
     7d4:	84 ef       	ldi	r24, 0xF4	; 244
     7d6:	0e 94 2c 03 	call	0x658	; 0x658 <i2cSendByte>
	i2cWaitForComplete();
     7da:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	
	i2cSendByte(0x34);	// write register data for pressure
     7de:	84 e3       	ldi	r24, 0x34	; 52
     7e0:	0e 94 2c 03 	call	0x658	; 0x658 <i2cSendByte>
	i2cWaitForComplete();
     7e4:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2cWaitForComplete>
	
	i2cSendStop();
     7e8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <i2cSendStop>
	
	delay_ms(10);	// max time is 4.5ms
     7ec:	8a e0       	ldi	r24, 0x0A	; 10
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 1c 03 	call	0x638	; 0x638 <delay_ms>
	
	pressure = bmp085ReadShort(0xF6);
     7f4:	86 ef       	ldi	r24, 0xF6	; 246
     7f6:	0e 94 3a 03 	call	0x674	; 0x674 <bmp085ReadShort>
	pressure &= 0x0000FFFF;
     7fa:	9c 01       	movw	r18, r24
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	50 e0       	ldi	r21, 0x00	; 0
	
	return pressure;
	
	//return (long) bmp085ReadShort(0xF6);
}
     800:	68 2f       	mov	r22, r24
     802:	73 2f       	mov	r23, r19
     804:	84 2f       	mov	r24, r20
     806:	95 2f       	mov	r25, r21
     808:	08 95       	ret

0000080a <bmp085Convert>:

void bmp085Convert(long* temperature, long* pressure)
{
     80a:	2f 92       	push	r2
     80c:	3f 92       	push	r3
     80e:	4f 92       	push	r4
     810:	5f 92       	push	r5
     812:	6f 92       	push	r6
     814:	7f 92       	push	r7
     816:	8f 92       	push	r8
     818:	9f 92       	push	r9
     81a:	af 92       	push	r10
     81c:	bf 92       	push	r11
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	df 93       	push	r29
     82c:	cf 93       	push	r28
     82e:	00 d0       	rcall	.+0      	; 0x830 <bmp085Convert+0x26>
     830:	00 d0       	rcall	.+0      	; 0x832 <bmp085Convert+0x28>
     832:	00 d0       	rcall	.+0      	; 0x834 <bmp085Convert+0x2a>
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	5c 01       	movw	r10, r24
     83a:	7e 83       	std	Y+6, r23	; 0x06
     83c:	6d 83       	std	Y+5, r22	; 0x05
	long altitude;
	long tpressure;
	long x1, x2, b5, b6, x3, b3, p;
	unsigned long b4, b7;
	
	ut = bmp085ReadTemp();
     83e:	0e 94 bf 03 	call	0x77e	; 0x77e <bmp085ReadTemp>
	ut = bmp085ReadTemp();
     842:	0e 94 bf 03 	call	0x77e	; 0x77e <bmp085ReadTemp>
     846:	7b 01       	movw	r14, r22
     848:	8c 01       	movw	r16, r24
	up = bmp085ReadPressure();
     84a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <bmp085ReadPressure>
	up = bmp085ReadPressure();
     84e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <bmp085ReadPressure>
     852:	69 83       	std	Y+1, r22	; 0x01
     854:	7a 83       	std	Y+2, r23	; 0x02
     856:	8b 83       	std	Y+3, r24	; 0x03
     858:	9c 83       	std	Y+4, r25	; 0x04
	
	x1 = ((long)ut - ac6) * ac5 >> 15;
     85a:	80 91 46 01 	lds	r24, 0x0146
     85e:	90 91 47 01 	lds	r25, 0x0147
     862:	a0 e0       	ldi	r26, 0x00	; 0
     864:	b0 e0       	ldi	r27, 0x00	; 0
     866:	a8 01       	movw	r20, r16
     868:	97 01       	movw	r18, r14
     86a:	28 1b       	sub	r18, r24
     86c:	39 0b       	sbc	r19, r25
     86e:	4a 0b       	sbc	r20, r26
     870:	5b 0b       	sbc	r21, r27
     872:	ca 01       	movw	r24, r20
     874:	b9 01       	movw	r22, r18
     876:	20 91 48 01 	lds	r18, 0x0148
     87a:	30 91 49 01 	lds	r19, 0x0149
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsi3>
     886:	7b 01       	movw	r14, r22
     888:	8c 01       	movw	r16, r24
     88a:	0d 2e       	mov	r0, r29
     88c:	df e0       	ldi	r29, 0x0F	; 15
     88e:	15 95       	asr	r17
     890:	07 95       	ror	r16
     892:	f7 94       	ror	r15
     894:	e7 94       	ror	r14
     896:	da 95       	dec	r29
     898:	d1 f7       	brne	.-12     	; 0x88e <bmp085Convert+0x84>
     89a:	d0 2d       	mov	r29, r0
	x2 = ((long) mc << 11) / (x1 + md);
     89c:	60 91 50 01 	lds	r22, 0x0150
     8a0:	70 91 51 01 	lds	r23, 0x0151
     8a4:	88 27       	eor	r24, r24
     8a6:	77 fd       	sbrc	r23, 7
     8a8:	80 95       	com	r24
     8aa:	98 2f       	mov	r25, r24
     8ac:	05 2e       	mov	r0, r21
     8ae:	5b e0       	ldi	r21, 0x0B	; 11
     8b0:	66 0f       	add	r22, r22
     8b2:	77 1f       	adc	r23, r23
     8b4:	88 1f       	adc	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	5a 95       	dec	r21
     8ba:	d1 f7       	brne	.-12     	; 0x8b0 <bmp085Convert+0xa6>
     8bc:	50 2d       	mov	r21, r0
     8be:	20 91 4c 01 	lds	r18, 0x014C
     8c2:	30 91 4d 01 	lds	r19, 0x014D
     8c6:	44 27       	eor	r20, r20
     8c8:	37 fd       	sbrc	r19, 7
     8ca:	40 95       	com	r20
     8cc:	54 2f       	mov	r21, r20
     8ce:	2e 0d       	add	r18, r14
     8d0:	3f 1d       	adc	r19, r15
     8d2:	40 1f       	adc	r20, r16
     8d4:	51 1f       	adc	r21, r17
     8d6:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__divmodsi4>
	b5 = x1 + x2;
     8da:	2e 0d       	add	r18, r14
     8dc:	3f 1d       	adc	r19, r15
     8de:	40 1f       	adc	r20, r16
     8e0:	51 1f       	adc	r21, r17
	*temperature = (b5 + 8) >> 4;
     8e2:	da 01       	movw	r26, r20
     8e4:	c9 01       	movw	r24, r18
     8e6:	08 96       	adiw	r24, 0x08	; 8
     8e8:	a1 1d       	adc	r26, r1
     8ea:	b1 1d       	adc	r27, r1
     8ec:	68 94       	set
     8ee:	13 f8       	bld	r1, 3
     8f0:	b5 95       	asr	r27
     8f2:	a7 95       	ror	r26
     8f4:	97 95       	ror	r25
     8f6:	87 95       	ror	r24
     8f8:	16 94       	lsr	r1
     8fa:	d1 f7       	brne	.-12     	; 0x8f0 <bmp085Convert+0xe6>
     8fc:	f5 01       	movw	r30, r10
     8fe:	80 83       	st	Z, r24
     900:	91 83       	std	Z+1, r25	; 0x01
     902:	a2 83       	std	Z+2, r26	; 0x02
     904:	b3 83       	std	Z+3, r27	; 0x03
	
	b6 = b5 - 4000;
     906:	0f 2e       	mov	r0, r31
     908:	f0 e6       	ldi	r31, 0x60	; 96
     90a:	ef 2e       	mov	r14, r31
     90c:	f0 ef       	ldi	r31, 0xF0	; 240
     90e:	ff 2e       	mov	r15, r31
     910:	ff ef       	ldi	r31, 0xFF	; 255
     912:	0f 2f       	mov	r16, r31
     914:	ff ef       	ldi	r31, 0xFF	; 255
     916:	1f 2f       	mov	r17, r31
     918:	f0 2d       	mov	r31, r0
     91a:	e2 0e       	add	r14, r18
     91c:	f3 1e       	adc	r15, r19
     91e:	04 1f       	adc	r16, r20
     920:	15 1f       	adc	r17, r21
	x1 = (b2 * (b6 * b6 >> 12)) >> 11;
     922:	c8 01       	movw	r24, r16
     924:	b7 01       	movw	r22, r14
     926:	a8 01       	movw	r20, r16
     928:	97 01       	movw	r18, r14
     92a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsi3>
     92e:	3b 01       	movw	r6, r22
     930:	4c 01       	movw	r8, r24
     932:	05 2e       	mov	r0, r21
     934:	5c e0       	ldi	r21, 0x0C	; 12
     936:	95 94       	asr	r9
     938:	87 94       	ror	r8
     93a:	77 94       	ror	r7
     93c:	67 94       	ror	r6
     93e:	5a 95       	dec	r21
     940:	d1 f7       	brne	.-12     	; 0x936 <bmp085Convert+0x12c>
     942:	50 2d       	mov	r21, r0
	x2 = ac2 * b6 >> 11;
	x3 = x1 + x2;
	b3 = (((int32_t) ac1 * 4 + x3) + 2)/4;
	x1 = ac3 * b6 >> 13;
     944:	20 91 52 01 	lds	r18, 0x0152
     948:	30 91 53 01 	lds	r19, 0x0153
     94c:	44 27       	eor	r20, r20
     94e:	37 fd       	sbrc	r19, 7
     950:	40 95       	com	r20
     952:	54 2f       	mov	r21, r20
     954:	c8 01       	movw	r24, r16
     956:	b7 01       	movw	r22, r14
     958:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsi3>
     95c:	05 2e       	mov	r0, r21
     95e:	5d e0       	ldi	r21, 0x0D	; 13
     960:	95 95       	asr	r25
     962:	87 95       	ror	r24
     964:	77 95       	ror	r23
     966:	67 95       	ror	r22
     968:	5a 95       	dec	r21
     96a:	d1 f7       	brne	.-12     	; 0x960 <bmp085Convert+0x156>
     96c:	50 2d       	mov	r21, r0
	x2 = (b1 * (b6 * b6 >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
     96e:	aa 24       	eor	r10, r10
     970:	bb 24       	eor	r11, r11
     972:	65 01       	movw	r12, r10
     974:	68 94       	set
     976:	a1 f8       	bld	r10, 1
     978:	a6 0e       	add	r10, r22
     97a:	b7 1e       	adc	r11, r23
     97c:	c8 1e       	adc	r12, r24
     97e:	d9 1e       	adc	r13, r25
	x1 = (b2 * (b6 * b6 >> 12)) >> 11;
	x2 = ac2 * b6 >> 11;
	x3 = x1 + x2;
	b3 = (((int32_t) ac1 * 4 + x3) + 2)/4;
	x1 = ac3 * b6 >> 13;
	x2 = (b1 * (b6 * b6 >> 12)) >> 16;
     980:	20 91 44 01 	lds	r18, 0x0144
     984:	30 91 45 01 	lds	r19, 0x0145
     988:	44 27       	eor	r20, r20
     98a:	37 fd       	sbrc	r19, 7
     98c:	40 95       	com	r20
     98e:	54 2f       	mov	r21, r20
     990:	c4 01       	movw	r24, r8
     992:	b3 01       	movw	r22, r6
     994:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsi3>
     998:	bc 01       	movw	r22, r24
     99a:	99 27       	eor	r25, r25
     99c:	77 fd       	sbrc	r23, 7
     99e:	90 95       	com	r25
     9a0:	89 2f       	mov	r24, r25
	x3 = ((x1 + x2) + 2) >> 2;
     9a2:	6a 0d       	add	r22, r10
     9a4:	7b 1d       	adc	r23, r11
     9a6:	8c 1d       	adc	r24, r12
     9a8:	9d 1d       	adc	r25, r13
     9aa:	95 95       	asr	r25
     9ac:	87 95       	ror	r24
     9ae:	77 95       	ror	r23
     9b0:	67 95       	ror	r22
     9b2:	95 95       	asr	r25
     9b4:	87 95       	ror	r24
     9b6:	77 95       	ror	r23
     9b8:	67 95       	ror	r22
	b4 = (ac4 * (unsigned long) (x3 + 32768)) >> 15;
     9ba:	60 50       	subi	r22, 0x00	; 0
     9bc:	70 48       	sbci	r23, 0x80	; 128
     9be:	8f 4f       	sbci	r24, 0xFF	; 255
     9c0:	9f 4f       	sbci	r25, 0xFF	; 255
     9c2:	20 91 4e 01 	lds	r18, 0x014E
     9c6:	30 91 4f 01 	lds	r19, 0x014F
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsi3>
     9d2:	1b 01       	movw	r2, r22
     9d4:	2c 01       	movw	r4, r24
     9d6:	01 2e       	mov	r0, r17
     9d8:	1f e0       	ldi	r17, 0x0F	; 15
     9da:	56 94       	lsr	r5
     9dc:	47 94       	ror	r4
     9de:	37 94       	ror	r3
     9e0:	27 94       	ror	r2
     9e2:	1a 95       	dec	r17
     9e4:	d1 f7       	brne	.-12     	; 0x9da <bmp085Convert+0x1d0>
     9e6:	10 2d       	mov	r17, r0
	
	b6 = b5 - 4000;
	x1 = (b2 * (b6 * b6 >> 12)) >> 11;
	x2 = ac2 * b6 >> 11;
	x3 = x1 + x2;
	b3 = (((int32_t) ac1 * 4 + x3) + 2)/4;
     9e8:	a0 90 42 01 	lds	r10, 0x0142
     9ec:	b0 90 43 01 	lds	r11, 0x0143
     9f0:	cc 24       	eor	r12, r12
     9f2:	b7 fc       	sbrc	r11, 7
     9f4:	c0 94       	com	r12
     9f6:	dc 2c       	mov	r13, r12
     9f8:	aa 0c       	add	r10, r10
     9fa:	bb 1c       	adc	r11, r11
     9fc:	cc 1c       	adc	r12, r12
     9fe:	dd 1c       	adc	r13, r13
     a00:	aa 0c       	add	r10, r10
     a02:	bb 1c       	adc	r11, r11
     a04:	cc 1c       	adc	r12, r12
     a06:	dd 1c       	adc	r13, r13
	*temperature = (b5 + 8) >> 4;
	
	b6 = b5 - 4000;
	x1 = (b2 * (b6 * b6 >> 12)) >> 11;
	x2 = ac2 * b6 >> 11;
	x3 = x1 + x2;
     a08:	22 e0       	ldi	r18, 0x02	; 2
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	a2 0e       	add	r10, r18
     a12:	b3 1e       	adc	r11, r19
     a14:	c4 1e       	adc	r12, r20
     a16:	d5 1e       	adc	r13, r21
	b5 = x1 + x2;
	*temperature = (b5 + 8) >> 4;
	
	b6 = b5 - 4000;
	x1 = (b2 * (b6 * b6 >> 12)) >> 11;
	x2 = ac2 * b6 >> 11;
     a18:	20 91 4a 01 	lds	r18, 0x014A
     a1c:	30 91 4b 01 	lds	r19, 0x014B
     a20:	44 27       	eor	r20, r20
     a22:	37 fd       	sbrc	r19, 7
     a24:	40 95       	com	r20
     a26:	54 2f       	mov	r21, r20
     a28:	c8 01       	movw	r24, r16
     a2a:	b7 01       	movw	r22, r14
     a2c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsi3>
     a30:	7b 01       	movw	r14, r22
     a32:	8c 01       	movw	r16, r24
     a34:	0d 2e       	mov	r0, r29
     a36:	db e0       	ldi	r29, 0x0B	; 11
     a38:	15 95       	asr	r17
     a3a:	07 95       	ror	r16
     a3c:	f7 94       	ror	r15
     a3e:	e7 94       	ror	r14
     a40:	da 95       	dec	r29
     a42:	d1 f7       	brne	.-12     	; 0xa38 <bmp085Convert+0x22e>
     a44:	d0 2d       	mov	r29, r0
	x3 = x1 + x2;
	b3 = (((int32_t) ac1 * 4 + x3) + 2)/4;
     a46:	ea 0c       	add	r14, r10
     a48:	fb 1c       	adc	r15, r11
     a4a:	0c 1d       	adc	r16, r12
     a4c:	1d 1d       	adc	r17, r13
	x2 = ((long) mc << 11) / (x1 + md);
	b5 = x1 + x2;
	*temperature = (b5 + 8) >> 4;
	
	b6 = b5 - 4000;
	x1 = (b2 * (b6 * b6 >> 12)) >> 11;
     a4e:	20 91 3e 01 	lds	r18, 0x013E
     a52:	30 91 3f 01 	lds	r19, 0x013F
     a56:	44 27       	eor	r20, r20
     a58:	37 fd       	sbrc	r19, 7
     a5a:	40 95       	com	r20
     a5c:	54 2f       	mov	r21, r20
     a5e:	c4 01       	movw	r24, r8
     a60:	b3 01       	movw	r22, r6
     a62:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsi3>
     a66:	05 2e       	mov	r0, r21
     a68:	5b e0       	ldi	r21, 0x0B	; 11
     a6a:	95 95       	asr	r25
     a6c:	87 95       	ror	r24
     a6e:	77 95       	ror	r23
     a70:	67 95       	ror	r22
     a72:	5a 95       	dec	r21
     a74:	d1 f7       	brne	.-12     	; 0xa6a <bmp085Convert+0x260>
     a76:	50 2d       	mov	r21, r0
	x2 = ac2 * b6 >> 11;
	x3 = x1 + x2;
	b3 = (((int32_t) ac1 * 4 + x3) + 2)/4;
     a78:	6e 0d       	add	r22, r14
     a7a:	7f 1d       	adc	r23, r15
     a7c:	80 1f       	adc	r24, r16
     a7e:	91 1f       	adc	r25, r17
     a80:	24 e0       	ldi	r18, 0x04	; 4
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__divmodsi4>
	x1 = ac3 * b6 >> 13;
	x2 = (b1 * (b6 * b6 >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (ac4 * (unsigned long) (x3 + 32768)) >> 15;
	b7 = ((unsigned long) up - b3) * (50000 >> OSS);
     a8c:	69 81       	ldd	r22, Y+1	; 0x01
     a8e:	7a 81       	ldd	r23, Y+2	; 0x02
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	9c 81       	ldd	r25, Y+4	; 0x04
     a94:	62 1b       	sub	r22, r18
     a96:	73 0b       	sbc	r23, r19
     a98:	84 0b       	sbc	r24, r20
     a9a:	95 0b       	sbc	r25, r21
     a9c:	20 e5       	ldi	r18, 0x50	; 80
     a9e:	33 ec       	ldi	r19, 0xC3	; 195
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsi3>
	p = b7 < 0x80000000 ? (b7 * 2) / b4 : (b7 / b4) * 2;
     aa8:	99 23       	and	r25, r25
     aaa:	5c f0       	brlt	.+22     	; 0xac2 <bmp085Convert+0x2b8>
     aac:	66 0f       	add	r22, r22
     aae:	77 1f       	adc	r23, r23
     ab0:	88 1f       	adc	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	a2 01       	movw	r20, r4
     ab6:	91 01       	movw	r18, r2
     ab8:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__udivmodsi4>
     abc:	59 01       	movw	r10, r18
     abe:	6a 01       	movw	r12, r20
     ac0:	0a c0       	rjmp	.+20     	; 0xad6 <bmp085Convert+0x2cc>
     ac2:	a2 01       	movw	r20, r4
     ac4:	91 01       	movw	r18, r2
     ac6:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__udivmodsi4>
     aca:	59 01       	movw	r10, r18
     acc:	6a 01       	movw	r12, r20
     ace:	aa 0c       	add	r10, r10
     ad0:	bb 1c       	adc	r11, r11
     ad2:	cc 1c       	adc	r12, r12
     ad4:	dd 1c       	adc	r13, r13
	x1 = (p >> 8) * (p >> 8);
     ad6:	55 27       	eor	r21, r21
     ad8:	d7 fc       	sbrc	r13, 7
     ada:	5a 95       	dec	r21
     adc:	4d 2d       	mov	r20, r13
     ade:	3c 2d       	mov	r19, r12
     ae0:	2b 2d       	mov	r18, r11
     ae2:	ca 01       	movw	r24, r20
     ae4:	b9 01       	movw	r22, r18
     ae6:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsi3>
	x1 = (x1 * 3038) >> 16;
     aea:	2e ed       	ldi	r18, 0xDE	; 222
     aec:	3b e0       	ldi	r19, 0x0B	; 11
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsi3>
     af6:	3b 01       	movw	r6, r22
     af8:	4c 01       	movw	r8, r24
	tpressure = p + 12000 +((x1 + x2 + 3791) >> 4); 
	val1= (tpressure/101325);
	val2=(1/5.255);
	res1= pow(val1,val2);
	val3=(1-(altitude/44330));
	res2= pow(val3,5.255);
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__floatsisf>
     b06:	26 ef       	ldi	r18, 0xF6	; 246
     b08:	38 e2       	ldi	r19, 0x28	; 40
     b0a:	48 ea       	ldi	r20, 0xA8	; 168
     b0c:	50 e4       	ldi	r21, 0x40	; 64
     b0e:	0e 94 bc 07 	call	0xf78	; 0xf78 <pow>
     b12:	f6 2e       	mov	r15, r22
     b14:	07 2f       	mov	r16, r23
     b16:	18 2f       	mov	r17, r24
     b18:	e9 2e       	mov	r14, r25
	b7 = ((unsigned long) up - b3) * (50000 >> OSS);
	p = b7 < 0x80000000 ? (b7 * 2) / b4 : (b7 / b4) * 2;
	x1 = (p >> 8) * (p >> 8);
	x1 = (x1 * 3038) >> 16;
	x2 = (-7357 * p) >> 16;
	tpressure = p + 12000 +((x1 + x2 + 3791) >> 4); 
     b1a:	0f 2e       	mov	r0, r31
     b1c:	f0 ee       	ldi	r31, 0xE0	; 224
     b1e:	2f 2e       	mov	r2, r31
     b20:	fe e2       	ldi	r31, 0x2E	; 46
     b22:	3f 2e       	mov	r3, r31
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	4f 2e       	mov	r4, r31
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	5f 2e       	mov	r5, r31
     b2c:	f0 2d       	mov	r31, r0
     b2e:	2a 0c       	add	r2, r10
     b30:	3b 1c       	adc	r3, r11
     b32:	4c 1c       	adc	r4, r12
     b34:	5d 1c       	adc	r5, r13
	b4 = (ac4 * (unsigned long) (x3 + 32768)) >> 15;
	b7 = ((unsigned long) up - b3) * (50000 >> OSS);
	p = b7 < 0x80000000 ? (b7 * 2) / b4 : (b7 / b4) * 2;
	x1 = (p >> 8) * (p >> 8);
	x1 = (x1 * 3038) >> 16;
	x2 = (-7357 * p) >> 16;
     b36:	c6 01       	movw	r24, r12
     b38:	b5 01       	movw	r22, r10
     b3a:	23 e4       	ldi	r18, 0x43	; 67
     b3c:	33 ee       	ldi	r19, 0xE3	; 227
     b3e:	4f ef       	ldi	r20, 0xFF	; 255
     b40:	5f ef       	ldi	r21, 0xFF	; 255
     b42:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__mulsi3>
     b46:	bc 01       	movw	r22, r24
     b48:	99 27       	eor	r25, r25
     b4a:	77 fd       	sbrc	r23, 7
     b4c:	90 95       	com	r25
     b4e:	89 2f       	mov	r24, r25
	tpressure = p + 12000 +((x1 + x2 + 3791) >> 4); 
     b50:	61 53       	subi	r22, 0x31	; 49
     b52:	71 4f       	sbci	r23, 0xF1	; 241
     b54:	8f 4f       	sbci	r24, 0xFF	; 255
     b56:	9f 4f       	sbci	r25, 0xFF	; 255
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (ac4 * (unsigned long) (x3 + 32768)) >> 15;
	b7 = ((unsigned long) up - b3) * (50000 >> OSS);
	p = b7 < 0x80000000 ? (b7 * 2) / b4 : (b7 / b4) * 2;
	x1 = (p >> 8) * (p >> 8);
	x1 = (x1 * 3038) >> 16;
     b58:	34 01       	movw	r6, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	77 fc       	sbrc	r7, 7
     b5e:	90 94       	com	r9
     b60:	89 2c       	mov	r8, r9
	x2 = (-7357 * p) >> 16;
	tpressure = p + 12000 +((x1 + x2 + 3791) >> 4); 
     b62:	66 0e       	add	r6, r22
     b64:	77 1e       	adc	r7, r23
     b66:	88 1e       	adc	r8, r24
     b68:	99 1e       	adc	r9, r25
     b6a:	68 94       	set
     b6c:	13 f8       	bld	r1, 3
     b6e:	95 94       	asr	r9
     b70:	87 94       	ror	r8
     b72:	77 94       	ror	r7
     b74:	67 94       	ror	r6
     b76:	16 94       	lsr	r1
     b78:	d1 f7       	brne	.-12     	; 0xb6e <bmp085Convert+0x364>
     b7a:	62 0c       	add	r6, r2
     b7c:	73 1c       	adc	r7, r3
     b7e:	84 1c       	adc	r8, r4
     b80:	95 1c       	adc	r9, r5
	val1= (tpressure/101325);
	val2=(1/5.255);
	res1= pow(val1,val2);
	val3=(1-(altitude/44330));
	res2= pow(val3,5.255);
     b82:	6f 2d       	mov	r22, r15
     b84:	70 2f       	mov	r23, r16
     b86:	81 2f       	mov	r24, r17
     b88:	9e 2d       	mov	r25, r14
     b8a:	0e 94 25 07 	call	0xe4a	; 0xe4a <__fixsfsi>
     b8e:	9b 01       	movw	r18, r22
     b90:	ac 01       	movw	r20, r24
	altitude =(44330*(1-res1));
	*pressure = (tpressure/(res2));
     b92:	c4 01       	movw	r24, r8
     b94:	b3 01       	movw	r22, r6
     b96:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__divmodsi4>
     b9a:	ad 81       	ldd	r26, Y+5	; 0x05
     b9c:	be 81       	ldd	r27, Y+6	; 0x06
     b9e:	2d 93       	st	X+, r18
     ba0:	3d 93       	st	X+, r19
     ba2:	4d 93       	st	X+, r20
     ba4:	5c 93       	st	X, r21
     ba6:	13 97       	sbiw	r26, 0x03	; 3
	
}
     ba8:	26 96       	adiw	r28, 0x06	; 6
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
     bb4:	cf 91       	pop	r28
     bb6:	df 91       	pop	r29
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	bf 90       	pop	r11
     bc6:	af 90       	pop	r10
     bc8:	9f 90       	pop	r9
     bca:	8f 90       	pop	r8
     bcc:	7f 90       	pop	r7
     bce:	6f 90       	pop	r6
     bd0:	5f 90       	pop	r5
     bd2:	4f 90       	pop	r4
     bd4:	3f 90       	pop	r3
     bd6:	2f 90       	pop	r2
     bd8:	08 95       	ret

00000bda <UART_Init>:
}

void UART_Init( unsigned int ubrr)
{
	// Set baud rate 
	UBRR0H = ubrr>>8;
     bda:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = ubrr;
     bde:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable receiver and transmitter 
	UCSR0A = (0<<U2X0);
     be2:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     be6:	88 e1       	ldi	r24, 0x18	; 24
     be8:	80 93 c1 00 	sts	0x00C1, r24
	
	// Set frame format: 8 bit, no parity, 1 stop bit,   
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
     bec:	86 e0       	ldi	r24, 0x06	; 6
     bee:	80 93 c2 00 	sts	0x00C2, r24
	
	stdout = &mystdout; //Required for printf init
     bf2:	8f e2       	ldi	r24, 0x2F	; 47
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	90 93 57 01 	sts	0x0157, r25
     bfa:	80 93 56 01 	sts	0x0156, r24
}
     bfe:	08 95       	ret

00000c00 <ioinit>:
 
void ioinit (void)
{
    //1 = output, 0 = input

    DDRB |= 0b11000000; //PORTC4 (SDA), PORTC5 (SCL), PORTC all others are inputs
     c00:	84 b1       	in	r24, 0x04	; 4
     c02:	80 6c       	ori	r24, 0xC0	; 192
     c04:	84 b9       	out	0x04, r24	; 4
    DDRC |= 0b00000010; //PORTC4 (SDA), PORTC5 (SCL), PORTC all others are inputs
     c06:	39 9a       	sbi	0x07, 1	; 7
    DDRD |= 0b11111110; 
     c08:	8a b1       	in	r24, 0x0a	; 10
     c0a:	8e 6f       	ori	r24, 0xFE	; 254
     c0c:	8a b9       	out	0x0a, r24	; 10
	PORTC |= 0b00000011; //pullups on the I2C bus
     c0e:	88 b1       	in	r24, 0x08	; 8
     c10:	83 60       	ori	r24, 0x03	; 3
     c12:	88 b9       	out	0x08, r24	; 8
	
	UART_Init((unsigned int)(FOSC/16/BAUD-1));		// ocillator fq/16/baud rate -1	
     c14:	83 e3       	ldi	r24, 0x33	; 51
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 ed 05 	call	0xbda	; 0xbda <UART_Init>
}
     c1c:	08 95       	ret

00000c1e <put_char>:
}

void put_char(unsigned char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     c1e:	e0 ec       	ldi	r30, 0xC0	; 192
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	90 81       	ld	r25, Z
     c24:	95 ff       	sbrs	r25, 5
     c26:	fd cf       	rjmp	.-6      	; 0xc22 <put_char+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
     c28:	80 93 c6 00 	sts	0x00C6, r24
     c2c:	08 95       	ret

00000c2e <SPI_MasterInit>:
#define SCK      ((volatile io_reg*)_SFR_MEM_ADDR(PORTC))->bit3

void SPI_MasterInit(void)
{
/* Set MOSI and SCK output, all others input */
DDRB |= (1<<PB5)|(1<PB7);
     c2e:	84 b1       	in	r24, 0x04	; 4
     c30:	81 62       	ori	r24, 0x21	; 33
     c32:	84 b9       	out	0x04, r24	; 4
/* Enable SPI, Master, set clock rate fck/16 */
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     c34:	81 e5       	ldi	r24, 0x51	; 81
     c36:	8c bd       	out	0x2c, r24	; 44
}
     c38:	08 95       	ret

00000c3a <SPI_MasterTransmit>:
void SPI_MasterTransmit(char cData)
{
/* Start transmission */
SPDR = cData;
     c3a:	8e bd       	out	0x2e, r24	; 46
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF)));
     c3c:	0d b4       	in	r0, 0x2d	; 45
     c3e:	07 fe       	sbrs	r0, 7
     c40:	fd cf       	rjmp	.-6      	; 0xc3c <SPI_MasterTransmit+0x2>
}
     c42:	08 95       	ret

00000c44 <s_write_byte>:

char s_write_byte(unsigned char value)
{
     c44:	28 e0       	ldi	r18, 0x08	; 8
     c46:	30 e0       	ldi	r19, 0x00	; 0
//PORTA= (0<<PA0);DDRA= (1<<PA0);PORTB= (1<<PB7);DDRB= (1<<DDB7);
	
unsigned char i,error=0;
for (i=0x80;i>0;i/=2); //shift bit for masking
     c48:	90 e8       	ldi	r25, 0x80	; 128
     c4a:	96 95       	lsr	r25
     c4c:	21 50       	subi	r18, 0x01	; 1
     c4e:	30 40       	sbci	r19, 0x00	; 0
     c50:	e1 f7       	brne	.-8      	; 0xc4a <s_write_byte+0x6>
 if (i & value)
     c52:	98 23       	and	r25, r24
     c54:	11 f0       	breq	.+4      	; 0xc5a <s_write_byte+0x16>
DATA == 1; //masking value with i , write to SENSI-BUS
     c56:	88 b1       	in	r24, 0x08	; 8
     c58:	08 c0       	rjmp	.+16     	; 0xc6a <s_write_byte+0x26>
else
{ 
DATA == 0;
     c5a:	88 b1       	in	r24, 0x08	; 8
_NOP(); //observe setup time
     c5c:	00 00       	nop
SCK == 1; //clk for SENSI-BUS
     c5e:	88 b1       	in	r24, 0x08	; 8
_NOP();_NOP();_NOP();
     c60:	00 00       	nop
     c62:	00 00       	nop
     c64:	00 00       	nop
SCK == 0;
     c66:	88 b1       	in	r24, 0x08	; 8
_NOP(); //observe hold time
     c68:	00 00       	nop
}
DATA == 1; //release DATA-line
     c6a:	88 b1       	in	r24, 0x08	; 8
_NOP(); //observe setup time
     c6c:	00 00       	nop
SCK == 1; //clk #9 for ack
     c6e:	88 b1       	in	r24, 0x08	; 8
error=DATA; //check ack (DATA will be pulled down by SHT11)
     c70:	88 b1       	in	r24, 0x08	; 8
     c72:	86 95       	lsr	r24
     c74:	86 95       	lsr	r24
SCK == 0;
     c76:	98 b1       	in	r25, 0x08	; 8
return error; //error=1 in case of no acknowledge	
}
     c78:	81 70       	andi	r24, 0x01	; 1
     c7a:	08 95       	ret

00000c7c <s_read_byte>:

char s_read_byte(unsigned char ack)
{
	unsigned char i,val=0;
DATA == 1;                                  //release DATA-line
     c7c:	88 b1       	in	r24, 0x08	; 8
     c7e:	28 e0       	ldi	r18, 0x08	; 8
     c80:	30 e0       	ldi	r19, 0x00	; 0
return error; //error=1 in case of no acknowledge	
}

char s_read_byte(unsigned char ack)
{
	unsigned char i,val=0;
     c82:	80 e0       	ldi	r24, 0x00	; 0
DATA == 1;                                  //release DATA-line
for (i=0x80;i>0;i/=2)                         //shift bit for masking
     c84:	90 e8       	ldi	r25, 0x80	; 128
 {
SCK== 0;                                //clk for SENSI-BUS
     c86:	48 b1       	in	r20, 0x08	; 8
if (DATA) val=(val | i);                      //read bit
     c88:	48 b1       	in	r20, 0x08	; 8
     c8a:	42 fd       	sbrc	r20, 2
     c8c:	89 2b       	or	r24, r25
SCK == 0;
     c8e:	48 b1       	in	r20, 0x08	; 8

char s_read_byte(unsigned char ack)
{
	unsigned char i,val=0;
DATA == 1;                                  //release DATA-line
for (i=0x80;i>0;i/=2)                         //shift bit for masking
     c90:	96 95       	lsr	r25
     c92:	21 50       	subi	r18, 0x01	; 1
     c94:	30 40       	sbci	r19, 0x00	; 0
     c96:	b9 f7       	brne	.-18     	; 0xc86 <s_read_byte+0xa>
 {
SCK== 0;                                //clk for SENSI-BUS
if (DATA) val=(val | i);                      //read bit
SCK == 0;
}
DATA == !ACK;                             //in case of "ack==1" pull down DATA-Line
     c98:	98 b1       	in	r25, 0x08	; 8
_NOP();                             //observe setup time
     c9a:	00 00       	nop
SCK == 1;                                  //clk #9 for ack
     c9c:	98 b1       	in	r25, 0x08	; 8
_NOP();_NOP();_NOP();                 //pulswith approx. 5 us
     c9e:	00 00       	nop
     ca0:	00 00       	nop
     ca2:	00 00       	nop
SCK == 0;
     ca4:	98 b1       	in	r25, 0x08	; 8
_NOP();                                  //observe hold time
     ca6:	00 00       	nop
DATA == 1;                                      //release DATA-line
     ca8:	98 b1       	in	r25, 0x08	; 8
return val;
}
     caa:	08 95       	ret

00000cac <s_transstart>:

void s_transstart(void)
{
DATA == 1;
     cac:	88 b1       	in	r24, 0x08	; 8
SCK == 0; //Initial state
     cae:	88 b1       	in	r24, 0x08	; 8
 _NOP();
     cb0:	00 00       	nop
SCK == 1;
     cb2:	88 b1       	in	r24, 0x08	; 8
 _NOP();
     cb4:	00 00       	nop
DATA == 0;
     cb6:	88 b1       	in	r24, 0x08	; 8
 _NOP();
     cb8:	00 00       	nop
SCK == 0;
     cba:	88 b1       	in	r24, 0x08	; 8
 _NOP(); _NOP(); _NOP();
     cbc:	00 00       	nop
     cbe:	00 00       	nop
     cc0:	00 00       	nop
SCK == 1;
     cc2:	88 b1       	in	r24, 0x08	; 8
 _NOP();
     cc4:	00 00       	nop
DATA == 1;
     cc6:	88 b1       	in	r24, 0x08	; 8
 _NOP();
     cc8:	00 00       	nop
SCK == 0;	
     cca:	88 b1       	in	r24, 0x08	; 8
}
     ccc:	08 95       	ret

00000cce <s_connectionreset>:

void s_connectionreset(void)
{
	unsigned char i;
DATA == 1;
     cce:	88 b1       	in	r24, 0x08	; 8
SCK == 0; //Initial state
     cd0:	88 b1       	in	r24, 0x08	; 8
     cd2:	89 e0       	ldi	r24, 0x09	; 9
for(i=0;i<9;i++) //9 SCK cycles
{
SCK == 1;
     cd4:	98 b1       	in	r25, 0x08	; 8
SCK == 0;
     cd6:	98 b1       	in	r25, 0x08	; 8
     cd8:	81 50       	subi	r24, 0x01	; 1
void s_connectionreset(void)
{
	unsigned char i;
DATA == 1;
SCK == 0; //Initial state
for(i=0;i<9;i++) //9 SCK cycles
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <s_connectionreset+0x6>
{
SCK == 1;
SCK == 0;
}
s_transstart(); //transmission start
     cdc:	0e 94 56 06 	call	0xcac	; 0xcac <s_transstart>
}
     ce0:	08 95       	ret

00000ce2 <s_read_statusreg>:

char s_read_statusreg(unsigned char *p_value, unsigned char *p_checksum)
{
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	ec 01       	movw	r28, r24
     cee:	7b 01       	movw	r14, r22
unsigned char error=0;  // reads the status register with checksum (8-bit)
s_transstart(); //transmission start
     cf0:	0e 94 56 06 	call	0xcac	; 0xcac <s_transstart>
error=s_write_byte(read_status_reg); //send command to sensor
     cf4:	87 e0       	ldi	r24, 0x07	; 7
     cf6:	0e 94 22 06 	call	0xc44	; 0xc44 <s_write_byte>
     cfa:	18 2f       	mov	r17, r24
*p_value=s_read_byte(ACK); //read status register (8-bit)
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	0e 94 3e 06 	call	0xc7c	; 0xc7c <s_read_byte>
     d02:	88 83       	st	Y, r24
*p_checksum=s_read_byte(noACK); //read checksum (8-bit)
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	0e 94 3e 06 	call	0xc7c	; 0xc7c <s_read_byte>
     d0a:	f7 01       	movw	r30, r14
     d0c:	80 83       	st	Z, r24
return error;
}
     d0e:	81 2f       	mov	r24, r17
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	08 95       	ret

00000d1c <s_write_statusreg>:

char s_write_statusreg(unsigned char *p_value)
{
     d1c:	1f 93       	push	r17
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	ec 01       	movw	r28, r24
unsigned char error=0;  // writes the status register with checksum (8-bit)
s_transstart(); //transmission start
     d24:	0e 94 56 06 	call	0xcac	; 0xcac <s_transstart>
error+=s_write_byte(write_status_reg);//send command to sensor
     d28:	86 e0       	ldi	r24, 0x06	; 6
     d2a:	0e 94 22 06 	call	0xc44	; 0xc44 <s_write_byte>
     d2e:	18 2f       	mov	r17, r24
error+=s_write_byte(*p_value); //send value of status register
     d30:	88 81       	ld	r24, Y
     d32:	0e 94 22 06 	call	0xc44	; 0xc44 <s_write_byte>
return error;
}
     d36:	81 0f       	add	r24, r17
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	08 95       	ret

00000d40 <s_measure>:

char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
{
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	ec 01       	movw	r28, r24
     d4c:	7b 01       	movw	r14, r22
     d4e:	14 2f       	mov	r17, r20
unsigned char error=0;  // makes a measurement (humidity/temperature) with checksum
unsigned int i;
s_transstart(); //transmission start
     d50:	0e 94 56 06 	call	0xcac	; 0xcac <s_transstart>
switch(mode)
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <s_measure+0x1e>
     d58:	11 30       	cpi	r17, 0x01	; 1
     d5a:	59 f4       	brne	.+22     	; 0xd72 <s_measure+0x32>
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <s_measure+0x28>
{
 //send command to sensor
case TEMP : error+=s_write_byte (measure_temp); break;
     d5e:	83 e0       	ldi	r24, 0x03	; 3
     d60:	0e 94 22 06 	call	0xc44	; 0xc44 <s_write_byte>
     d64:	18 2f       	mov	r17, r24
     d66:	06 c0       	rjmp	.+12     	; 0xd74 <s_measure+0x34>
case HUMI : error+=s_write_byte(measure_humidity); break;
     d68:	85 e0       	ldi	r24, 0x05	; 5
     d6a:	0e 94 22 06 	call	0xc44	; 0xc44 <s_write_byte>
     d6e:	18 2f       	mov	r17, r24
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <s_measure+0x34>
return error;
}

char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
{
unsigned char error=0;  // makes a measurement (humidity/temperature) with checksum
     d72:	10 e0       	ldi	r17, 0x00	; 0
case TEMP : error+=s_write_byte (measure_temp); break;
case HUMI : error+=s_write_byte(measure_humidity); break;
default : break;
}
for (i=0;i<65535;i++)
if(DATA == 0)
     d74:	88 b1       	in	r24, 0x08	; 8
     d76:	82 ff       	sbrs	r24, 2
     d78:	07 c0       	rjmp	.+14     	; 0xd88 <s_measure+0x48>
     d7a:	8e ef       	ldi	r24, 0xFE	; 254
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	28 b1       	in	r18, 0x08	; 8
     d80:	22 ff       	sbrs	r18, 2
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <s_measure+0x48>
     d84:	01 97       	sbiw	r24, 0x01	; 1
 //send command to sensor
case TEMP : error+=s_write_byte (measure_temp); break;
case HUMI : error+=s_write_byte(measure_humidity); break;
default : break;
}
for (i=0;i<65535;i++)
     d86:	d9 f7       	brne	.-10     	; 0xd7e <s_measure+0x3e>
if(DATA == 0)
break; //wait until sensor has finished the
//measurement
if(DATA) error+=1; // or timeout (~2 sec.) is reached
     d88:	88 b1       	in	r24, 0x08	; 8
     d8a:	82 fd       	sbrc	r24, 2
     d8c:	1f 5f       	subi	r17, 0xFF	; 255
*(p_value) =s_read_byte(ACK); //read the first byte (MSB)
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	0e 94 3e 06 	call	0xc7c	; 0xc7c <s_read_byte>
     d94:	88 83       	st	Y, r24
*(p_value+1)=s_read_byte(ACK); //read the second byte (LSB)
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	0e 94 3e 06 	call	0xc7c	; 0xc7c <s_read_byte>
     d9c:	89 83       	std	Y+1, r24	; 0x01
*p_checksum =s_read_byte(noACK); //read checksum
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <s_read_byte>
     da4:	f7 01       	movw	r30, r14
     da6:	80 83       	st	Z, r24
return error;
}
     da8:	81 2f       	mov	r24, r17
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	08 95       	ret

00000db6 <calcth>:
t_C=d1+d2*t;
rh_linear=c1+c2*rh+c3*rh*rh;
rh_true=(t_C-25)*(t1+t2*rh)+rh_linear;
ftemperature=t_C;
fhumidity=rh_true;
}
     db6:	08 95       	ret

00000db8 <SHT1x>:


int SHT1x(void)
{
     db8:	af 92       	push	r10
     dba:	bf 92       	push	r11
     dbc:	cf 92       	push	r12
     dbe:	df 92       	push	r13
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	00 d0       	rcall	.+0      	; 0xdcc <SHT1x+0x14>
     dcc:	00 d0       	rcall	.+0      	; 0xdce <SHT1x+0x16>
     dce:	0f 92       	push	r0
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
float rh;
float t;
    while(1)
    {
     error=0;
error+=s_measure((unsigned char*) &humi_val, &checksum, HUMI);
     dd4:	8e 01       	movw	r16, r28
     dd6:	0b 5f       	subi	r16, 0xFB	; 251
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	6e 01       	movw	r12, r28
     ddc:	08 94       	sec
     dde:	c1 1c       	adc	r12, r1
     de0:	d1 1c       	adc	r13, r1
error+=s_measure((unsigned char*) &temp_val, &checksum, TEMP);
     de2:	0f 2e       	mov	r0, r31
     de4:	f3 e0       	ldi	r31, 0x03	; 3
     de6:	af 2e       	mov	r10, r31
     de8:	bb 24       	eor	r11, r11
     dea:	f0 2d       	mov	r31, r0
     dec:	ac 0e       	add	r10, r28
     dee:	bd 1e       	adc	r11, r29
float rh;
float t;
    while(1)
    {
     error=0;
error+=s_measure((unsigned char*) &humi_val, &checksum, HUMI);
     df0:	c6 01       	movw	r24, r12
     df2:	b8 01       	movw	r22, r16
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	0e 94 a0 06 	call	0xd40	; 0xd40 <s_measure>
     dfa:	f8 2e       	mov	r15, r24
error+=s_measure((unsigned char*) &temp_val, &checksum, TEMP);
     dfc:	c5 01       	movw	r24, r10
     dfe:	b8 01       	movw	r22, r16
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	0e 94 a0 06 	call	0xd40	; 0xd40 <s_measure>
     e06:	8f 0d       	add	r24, r15
if(error!=0)
     e08:	99 f3       	breq	.-26     	; 0xdf0 <SHT1x+0x38>
s_connectionreset();
     e0a:	0e 94 67 06 	call	0xcce	; 0xcce <s_connectionreset>
     e0e:	f0 cf       	rjmp	.-32     	; 0xdf0 <SHT1x+0x38>

00000e10 <adc_init>:

// initialize adc
void adc_init()
{
    // AREF = AVcc
    ADMUX = (1<<REFS0);
     e10:	80 e4       	ldi	r24, 0x40	; 64
     e12:	80 93 7c 00 	sts	0x007C, r24
    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     e16:	87 e8       	ldi	r24, 0x87	; 135
     e18:	80 93 7a 00 	sts	0x007A, r24
}
     e1c:	08 95       	ret

00000e1e <adc_read>:
{
    // select the corresponding channel 0~7
    // ANDing with '7' will always keep the value
    // of 'ch' between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     e1e:	ec e7       	ldi	r30, 0x7C	; 124
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	90 81       	ld	r25, Z
int16_t adc_read(uint8_t ch)
{
    // select the corresponding channel 0~7
    // ANDing with '7' will always keep the value
    // of 'ch' between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
     e24:	87 70       	andi	r24, 0x07	; 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     e26:	98 7f       	andi	r25, 0xF8	; 248
     e28:	98 2b       	or	r25, r24
     e2a:	90 83       	st	Z, r25

    // start single convertion
    // write '1' to ADSC
    ADCSRA |= (1<<ADSC);
     e2c:	ea e7       	ldi	r30, 0x7A	; 122
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	80 64       	ori	r24, 0x40	; 64
     e34:	80 83       	st	Z, r24

    // wait for conversion to complete
    // ADSC becomes '0' again
    // till then, run loop continuously
    while(ADCSRA & (1<<ADSC));
     e36:	80 81       	ld	r24, Z
     e38:	86 fd       	sbrc	r24, 6
     e3a:	fd cf       	rjmp	.-6      	; 0xe36 <adc_read+0x18>

    return (ADC);
     e3c:	20 91 78 00 	lds	r18, 0x0078
     e40:	30 91 79 00 	lds	r19, 0x0079
}
     e44:	82 2f       	mov	r24, r18
     e46:	93 2f       	mov	r25, r19
     e48:	08 95       	ret

00000e4a <__fixsfsi>:
     e4a:	04 d0       	rcall	.+8      	; 0xe54 <__fixunssfsi>
     e4c:	68 94       	set
     e4e:	b1 11       	cpse	r27, r1
     e50:	8d c0       	rjmp	.+282    	; 0xf6c <__fp_szero>
     e52:	08 95       	ret

00000e54 <__fixunssfsi>:
     e54:	70 d0       	rcall	.+224    	; 0xf36 <__fp_splitA>
     e56:	88 f0       	brcs	.+34     	; 0xe7a <__fixunssfsi+0x26>
     e58:	9f 57       	subi	r25, 0x7F	; 127
     e5a:	90 f0       	brcs	.+36     	; 0xe80 <__fixunssfsi+0x2c>
     e5c:	b9 2f       	mov	r27, r25
     e5e:	99 27       	eor	r25, r25
     e60:	b7 51       	subi	r27, 0x17	; 23
     e62:	a0 f0       	brcs	.+40     	; 0xe8c <__fixunssfsi+0x38>
     e64:	d1 f0       	breq	.+52     	; 0xe9a <__fixunssfsi+0x46>
     e66:	66 0f       	add	r22, r22
     e68:	77 1f       	adc	r23, r23
     e6a:	88 1f       	adc	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	1a f0       	brmi	.+6      	; 0xe76 <__fixunssfsi+0x22>
     e70:	ba 95       	dec	r27
     e72:	c9 f7       	brne	.-14     	; 0xe66 <__fixunssfsi+0x12>
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__fixunssfsi+0x46>
     e76:	b1 30       	cpi	r27, 0x01	; 1
     e78:	81 f0       	breq	.+32     	; 0xe9a <__fixunssfsi+0x46>
     e7a:	77 d0       	rcall	.+238    	; 0xf6a <__fp_zero>
     e7c:	b1 e0       	ldi	r27, 0x01	; 1
     e7e:	08 95       	ret
     e80:	74 c0       	rjmp	.+232    	; 0xf6a <__fp_zero>
     e82:	67 2f       	mov	r22, r23
     e84:	78 2f       	mov	r23, r24
     e86:	88 27       	eor	r24, r24
     e88:	b8 5f       	subi	r27, 0xF8	; 248
     e8a:	39 f0       	breq	.+14     	; 0xe9a <__fixunssfsi+0x46>
     e8c:	b9 3f       	cpi	r27, 0xF9	; 249
     e8e:	cc f3       	brlt	.-14     	; 0xe82 <__fixunssfsi+0x2e>
     e90:	86 95       	lsr	r24
     e92:	77 95       	ror	r23
     e94:	67 95       	ror	r22
     e96:	b3 95       	inc	r27
     e98:	d9 f7       	brne	.-10     	; 0xe90 <__fixunssfsi+0x3c>
     e9a:	3e f4       	brtc	.+14     	; 0xeaa <__fixunssfsi+0x56>
     e9c:	90 95       	com	r25
     e9e:	80 95       	com	r24
     ea0:	70 95       	com	r23
     ea2:	61 95       	neg	r22
     ea4:	7f 4f       	sbci	r23, 0xFF	; 255
     ea6:	8f 4f       	sbci	r24, 0xFF	; 255
     ea8:	9f 4f       	sbci	r25, 0xFF	; 255
     eaa:	08 95       	ret

00000eac <__floatunsisf>:
     eac:	e8 94       	clt
     eae:	09 c0       	rjmp	.+18     	; 0xec2 <__floatsisf+0x12>

00000eb0 <__floatsisf>:
     eb0:	97 fb       	bst	r25, 7
     eb2:	3e f4       	brtc	.+14     	; 0xec2 <__floatsisf+0x12>
     eb4:	90 95       	com	r25
     eb6:	80 95       	com	r24
     eb8:	70 95       	com	r23
     eba:	61 95       	neg	r22
     ebc:	7f 4f       	sbci	r23, 0xFF	; 255
     ebe:	8f 4f       	sbci	r24, 0xFF	; 255
     ec0:	9f 4f       	sbci	r25, 0xFF	; 255
     ec2:	99 23       	and	r25, r25
     ec4:	a9 f0       	breq	.+42     	; 0xef0 <__floatsisf+0x40>
     ec6:	f9 2f       	mov	r31, r25
     ec8:	96 e9       	ldi	r25, 0x96	; 150
     eca:	bb 27       	eor	r27, r27
     ecc:	93 95       	inc	r25
     ece:	f6 95       	lsr	r31
     ed0:	87 95       	ror	r24
     ed2:	77 95       	ror	r23
     ed4:	67 95       	ror	r22
     ed6:	b7 95       	ror	r27
     ed8:	f1 11       	cpse	r31, r1
     eda:	f8 cf       	rjmp	.-16     	; 0xecc <__floatsisf+0x1c>
     edc:	fa f4       	brpl	.+62     	; 0xf1c <__floatsisf+0x6c>
     ede:	bb 0f       	add	r27, r27
     ee0:	11 f4       	brne	.+4      	; 0xee6 <__floatsisf+0x36>
     ee2:	60 ff       	sbrs	r22, 0
     ee4:	1b c0       	rjmp	.+54     	; 0xf1c <__floatsisf+0x6c>
     ee6:	6f 5f       	subi	r22, 0xFF	; 255
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	8f 4f       	sbci	r24, 0xFF	; 255
     eec:	9f 4f       	sbci	r25, 0xFF	; 255
     eee:	16 c0       	rjmp	.+44     	; 0xf1c <__floatsisf+0x6c>
     ef0:	88 23       	and	r24, r24
     ef2:	11 f0       	breq	.+4      	; 0xef8 <__floatsisf+0x48>
     ef4:	96 e9       	ldi	r25, 0x96	; 150
     ef6:	11 c0       	rjmp	.+34     	; 0xf1a <__floatsisf+0x6a>
     ef8:	77 23       	and	r23, r23
     efa:	21 f0       	breq	.+8      	; 0xf04 <__floatsisf+0x54>
     efc:	9e e8       	ldi	r25, 0x8E	; 142
     efe:	87 2f       	mov	r24, r23
     f00:	76 2f       	mov	r23, r22
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <__floatsisf+0x5e>
     f04:	66 23       	and	r22, r22
     f06:	71 f0       	breq	.+28     	; 0xf24 <__floatsisf+0x74>
     f08:	96 e8       	ldi	r25, 0x86	; 134
     f0a:	86 2f       	mov	r24, r22
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	2a f0       	brmi	.+10     	; 0xf1c <__floatsisf+0x6c>
     f12:	9a 95       	dec	r25
     f14:	66 0f       	add	r22, r22
     f16:	77 1f       	adc	r23, r23
     f18:	88 1f       	adc	r24, r24
     f1a:	da f7       	brpl	.-10     	; 0xf12 <__floatsisf+0x62>
     f1c:	88 0f       	add	r24, r24
     f1e:	96 95       	lsr	r25
     f20:	87 95       	ror	r24
     f22:	97 f9       	bld	r25, 7
     f24:	08 95       	ret

00000f26 <__fp_split3>:
     f26:	57 fd       	sbrc	r21, 7
     f28:	90 58       	subi	r25, 0x80	; 128
     f2a:	44 0f       	add	r20, r20
     f2c:	55 1f       	adc	r21, r21
     f2e:	59 f0       	breq	.+22     	; 0xf46 <__fp_splitA+0x10>
     f30:	5f 3f       	cpi	r21, 0xFF	; 255
     f32:	71 f0       	breq	.+28     	; 0xf50 <__fp_splitA+0x1a>
     f34:	47 95       	ror	r20

00000f36 <__fp_splitA>:
     f36:	88 0f       	add	r24, r24
     f38:	97 fb       	bst	r25, 7
     f3a:	99 1f       	adc	r25, r25
     f3c:	61 f0       	breq	.+24     	; 0xf56 <__fp_splitA+0x20>
     f3e:	9f 3f       	cpi	r25, 0xFF	; 255
     f40:	79 f0       	breq	.+30     	; 0xf60 <__fp_splitA+0x2a>
     f42:	87 95       	ror	r24
     f44:	08 95       	ret
     f46:	12 16       	cp	r1, r18
     f48:	13 06       	cpc	r1, r19
     f4a:	14 06       	cpc	r1, r20
     f4c:	55 1f       	adc	r21, r21
     f4e:	f2 cf       	rjmp	.-28     	; 0xf34 <__fp_split3+0xe>
     f50:	46 95       	lsr	r20
     f52:	f1 df       	rcall	.-30     	; 0xf36 <__fp_splitA>
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <__fp_splitA+0x30>
     f56:	16 16       	cp	r1, r22
     f58:	17 06       	cpc	r1, r23
     f5a:	18 06       	cpc	r1, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	f1 cf       	rjmp	.-30     	; 0xf42 <__fp_splitA+0xc>
     f60:	86 95       	lsr	r24
     f62:	71 05       	cpc	r23, r1
     f64:	61 05       	cpc	r22, r1
     f66:	08 94       	sec
     f68:	08 95       	ret

00000f6a <__fp_zero>:
     f6a:	e8 94       	clt

00000f6c <__fp_szero>:
     f6c:	bb 27       	eor	r27, r27
     f6e:	66 27       	eor	r22, r22
     f70:	77 27       	eor	r23, r23
     f72:	cb 01       	movw	r24, r22
     f74:	97 f9       	bld	r25, 7
     f76:	08 95       	ret

00000f78 <pow>:
     f78:	fa 01       	movw	r30, r20
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	30 96       	adiw	r30, 0x00	; 0
     f80:	21 05       	cpc	r18, r1
     f82:	31 05       	cpc	r19, r1
     f84:	99 f1       	breq	.+102    	; 0xfec <pow+0x74>
     f86:	61 15       	cp	r22, r1
     f88:	71 05       	cpc	r23, r1
     f8a:	61 f4       	brne	.+24     	; 0xfa4 <pow+0x2c>
     f8c:	80 38       	cpi	r24, 0x80	; 128
     f8e:	bf e3       	ldi	r27, 0x3F	; 63
     f90:	9b 07       	cpc	r25, r27
     f92:	49 f1       	breq	.+82     	; 0xfe6 <pow+0x6e>
     f94:	68 94       	set
     f96:	90 38       	cpi	r25, 0x80	; 128
     f98:	81 05       	cpc	r24, r1
     f9a:	61 f0       	breq	.+24     	; 0xfb4 <pow+0x3c>
     f9c:	80 38       	cpi	r24, 0x80	; 128
     f9e:	bf ef       	ldi	r27, 0xFF	; 255
     fa0:	9b 07       	cpc	r25, r27
     fa2:	41 f0       	breq	.+16     	; 0xfb4 <pow+0x3c>
     fa4:	99 23       	and	r25, r25
     fa6:	42 f5       	brpl	.+80     	; 0xff8 <pow+0x80>
     fa8:	ff 3f       	cpi	r31, 0xFF	; 255
     faa:	e1 05       	cpc	r30, r1
     fac:	31 05       	cpc	r19, r1
     fae:	21 05       	cpc	r18, r1
     fb0:	11 f1       	breq	.+68     	; 0xff6 <pow+0x7e>
     fb2:	e8 94       	clt
     fb4:	08 94       	sec
     fb6:	e7 95       	ror	r30
     fb8:	d9 01       	movw	r26, r18
     fba:	aa 23       	and	r26, r26
     fbc:	29 f4       	brne	.+10     	; 0xfc8 <pow+0x50>
     fbe:	ab 2f       	mov	r26, r27
     fc0:	be 2f       	mov	r27, r30
     fc2:	f8 5f       	subi	r31, 0xF8	; 248
     fc4:	d0 f3       	brcs	.-12     	; 0xfba <pow+0x42>
     fc6:	10 c0       	rjmp	.+32     	; 0xfe8 <pow+0x70>
     fc8:	ff 5f       	subi	r31, 0xFF	; 255
     fca:	70 f4       	brcc	.+28     	; 0xfe8 <pow+0x70>
     fcc:	a6 95       	lsr	r26
     fce:	e0 f7       	brcc	.-8      	; 0xfc8 <pow+0x50>
     fd0:	f7 39       	cpi	r31, 0x97	; 151
     fd2:	50 f0       	brcs	.+20     	; 0xfe8 <pow+0x70>
     fd4:	19 f0       	breq	.+6      	; 0xfdc <pow+0x64>
     fd6:	ff 3a       	cpi	r31, 0xAF	; 175
     fd8:	38 f4       	brcc	.+14     	; 0xfe8 <pow+0x70>
     fda:	9f 77       	andi	r25, 0x7F	; 127
     fdc:	9f 93       	push	r25
     fde:	0c d0       	rcall	.+24     	; 0xff8 <pow+0x80>
     fe0:	0f 90       	pop	r0
     fe2:	07 fc       	sbrc	r0, 7
     fe4:	90 58       	subi	r25, 0x80	; 128
     fe6:	08 95       	ret
     fe8:	3e f0       	brts	.+14     	; 0xff8 <pow+0x80>
     fea:	49 c0       	rjmp	.+146    	; 0x107e <__fp_nan>
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	80 e8       	ldi	r24, 0x80	; 128
     ff2:	9f e3       	ldi	r25, 0x3F	; 63
     ff4:	08 95       	ret
     ff6:	4f e7       	ldi	r20, 0x7F	; 127
     ff8:	9f 77       	andi	r25, 0x7F	; 127
     ffa:	5f 93       	push	r21
     ffc:	4f 93       	push	r20
     ffe:	3f 93       	push	r19
    1000:	2f 93       	push	r18
    1002:	a7 d0       	rcall	.+334    	; 0x1152 <log>
    1004:	2f 91       	pop	r18
    1006:	3f 91       	pop	r19
    1008:	4f 91       	pop	r20
    100a:	5f 91       	pop	r21
    100c:	15 d1       	rcall	.+554    	; 0x1238 <__mulsf3>
    100e:	05 c0       	rjmp	.+10     	; 0x101a <exp>
    1010:	19 f4       	brne	.+6      	; 0x1018 <pow+0xa0>
    1012:	0e f0       	brts	.+2      	; 0x1016 <pow+0x9e>
    1014:	2e c0       	rjmp	.+92     	; 0x1072 <__fp_inf>
    1016:	a9 cf       	rjmp	.-174    	; 0xf6a <__fp_zero>
    1018:	32 c0       	rjmp	.+100    	; 0x107e <__fp_nan>

0000101a <exp>:
    101a:	8d df       	rcall	.-230    	; 0xf36 <__fp_splitA>
    101c:	c8 f3       	brcs	.-14     	; 0x1010 <pow+0x98>
    101e:	96 38       	cpi	r25, 0x86	; 134
    1020:	c0 f7       	brcc	.-16     	; 0x1012 <pow+0x9a>
    1022:	07 f8       	bld	r0, 7
    1024:	0f 92       	push	r0
    1026:	e8 94       	clt
    1028:	2b e3       	ldi	r18, 0x3B	; 59
    102a:	3a ea       	ldi	r19, 0xAA	; 170
    102c:	48 eb       	ldi	r20, 0xB8	; 184
    102e:	5f e7       	ldi	r21, 0x7F	; 127
    1030:	11 d1       	rcall	.+546    	; 0x1254 <__mulsf3_pse>
    1032:	0f 92       	push	r0
    1034:	0f 92       	push	r0
    1036:	0f 92       	push	r0
    1038:	4d b7       	in	r20, 0x3d	; 61
    103a:	5e b7       	in	r21, 0x3e	; 62
    103c:	0f 92       	push	r0
    103e:	c9 d0       	rcall	.+402    	; 0x11d2 <modf>
    1040:	ec e7       	ldi	r30, 0x7C	; 124
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	1f d0       	rcall	.+62     	; 0x1084 <__fp_powser>
    1046:	4f 91       	pop	r20
    1048:	5f 91       	pop	r21
    104a:	ef 91       	pop	r30
    104c:	ff 91       	pop	r31
    104e:	e5 95       	asr	r30
    1050:	ee 1f       	adc	r30, r30
    1052:	ff 1f       	adc	r31, r31
    1054:	49 f0       	breq	.+18     	; 0x1068 <exp+0x4e>
    1056:	fe 57       	subi	r31, 0x7E	; 126
    1058:	e0 68       	ori	r30, 0x80	; 128
    105a:	44 27       	eor	r20, r20
    105c:	ee 0f       	add	r30, r30
    105e:	44 1f       	adc	r20, r20
    1060:	fa 95       	dec	r31
    1062:	e1 f7       	brne	.-8      	; 0x105c <exp+0x42>
    1064:	41 95       	neg	r20
    1066:	55 0b       	sbc	r21, r21
    1068:	3b d0       	rcall	.+118    	; 0x10e0 <ldexp>
    106a:	0f 90       	pop	r0
    106c:	07 fe       	sbrs	r0, 7
    106e:	2f c0       	rjmp	.+94     	; 0x10ce <inverse>
    1070:	08 95       	ret

00001072 <__fp_inf>:
    1072:	97 f9       	bld	r25, 7
    1074:	9f 67       	ori	r25, 0x7F	; 127
    1076:	80 e8       	ldi	r24, 0x80	; 128
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	08 95       	ret

0000107e <__fp_nan>:
    107e:	9f ef       	ldi	r25, 0xFF	; 255
    1080:	80 ec       	ldi	r24, 0xC0	; 192
    1082:	08 95       	ret

00001084 <__fp_powser>:
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	1f 93       	push	r17
    108a:	0f 93       	push	r16
    108c:	ff 92       	push	r15
    108e:	ef 92       	push	r14
    1090:	df 92       	push	r13
    1092:	7b 01       	movw	r14, r22
    1094:	8c 01       	movw	r16, r24
    1096:	68 94       	set
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <__fp_powser+0x20>
    109a:	da 2e       	mov	r13, r26
    109c:	ef 01       	movw	r28, r30
    109e:	d8 d0       	rcall	.+432    	; 0x1250 <__mulsf3x>
    10a0:	fe 01       	movw	r30, r28
    10a2:	e8 94       	clt
    10a4:	a5 91       	lpm	r26, Z+
    10a6:	25 91       	lpm	r18, Z+
    10a8:	35 91       	lpm	r19, Z+
    10aa:	45 91       	lpm	r20, Z+
    10ac:	55 91       	lpm	r21, Z+
    10ae:	ae f3       	brts	.-22     	; 0x109a <__fp_powser+0x16>
    10b0:	ef 01       	movw	r28, r30
    10b2:	37 d1       	rcall	.+622    	; 0x1322 <__addsf3x>
    10b4:	fe 01       	movw	r30, r28
    10b6:	97 01       	movw	r18, r14
    10b8:	a8 01       	movw	r20, r16
    10ba:	da 94       	dec	r13
    10bc:	79 f7       	brne	.-34     	; 0x109c <__fp_powser+0x18>
    10be:	df 90       	pop	r13
    10c0:	ef 90       	pop	r14
    10c2:	ff 90       	pop	r15
    10c4:	0f 91       	pop	r16
    10c6:	1f 91       	pop	r17
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <inverse>:
    10ce:	9b 01       	movw	r18, r22
    10d0:	ac 01       	movw	r20, r24
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	80 e8       	ldi	r24, 0x80	; 128
    10d8:	9f e3       	ldi	r25, 0x3F	; 63
    10da:	76 c1       	rjmp	.+748    	; 0x13c8 <__divsf3>
    10dc:	ca cf       	rjmp	.-108    	; 0x1072 <__fp_inf>
    10de:	dc c1       	rjmp	.+952    	; 0x1498 <__fp_mpack>

000010e0 <ldexp>:
    10e0:	2a df       	rcall	.-428    	; 0xf36 <__fp_splitA>
    10e2:	e8 f3       	brcs	.-6      	; 0x10de <inverse+0x10>
    10e4:	99 23       	and	r25, r25
    10e6:	d9 f3       	breq	.-10     	; 0x10de <inverse+0x10>
    10e8:	94 0f       	add	r25, r20
    10ea:	51 1d       	adc	r21, r1
    10ec:	bb f3       	brvs	.-18     	; 0x10dc <inverse+0xe>
    10ee:	91 50       	subi	r25, 0x01	; 1
    10f0:	50 40       	sbci	r21, 0x00	; 0
    10f2:	94 f0       	brlt	.+36     	; 0x1118 <__stack+0x19>
    10f4:	59 f0       	breq	.+22     	; 0x110c <__stack+0xd>
    10f6:	88 23       	and	r24, r24
    10f8:	32 f0       	brmi	.+12     	; 0x1106 <__stack+0x7>
    10fa:	66 0f       	add	r22, r22
    10fc:	77 1f       	adc	r23, r23
    10fe:	88 1f       	adc	r24, r24
    1100:	91 50       	subi	r25, 0x01	; 1
    1102:	50 40       	sbci	r21, 0x00	; 0
    1104:	c1 f7       	brne	.-16     	; 0x10f6 <ldexp+0x16>
    1106:	9e 3f       	cpi	r25, 0xFE	; 254
    1108:	51 05       	cpc	r21, r1
    110a:	44 f7       	brge	.-48     	; 0x10dc <inverse+0xe>
    110c:	88 0f       	add	r24, r24
    110e:	91 1d       	adc	r25, r1
    1110:	96 95       	lsr	r25
    1112:	87 95       	ror	r24
    1114:	97 f9       	bld	r25, 7
    1116:	08 95       	ret
    1118:	5f 3f       	cpi	r21, 0xFF	; 255
    111a:	ac f0       	brlt	.+42     	; 0x1146 <__stack+0x47>
    111c:	98 3e       	cpi	r25, 0xE8	; 232
    111e:	9c f0       	brlt	.+38     	; 0x1146 <__stack+0x47>
    1120:	bb 27       	eor	r27, r27
    1122:	86 95       	lsr	r24
    1124:	77 95       	ror	r23
    1126:	67 95       	ror	r22
    1128:	b7 95       	ror	r27
    112a:	08 f4       	brcc	.+2      	; 0x112e <__stack+0x2f>
    112c:	b1 60       	ori	r27, 0x01	; 1
    112e:	93 95       	inc	r25
    1130:	c1 f7       	brne	.-16     	; 0x1122 <__stack+0x23>
    1132:	bb 0f       	add	r27, r27
    1134:	58 f7       	brcc	.-42     	; 0x110c <__stack+0xd>
    1136:	11 f4       	brne	.+4      	; 0x113c <__stack+0x3d>
    1138:	60 ff       	sbrs	r22, 0
    113a:	e8 cf       	rjmp	.-48     	; 0x110c <__stack+0xd>
    113c:	6f 5f       	subi	r22, 0xFF	; 255
    113e:	7f 4f       	sbci	r23, 0xFF	; 255
    1140:	8f 4f       	sbci	r24, 0xFF	; 255
    1142:	9f 4f       	sbci	r25, 0xFF	; 255
    1144:	e3 cf       	rjmp	.-58     	; 0x110c <__stack+0xd>
    1146:	12 cf       	rjmp	.-476    	; 0xf6c <__fp_szero>
    1148:	0e f0       	brts	.+2      	; 0x114c <__stack+0x4d>
    114a:	a6 c1       	rjmp	.+844    	; 0x1498 <__fp_mpack>
    114c:	98 cf       	rjmp	.-208    	; 0x107e <__fp_nan>
    114e:	68 94       	set
    1150:	90 cf       	rjmp	.-224    	; 0x1072 <__fp_inf>

00001152 <log>:
    1152:	f1 de       	rcall	.-542    	; 0xf36 <__fp_splitA>
    1154:	c8 f3       	brcs	.-14     	; 0x1148 <__stack+0x49>
    1156:	99 23       	and	r25, r25
    1158:	d1 f3       	breq	.-12     	; 0x114e <__stack+0x4f>
    115a:	c6 f3       	brts	.-16     	; 0x114c <__stack+0x4d>
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	1f 93       	push	r17
    1162:	0f 93       	push	r16
    1164:	ff 92       	push	r15
    1166:	c9 2f       	mov	r28, r25
    1168:	dd 27       	eor	r29, r29
    116a:	88 23       	and	r24, r24
    116c:	2a f0       	brmi	.+10     	; 0x1178 <log+0x26>
    116e:	21 97       	sbiw	r28, 0x01	; 1
    1170:	66 0f       	add	r22, r22
    1172:	77 1f       	adc	r23, r23
    1174:	88 1f       	adc	r24, r24
    1176:	da f7       	brpl	.-10     	; 0x116e <log+0x1c>
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e8       	ldi	r20, 0x80	; 128
    117e:	5f eb       	ldi	r21, 0xBF	; 191
    1180:	9f e3       	ldi	r25, 0x3F	; 63
    1182:	88 39       	cpi	r24, 0x98	; 152
    1184:	20 f0       	brcs	.+8      	; 0x118e <log+0x3c>
    1186:	80 3e       	cpi	r24, 0xE0	; 224
    1188:	30 f0       	brcs	.+12     	; 0x1196 <log+0x44>
    118a:	21 96       	adiw	r28, 0x01	; 1
    118c:	8f 77       	andi	r24, 0x7F	; 127
    118e:	b8 d0       	rcall	.+368    	; 0x1300 <__addsf3>
    1190:	e4 ea       	ldi	r30, 0xA4	; 164
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	03 c0       	rjmp	.+6      	; 0x119c <log+0x4a>
    1196:	b4 d0       	rcall	.+360    	; 0x1300 <__addsf3>
    1198:	e1 ed       	ldi	r30, 0xD1	; 209
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	73 df       	rcall	.-282    	; 0x1084 <__fp_powser>
    119e:	8b 01       	movw	r16, r22
    11a0:	be 01       	movw	r22, r28
    11a2:	ec 01       	movw	r28, r24
    11a4:	fb 2e       	mov	r15, r27
    11a6:	6f 57       	subi	r22, 0x7F	; 127
    11a8:	71 09       	sbc	r23, r1
    11aa:	75 95       	asr	r23
    11ac:	77 1f       	adc	r23, r23
    11ae:	88 0b       	sbc	r24, r24
    11b0:	99 0b       	sbc	r25, r25
    11b2:	7e de       	rcall	.-772    	; 0xeb0 <__floatsisf>
    11b4:	28 e1       	ldi	r18, 0x18	; 24
    11b6:	32 e7       	ldi	r19, 0x72	; 114
    11b8:	41 e3       	ldi	r20, 0x31	; 49
    11ba:	5f e3       	ldi	r21, 0x3F	; 63
    11bc:	49 d0       	rcall	.+146    	; 0x1250 <__mulsf3x>
    11be:	af 2d       	mov	r26, r15
    11c0:	98 01       	movw	r18, r16
    11c2:	ae 01       	movw	r20, r28
    11c4:	ff 90       	pop	r15
    11c6:	0f 91       	pop	r16
    11c8:	1f 91       	pop	r17
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	a9 d0       	rcall	.+338    	; 0x1322 <__addsf3x>
    11d0:	7f c1       	rjmp	.+766    	; 0x14d0 <__fp_round>

000011d2 <modf>:
    11d2:	fa 01       	movw	r30, r20
    11d4:	dc 01       	movw	r26, r24
    11d6:	aa 0f       	add	r26, r26
    11d8:	bb 1f       	adc	r27, r27
    11da:	9b 01       	movw	r18, r22
    11dc:	ac 01       	movw	r20, r24
    11de:	bf 57       	subi	r27, 0x7F	; 127
    11e0:	28 f4       	brcc	.+10     	; 0x11ec <modf+0x1a>
    11e2:	22 27       	eor	r18, r18
    11e4:	33 27       	eor	r19, r19
    11e6:	44 27       	eor	r20, r20
    11e8:	50 78       	andi	r21, 0x80	; 128
    11ea:	1f c0       	rjmp	.+62     	; 0x122a <modf+0x58>
    11ec:	b7 51       	subi	r27, 0x17	; 23
    11ee:	88 f4       	brcc	.+34     	; 0x1212 <modf+0x40>
    11f0:	ab 2f       	mov	r26, r27
    11f2:	00 24       	eor	r0, r0
    11f4:	46 95       	lsr	r20
    11f6:	37 95       	ror	r19
    11f8:	27 95       	ror	r18
    11fa:	01 1c       	adc	r0, r1
    11fc:	a3 95       	inc	r26
    11fe:	d2 f3       	brmi	.-12     	; 0x11f4 <modf+0x22>
    1200:	00 20       	and	r0, r0
    1202:	69 f0       	breq	.+26     	; 0x121e <modf+0x4c>
    1204:	22 0f       	add	r18, r18
    1206:	33 1f       	adc	r19, r19
    1208:	44 1f       	adc	r20, r20
    120a:	b3 95       	inc	r27
    120c:	da f3       	brmi	.-10     	; 0x1204 <modf+0x32>
    120e:	0d d0       	rcall	.+26     	; 0x122a <modf+0x58>
    1210:	76 c0       	rjmp	.+236    	; 0x12fe <__subsf3>
    1212:	61 30       	cpi	r22, 0x01	; 1
    1214:	71 05       	cpc	r23, r1
    1216:	a0 e8       	ldi	r26, 0x80	; 128
    1218:	8a 07       	cpc	r24, r26
    121a:	b9 46       	sbci	r27, 0x69	; 105
    121c:	30 f4       	brcc	.+12     	; 0x122a <modf+0x58>
    121e:	9b 01       	movw	r18, r22
    1220:	ac 01       	movw	r20, r24
    1222:	66 27       	eor	r22, r22
    1224:	77 27       	eor	r23, r23
    1226:	88 27       	eor	r24, r24
    1228:	90 78       	andi	r25, 0x80	; 128
    122a:	30 96       	adiw	r30, 0x00	; 0
    122c:	21 f0       	breq	.+8      	; 0x1236 <modf+0x64>
    122e:	20 83       	st	Z, r18
    1230:	31 83       	std	Z+1, r19	; 0x01
    1232:	42 83       	std	Z+2, r20	; 0x02
    1234:	53 83       	std	Z+3, r21	; 0x03
    1236:	08 95       	ret

00001238 <__mulsf3>:
    1238:	0b d0       	rcall	.+22     	; 0x1250 <__mulsf3x>
    123a:	4a c1       	rjmp	.+660    	; 0x14d0 <__fp_round>
    123c:	3b d1       	rcall	.+630    	; 0x14b4 <__fp_pscA>
    123e:	28 f0       	brcs	.+10     	; 0x124a <__mulsf3+0x12>
    1240:	40 d1       	rcall	.+640    	; 0x14c2 <__fp_pscB>
    1242:	18 f0       	brcs	.+6      	; 0x124a <__mulsf3+0x12>
    1244:	95 23       	and	r25, r21
    1246:	09 f0       	breq	.+2      	; 0x124a <__mulsf3+0x12>
    1248:	14 cf       	rjmp	.-472    	; 0x1072 <__fp_inf>
    124a:	19 cf       	rjmp	.-462    	; 0x107e <__fp_nan>
    124c:	11 24       	eor	r1, r1
    124e:	8e ce       	rjmp	.-740    	; 0xf6c <__fp_szero>

00001250 <__mulsf3x>:
    1250:	6a de       	rcall	.-812    	; 0xf26 <__fp_split3>
    1252:	a0 f3       	brcs	.-24     	; 0x123c <__mulsf3+0x4>

00001254 <__mulsf3_pse>:
    1254:	95 9f       	mul	r25, r21
    1256:	d1 f3       	breq	.-12     	; 0x124c <__mulsf3+0x14>
    1258:	95 0f       	add	r25, r21
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	55 1f       	adc	r21, r21
    125e:	62 9f       	mul	r22, r18
    1260:	f0 01       	movw	r30, r0
    1262:	72 9f       	mul	r23, r18
    1264:	bb 27       	eor	r27, r27
    1266:	f0 0d       	add	r31, r0
    1268:	b1 1d       	adc	r27, r1
    126a:	63 9f       	mul	r22, r19
    126c:	aa 27       	eor	r26, r26
    126e:	f0 0d       	add	r31, r0
    1270:	b1 1d       	adc	r27, r1
    1272:	aa 1f       	adc	r26, r26
    1274:	64 9f       	mul	r22, r20
    1276:	66 27       	eor	r22, r22
    1278:	b0 0d       	add	r27, r0
    127a:	a1 1d       	adc	r26, r1
    127c:	66 1f       	adc	r22, r22
    127e:	82 9f       	mul	r24, r18
    1280:	22 27       	eor	r18, r18
    1282:	b0 0d       	add	r27, r0
    1284:	a1 1d       	adc	r26, r1
    1286:	62 1f       	adc	r22, r18
    1288:	73 9f       	mul	r23, r19
    128a:	b0 0d       	add	r27, r0
    128c:	a1 1d       	adc	r26, r1
    128e:	62 1f       	adc	r22, r18
    1290:	83 9f       	mul	r24, r19
    1292:	a0 0d       	add	r26, r0
    1294:	61 1d       	adc	r22, r1
    1296:	22 1f       	adc	r18, r18
    1298:	74 9f       	mul	r23, r20
    129a:	33 27       	eor	r19, r19
    129c:	a0 0d       	add	r26, r0
    129e:	61 1d       	adc	r22, r1
    12a0:	23 1f       	adc	r18, r19
    12a2:	84 9f       	mul	r24, r20
    12a4:	60 0d       	add	r22, r0
    12a6:	21 1d       	adc	r18, r1
    12a8:	82 2f       	mov	r24, r18
    12aa:	76 2f       	mov	r23, r22
    12ac:	6a 2f       	mov	r22, r26
    12ae:	11 24       	eor	r1, r1
    12b0:	9f 57       	subi	r25, 0x7F	; 127
    12b2:	50 40       	sbci	r21, 0x00	; 0
    12b4:	8a f0       	brmi	.+34     	; 0x12d8 <__mulsf3_pse+0x84>
    12b6:	e1 f0       	breq	.+56     	; 0x12f0 <__mulsf3_pse+0x9c>
    12b8:	88 23       	and	r24, r24
    12ba:	4a f0       	brmi	.+18     	; 0x12ce <__mulsf3_pse+0x7a>
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	bb 1f       	adc	r27, r27
    12c2:	66 1f       	adc	r22, r22
    12c4:	77 1f       	adc	r23, r23
    12c6:	88 1f       	adc	r24, r24
    12c8:	91 50       	subi	r25, 0x01	; 1
    12ca:	50 40       	sbci	r21, 0x00	; 0
    12cc:	a9 f7       	brne	.-22     	; 0x12b8 <__mulsf3_pse+0x64>
    12ce:	9e 3f       	cpi	r25, 0xFE	; 254
    12d0:	51 05       	cpc	r21, r1
    12d2:	70 f0       	brcs	.+28     	; 0x12f0 <__mulsf3_pse+0x9c>
    12d4:	ce ce       	rjmp	.-612    	; 0x1072 <__fp_inf>
    12d6:	4a ce       	rjmp	.-876    	; 0xf6c <__fp_szero>
    12d8:	5f 3f       	cpi	r21, 0xFF	; 255
    12da:	ec f3       	brlt	.-6      	; 0x12d6 <__mulsf3_pse+0x82>
    12dc:	98 3e       	cpi	r25, 0xE8	; 232
    12de:	dc f3       	brlt	.-10     	; 0x12d6 <__mulsf3_pse+0x82>
    12e0:	86 95       	lsr	r24
    12e2:	77 95       	ror	r23
    12e4:	67 95       	ror	r22
    12e6:	b7 95       	ror	r27
    12e8:	f7 95       	ror	r31
    12ea:	e7 95       	ror	r30
    12ec:	9f 5f       	subi	r25, 0xFF	; 255
    12ee:	c1 f7       	brne	.-16     	; 0x12e0 <__mulsf3_pse+0x8c>
    12f0:	fe 2b       	or	r31, r30
    12f2:	88 0f       	add	r24, r24
    12f4:	91 1d       	adc	r25, r1
    12f6:	96 95       	lsr	r25
    12f8:	87 95       	ror	r24
    12fa:	97 f9       	bld	r25, 7
    12fc:	08 95       	ret

000012fe <__subsf3>:
    12fe:	50 58       	subi	r21, 0x80	; 128

00001300 <__addsf3>:
    1300:	bb 27       	eor	r27, r27
    1302:	aa 27       	eor	r26, r26
    1304:	0e d0       	rcall	.+28     	; 0x1322 <__addsf3x>
    1306:	e4 c0       	rjmp	.+456    	; 0x14d0 <__fp_round>
    1308:	d5 d0       	rcall	.+426    	; 0x14b4 <__fp_pscA>
    130a:	30 f0       	brcs	.+12     	; 0x1318 <__addsf3+0x18>
    130c:	da d0       	rcall	.+436    	; 0x14c2 <__fp_pscB>
    130e:	20 f0       	brcs	.+8      	; 0x1318 <__addsf3+0x18>
    1310:	31 f4       	brne	.+12     	; 0x131e <__addsf3+0x1e>
    1312:	9f 3f       	cpi	r25, 0xFF	; 255
    1314:	11 f4       	brne	.+4      	; 0x131a <__addsf3+0x1a>
    1316:	1e f4       	brtc	.+6      	; 0x131e <__addsf3+0x1e>
    1318:	b2 ce       	rjmp	.-668    	; 0x107e <__fp_nan>
    131a:	0e f4       	brtc	.+2      	; 0x131e <__addsf3+0x1e>
    131c:	e0 95       	com	r30
    131e:	e7 fb       	bst	r30, 7
    1320:	a8 ce       	rjmp	.-688    	; 0x1072 <__fp_inf>

00001322 <__addsf3x>:
    1322:	e9 2f       	mov	r30, r25
    1324:	00 de       	rcall	.-1024   	; 0xf26 <__fp_split3>
    1326:	80 f3       	brcs	.-32     	; 0x1308 <__addsf3+0x8>
    1328:	ba 17       	cp	r27, r26
    132a:	62 07       	cpc	r22, r18
    132c:	73 07       	cpc	r23, r19
    132e:	84 07       	cpc	r24, r20
    1330:	95 07       	cpc	r25, r21
    1332:	18 f0       	brcs	.+6      	; 0x133a <__addsf3x+0x18>
    1334:	71 f4       	brne	.+28     	; 0x1352 <__addsf3x+0x30>
    1336:	9e f5       	brtc	.+102    	; 0x139e <__addsf3x+0x7c>
    1338:	18 ce       	rjmp	.-976    	; 0xf6a <__fp_zero>
    133a:	0e f4       	brtc	.+2      	; 0x133e <__addsf3x+0x1c>
    133c:	e0 95       	com	r30
    133e:	0b 2e       	mov	r0, r27
    1340:	ba 2f       	mov	r27, r26
    1342:	a0 2d       	mov	r26, r0
    1344:	0b 01       	movw	r0, r22
    1346:	b9 01       	movw	r22, r18
    1348:	90 01       	movw	r18, r0
    134a:	0c 01       	movw	r0, r24
    134c:	ca 01       	movw	r24, r20
    134e:	a0 01       	movw	r20, r0
    1350:	11 24       	eor	r1, r1
    1352:	ff 27       	eor	r31, r31
    1354:	59 1b       	sub	r21, r25
    1356:	99 f0       	breq	.+38     	; 0x137e <__addsf3x+0x5c>
    1358:	59 3f       	cpi	r21, 0xF9	; 249
    135a:	50 f4       	brcc	.+20     	; 0x1370 <__addsf3x+0x4e>
    135c:	50 3e       	cpi	r21, 0xE0	; 224
    135e:	68 f1       	brcs	.+90     	; 0x13ba <__addsf3x+0x98>
    1360:	1a 16       	cp	r1, r26
    1362:	f0 40       	sbci	r31, 0x00	; 0
    1364:	a2 2f       	mov	r26, r18
    1366:	23 2f       	mov	r18, r19
    1368:	34 2f       	mov	r19, r20
    136a:	44 27       	eor	r20, r20
    136c:	58 5f       	subi	r21, 0xF8	; 248
    136e:	f3 cf       	rjmp	.-26     	; 0x1356 <__addsf3x+0x34>
    1370:	46 95       	lsr	r20
    1372:	37 95       	ror	r19
    1374:	27 95       	ror	r18
    1376:	a7 95       	ror	r26
    1378:	f0 40       	sbci	r31, 0x00	; 0
    137a:	53 95       	inc	r21
    137c:	c9 f7       	brne	.-14     	; 0x1370 <__addsf3x+0x4e>
    137e:	7e f4       	brtc	.+30     	; 0x139e <__addsf3x+0x7c>
    1380:	1f 16       	cp	r1, r31
    1382:	ba 0b       	sbc	r27, r26
    1384:	62 0b       	sbc	r22, r18
    1386:	73 0b       	sbc	r23, r19
    1388:	84 0b       	sbc	r24, r20
    138a:	ba f0       	brmi	.+46     	; 0x13ba <__addsf3x+0x98>
    138c:	91 50       	subi	r25, 0x01	; 1
    138e:	a1 f0       	breq	.+40     	; 0x13b8 <__addsf3x+0x96>
    1390:	ff 0f       	add	r31, r31
    1392:	bb 1f       	adc	r27, r27
    1394:	66 1f       	adc	r22, r22
    1396:	77 1f       	adc	r23, r23
    1398:	88 1f       	adc	r24, r24
    139a:	c2 f7       	brpl	.-16     	; 0x138c <__addsf3x+0x6a>
    139c:	0e c0       	rjmp	.+28     	; 0x13ba <__addsf3x+0x98>
    139e:	ba 0f       	add	r27, r26
    13a0:	62 1f       	adc	r22, r18
    13a2:	73 1f       	adc	r23, r19
    13a4:	84 1f       	adc	r24, r20
    13a6:	48 f4       	brcc	.+18     	; 0x13ba <__addsf3x+0x98>
    13a8:	87 95       	ror	r24
    13aa:	77 95       	ror	r23
    13ac:	67 95       	ror	r22
    13ae:	b7 95       	ror	r27
    13b0:	f7 95       	ror	r31
    13b2:	9e 3f       	cpi	r25, 0xFE	; 254
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <__addsf3x+0x96>
    13b6:	b3 cf       	rjmp	.-154    	; 0x131e <__addsf3+0x1e>
    13b8:	93 95       	inc	r25
    13ba:	88 0f       	add	r24, r24
    13bc:	08 f0       	brcs	.+2      	; 0x13c0 <__addsf3x+0x9e>
    13be:	99 27       	eor	r25, r25
    13c0:	ee 0f       	add	r30, r30
    13c2:	97 95       	ror	r25
    13c4:	87 95       	ror	r24
    13c6:	08 95       	ret

000013c8 <__divsf3>:
    13c8:	0c d0       	rcall	.+24     	; 0x13e2 <__divsf3x>
    13ca:	82 c0       	rjmp	.+260    	; 0x14d0 <__fp_round>
    13cc:	7a d0       	rcall	.+244    	; 0x14c2 <__fp_pscB>
    13ce:	40 f0       	brcs	.+16     	; 0x13e0 <__divsf3+0x18>
    13d0:	71 d0       	rcall	.+226    	; 0x14b4 <__fp_pscA>
    13d2:	30 f0       	brcs	.+12     	; 0x13e0 <__divsf3+0x18>
    13d4:	21 f4       	brne	.+8      	; 0x13de <__divsf3+0x16>
    13d6:	5f 3f       	cpi	r21, 0xFF	; 255
    13d8:	19 f0       	breq	.+6      	; 0x13e0 <__divsf3+0x18>
    13da:	4b ce       	rjmp	.-874    	; 0x1072 <__fp_inf>
    13dc:	51 11       	cpse	r21, r1
    13de:	c6 cd       	rjmp	.-1140   	; 0xf6c <__fp_szero>
    13e0:	4e ce       	rjmp	.-868    	; 0x107e <__fp_nan>

000013e2 <__divsf3x>:
    13e2:	a1 dd       	rcall	.-1214   	; 0xf26 <__fp_split3>
    13e4:	98 f3       	brcs	.-26     	; 0x13cc <__divsf3+0x4>

000013e6 <__divsf3_pse>:
    13e6:	99 23       	and	r25, r25
    13e8:	c9 f3       	breq	.-14     	; 0x13dc <__divsf3+0x14>
    13ea:	55 23       	and	r21, r21
    13ec:	b1 f3       	breq	.-20     	; 0x13da <__divsf3+0x12>
    13ee:	95 1b       	sub	r25, r21
    13f0:	55 0b       	sbc	r21, r21
    13f2:	bb 27       	eor	r27, r27
    13f4:	aa 27       	eor	r26, r26
    13f6:	62 17       	cp	r22, r18
    13f8:	73 07       	cpc	r23, r19
    13fa:	84 07       	cpc	r24, r20
    13fc:	38 f0       	brcs	.+14     	; 0x140c <__divsf3_pse+0x26>
    13fe:	9f 5f       	subi	r25, 0xFF	; 255
    1400:	5f 4f       	sbci	r21, 0xFF	; 255
    1402:	22 0f       	add	r18, r18
    1404:	33 1f       	adc	r19, r19
    1406:	44 1f       	adc	r20, r20
    1408:	aa 1f       	adc	r26, r26
    140a:	a9 f3       	breq	.-22     	; 0x13f6 <__divsf3_pse+0x10>
    140c:	33 d0       	rcall	.+102    	; 0x1474 <__divsf3_pse+0x8e>
    140e:	0e 2e       	mov	r0, r30
    1410:	3a f0       	brmi	.+14     	; 0x1420 <__divsf3_pse+0x3a>
    1412:	e0 e8       	ldi	r30, 0x80	; 128
    1414:	30 d0       	rcall	.+96     	; 0x1476 <__divsf3_pse+0x90>
    1416:	91 50       	subi	r25, 0x01	; 1
    1418:	50 40       	sbci	r21, 0x00	; 0
    141a:	e6 95       	lsr	r30
    141c:	00 1c       	adc	r0, r0
    141e:	ca f7       	brpl	.-14     	; 0x1412 <__divsf3_pse+0x2c>
    1420:	29 d0       	rcall	.+82     	; 0x1474 <__divsf3_pse+0x8e>
    1422:	fe 2f       	mov	r31, r30
    1424:	27 d0       	rcall	.+78     	; 0x1474 <__divsf3_pse+0x8e>
    1426:	66 0f       	add	r22, r22
    1428:	77 1f       	adc	r23, r23
    142a:	88 1f       	adc	r24, r24
    142c:	bb 1f       	adc	r27, r27
    142e:	26 17       	cp	r18, r22
    1430:	37 07       	cpc	r19, r23
    1432:	48 07       	cpc	r20, r24
    1434:	ab 07       	cpc	r26, r27
    1436:	b0 e8       	ldi	r27, 0x80	; 128
    1438:	09 f0       	breq	.+2      	; 0x143c <__divsf3_pse+0x56>
    143a:	bb 0b       	sbc	r27, r27
    143c:	80 2d       	mov	r24, r0
    143e:	bf 01       	movw	r22, r30
    1440:	ff 27       	eor	r31, r31
    1442:	93 58       	subi	r25, 0x83	; 131
    1444:	5f 4f       	sbci	r21, 0xFF	; 255
    1446:	2a f0       	brmi	.+10     	; 0x1452 <__divsf3_pse+0x6c>
    1448:	9e 3f       	cpi	r25, 0xFE	; 254
    144a:	51 05       	cpc	r21, r1
    144c:	68 f0       	brcs	.+26     	; 0x1468 <__divsf3_pse+0x82>
    144e:	11 ce       	rjmp	.-990    	; 0x1072 <__fp_inf>
    1450:	8d cd       	rjmp	.-1254   	; 0xf6c <__fp_szero>
    1452:	5f 3f       	cpi	r21, 0xFF	; 255
    1454:	ec f3       	brlt	.-6      	; 0x1450 <__divsf3_pse+0x6a>
    1456:	98 3e       	cpi	r25, 0xE8	; 232
    1458:	dc f3       	brlt	.-10     	; 0x1450 <__divsf3_pse+0x6a>
    145a:	86 95       	lsr	r24
    145c:	77 95       	ror	r23
    145e:	67 95       	ror	r22
    1460:	b7 95       	ror	r27
    1462:	f7 95       	ror	r31
    1464:	9f 5f       	subi	r25, 0xFF	; 255
    1466:	c9 f7       	brne	.-14     	; 0x145a <__divsf3_pse+0x74>
    1468:	88 0f       	add	r24, r24
    146a:	91 1d       	adc	r25, r1
    146c:	96 95       	lsr	r25
    146e:	87 95       	ror	r24
    1470:	97 f9       	bld	r25, 7
    1472:	08 95       	ret
    1474:	e1 e0       	ldi	r30, 0x01	; 1
    1476:	66 0f       	add	r22, r22
    1478:	77 1f       	adc	r23, r23
    147a:	88 1f       	adc	r24, r24
    147c:	bb 1f       	adc	r27, r27
    147e:	62 17       	cp	r22, r18
    1480:	73 07       	cpc	r23, r19
    1482:	84 07       	cpc	r24, r20
    1484:	ba 07       	cpc	r27, r26
    1486:	20 f0       	brcs	.+8      	; 0x1490 <__divsf3_pse+0xaa>
    1488:	62 1b       	sub	r22, r18
    148a:	73 0b       	sbc	r23, r19
    148c:	84 0b       	sbc	r24, r20
    148e:	ba 0b       	sbc	r27, r26
    1490:	ee 1f       	adc	r30, r30
    1492:	88 f7       	brcc	.-30     	; 0x1476 <__divsf3_pse+0x90>
    1494:	e0 95       	com	r30
    1496:	08 95       	ret

00001498 <__fp_mpack>:
    1498:	9f 3f       	cpi	r25, 0xFF	; 255
    149a:	31 f0       	breq	.+12     	; 0x14a8 <__fp_mpack_finite+0xc>

0000149c <__fp_mpack_finite>:
    149c:	91 50       	subi	r25, 0x01	; 1
    149e:	20 f4       	brcc	.+8      	; 0x14a8 <__fp_mpack_finite+0xc>
    14a0:	87 95       	ror	r24
    14a2:	77 95       	ror	r23
    14a4:	67 95       	ror	r22
    14a6:	b7 95       	ror	r27
    14a8:	88 0f       	add	r24, r24
    14aa:	91 1d       	adc	r25, r1
    14ac:	96 95       	lsr	r25
    14ae:	87 95       	ror	r24
    14b0:	97 f9       	bld	r25, 7
    14b2:	08 95       	ret

000014b4 <__fp_pscA>:
    14b4:	00 24       	eor	r0, r0
    14b6:	0a 94       	dec	r0
    14b8:	16 16       	cp	r1, r22
    14ba:	17 06       	cpc	r1, r23
    14bc:	18 06       	cpc	r1, r24
    14be:	09 06       	cpc	r0, r25
    14c0:	08 95       	ret

000014c2 <__fp_pscB>:
    14c2:	00 24       	eor	r0, r0
    14c4:	0a 94       	dec	r0
    14c6:	12 16       	cp	r1, r18
    14c8:	13 06       	cpc	r1, r19
    14ca:	14 06       	cpc	r1, r20
    14cc:	05 06       	cpc	r0, r21
    14ce:	08 95       	ret

000014d0 <__fp_round>:
    14d0:	09 2e       	mov	r0, r25
    14d2:	03 94       	inc	r0
    14d4:	00 0c       	add	r0, r0
    14d6:	11 f4       	brne	.+4      	; 0x14dc <__fp_round+0xc>
    14d8:	88 23       	and	r24, r24
    14da:	52 f0       	brmi	.+20     	; 0x14f0 <__fp_round+0x20>
    14dc:	bb 0f       	add	r27, r27
    14de:	40 f4       	brcc	.+16     	; 0x14f0 <__fp_round+0x20>
    14e0:	bf 2b       	or	r27, r31
    14e2:	11 f4       	brne	.+4      	; 0x14e8 <__fp_round+0x18>
    14e4:	60 ff       	sbrs	r22, 0
    14e6:	04 c0       	rjmp	.+8      	; 0x14f0 <__fp_round+0x20>
    14e8:	6f 5f       	subi	r22, 0xFF	; 255
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	8f 4f       	sbci	r24, 0xFF	; 255
    14ee:	9f 4f       	sbci	r25, 0xFF	; 255
    14f0:	08 95       	ret

000014f2 <__mulsi3>:
    14f2:	62 9f       	mul	r22, r18
    14f4:	d0 01       	movw	r26, r0
    14f6:	73 9f       	mul	r23, r19
    14f8:	f0 01       	movw	r30, r0
    14fa:	82 9f       	mul	r24, r18
    14fc:	e0 0d       	add	r30, r0
    14fe:	f1 1d       	adc	r31, r1
    1500:	64 9f       	mul	r22, r20
    1502:	e0 0d       	add	r30, r0
    1504:	f1 1d       	adc	r31, r1
    1506:	92 9f       	mul	r25, r18
    1508:	f0 0d       	add	r31, r0
    150a:	83 9f       	mul	r24, r19
    150c:	f0 0d       	add	r31, r0
    150e:	74 9f       	mul	r23, r20
    1510:	f0 0d       	add	r31, r0
    1512:	65 9f       	mul	r22, r21
    1514:	f0 0d       	add	r31, r0
    1516:	99 27       	eor	r25, r25
    1518:	72 9f       	mul	r23, r18
    151a:	b0 0d       	add	r27, r0
    151c:	e1 1d       	adc	r30, r1
    151e:	f9 1f       	adc	r31, r25
    1520:	63 9f       	mul	r22, r19
    1522:	b0 0d       	add	r27, r0
    1524:	e1 1d       	adc	r30, r1
    1526:	f9 1f       	adc	r31, r25
    1528:	bd 01       	movw	r22, r26
    152a:	cf 01       	movw	r24, r30
    152c:	11 24       	eor	r1, r1
    152e:	08 95       	ret

00001530 <__udivmodqi4>:
    1530:	99 1b       	sub	r25, r25
    1532:	79 e0       	ldi	r23, 0x09	; 9
    1534:	04 c0       	rjmp	.+8      	; 0x153e <__udivmodqi4_ep>

00001536 <__udivmodqi4_loop>:
    1536:	99 1f       	adc	r25, r25
    1538:	96 17       	cp	r25, r22
    153a:	08 f0       	brcs	.+2      	; 0x153e <__udivmodqi4_ep>
    153c:	96 1b       	sub	r25, r22

0000153e <__udivmodqi4_ep>:
    153e:	88 1f       	adc	r24, r24
    1540:	7a 95       	dec	r23
    1542:	c9 f7       	brne	.-14     	; 0x1536 <__udivmodqi4_loop>
    1544:	80 95       	com	r24
    1546:	08 95       	ret

00001548 <__udivmodhi4>:
    1548:	aa 1b       	sub	r26, r26
    154a:	bb 1b       	sub	r27, r27
    154c:	51 e1       	ldi	r21, 0x11	; 17
    154e:	07 c0       	rjmp	.+14     	; 0x155e <__udivmodhi4_ep>

00001550 <__udivmodhi4_loop>:
    1550:	aa 1f       	adc	r26, r26
    1552:	bb 1f       	adc	r27, r27
    1554:	a6 17       	cp	r26, r22
    1556:	b7 07       	cpc	r27, r23
    1558:	10 f0       	brcs	.+4      	; 0x155e <__udivmodhi4_ep>
    155a:	a6 1b       	sub	r26, r22
    155c:	b7 0b       	sbc	r27, r23

0000155e <__udivmodhi4_ep>:
    155e:	88 1f       	adc	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	5a 95       	dec	r21
    1564:	a9 f7       	brne	.-22     	; 0x1550 <__udivmodhi4_loop>
    1566:	80 95       	com	r24
    1568:	90 95       	com	r25
    156a:	bc 01       	movw	r22, r24
    156c:	cd 01       	movw	r24, r26
    156e:	08 95       	ret

00001570 <__udivmodsi4>:
    1570:	a1 e2       	ldi	r26, 0x21	; 33
    1572:	1a 2e       	mov	r1, r26
    1574:	aa 1b       	sub	r26, r26
    1576:	bb 1b       	sub	r27, r27
    1578:	fd 01       	movw	r30, r26
    157a:	0d c0       	rjmp	.+26     	; 0x1596 <__udivmodsi4_ep>

0000157c <__udivmodsi4_loop>:
    157c:	aa 1f       	adc	r26, r26
    157e:	bb 1f       	adc	r27, r27
    1580:	ee 1f       	adc	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	a2 17       	cp	r26, r18
    1586:	b3 07       	cpc	r27, r19
    1588:	e4 07       	cpc	r30, r20
    158a:	f5 07       	cpc	r31, r21
    158c:	20 f0       	brcs	.+8      	; 0x1596 <__udivmodsi4_ep>
    158e:	a2 1b       	sub	r26, r18
    1590:	b3 0b       	sbc	r27, r19
    1592:	e4 0b       	sbc	r30, r20
    1594:	f5 0b       	sbc	r31, r21

00001596 <__udivmodsi4_ep>:
    1596:	66 1f       	adc	r22, r22
    1598:	77 1f       	adc	r23, r23
    159a:	88 1f       	adc	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	1a 94       	dec	r1
    15a0:	69 f7       	brne	.-38     	; 0x157c <__udivmodsi4_loop>
    15a2:	60 95       	com	r22
    15a4:	70 95       	com	r23
    15a6:	80 95       	com	r24
    15a8:	90 95       	com	r25
    15aa:	9b 01       	movw	r18, r22
    15ac:	ac 01       	movw	r20, r24
    15ae:	bd 01       	movw	r22, r26
    15b0:	cf 01       	movw	r24, r30
    15b2:	08 95       	ret

000015b4 <__divmodsi4>:
    15b4:	97 fb       	bst	r25, 7
    15b6:	09 2e       	mov	r0, r25
    15b8:	05 26       	eor	r0, r21
    15ba:	0e d0       	rcall	.+28     	; 0x15d8 <__divmodsi4_neg1>
    15bc:	57 fd       	sbrc	r21, 7
    15be:	04 d0       	rcall	.+8      	; 0x15c8 <__divmodsi4_neg2>
    15c0:	d7 df       	rcall	.-82     	; 0x1570 <__udivmodsi4>
    15c2:	0a d0       	rcall	.+20     	; 0x15d8 <__divmodsi4_neg1>
    15c4:	00 1c       	adc	r0, r0
    15c6:	38 f4       	brcc	.+14     	; 0x15d6 <__divmodsi4_exit>

000015c8 <__divmodsi4_neg2>:
    15c8:	50 95       	com	r21
    15ca:	40 95       	com	r20
    15cc:	30 95       	com	r19
    15ce:	21 95       	neg	r18
    15d0:	3f 4f       	sbci	r19, 0xFF	; 255
    15d2:	4f 4f       	sbci	r20, 0xFF	; 255
    15d4:	5f 4f       	sbci	r21, 0xFF	; 255

000015d6 <__divmodsi4_exit>:
    15d6:	08 95       	ret

000015d8 <__divmodsi4_neg1>:
    15d8:	f6 f7       	brtc	.-4      	; 0x15d6 <__divmodsi4_exit>
    15da:	90 95       	com	r25
    15dc:	80 95       	com	r24
    15de:	70 95       	com	r23
    15e0:	61 95       	neg	r22
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	8f 4f       	sbci	r24, 0xFF	; 255
    15e6:	9f 4f       	sbci	r25, 0xFF	; 255
    15e8:	08 95       	ret

000015ea <itoa>:
    15ea:	fb 01       	movw	r30, r22
    15ec:	9f 01       	movw	r18, r30
    15ee:	e8 94       	clt
    15f0:	42 30       	cpi	r20, 0x02	; 2
    15f2:	c4 f0       	brlt	.+48     	; 0x1624 <itoa+0x3a>
    15f4:	45 32       	cpi	r20, 0x25	; 37
    15f6:	b4 f4       	brge	.+44     	; 0x1624 <itoa+0x3a>
    15f8:	4a 30       	cpi	r20, 0x0A	; 10
    15fa:	29 f4       	brne	.+10     	; 0x1606 <itoa+0x1c>
    15fc:	97 fb       	bst	r25, 7
    15fe:	1e f4       	brtc	.+6      	; 0x1606 <itoa+0x1c>
    1600:	90 95       	com	r25
    1602:	81 95       	neg	r24
    1604:	9f 4f       	sbci	r25, 0xFF	; 255
    1606:	64 2f       	mov	r22, r20
    1608:	77 27       	eor	r23, r23
    160a:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__udivmodhi4>
    160e:	80 5d       	subi	r24, 0xD0	; 208
    1610:	8a 33       	cpi	r24, 0x3A	; 58
    1612:	0c f0       	brlt	.+2      	; 0x1616 <itoa+0x2c>
    1614:	89 5d       	subi	r24, 0xD9	; 217
    1616:	81 93       	st	Z+, r24
    1618:	cb 01       	movw	r24, r22
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	a1 f7       	brne	.-24     	; 0x1606 <itoa+0x1c>
    161e:	16 f4       	brtc	.+4      	; 0x1624 <itoa+0x3a>
    1620:	5d e2       	ldi	r21, 0x2D	; 45
    1622:	51 93       	st	Z+, r21
    1624:	10 82       	st	Z, r1
    1626:	c9 01       	movw	r24, r18
    1628:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <strrev>

0000162c <puts>:
    162c:	ef 92       	push	r14
    162e:	ff 92       	push	r15
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	8c 01       	movw	r16, r24
    163a:	e0 91 56 01 	lds	r30, 0x0156
    163e:	f0 91 57 01 	lds	r31, 0x0157
    1642:	83 81       	ldd	r24, Z+3	; 0x03
    1644:	81 ff       	sbrs	r24, 1
    1646:	1f c0       	rjmp	.+62     	; 0x1686 <puts+0x5a>
    1648:	c0 e0       	ldi	r28, 0x00	; 0
    164a:	d0 e0       	ldi	r29, 0x00	; 0
    164c:	0a c0       	rjmp	.+20     	; 0x1662 <puts+0x36>
    164e:	db 01       	movw	r26, r22
    1650:	18 96       	adiw	r26, 0x08	; 8
    1652:	ed 91       	ld	r30, X+
    1654:	fc 91       	ld	r31, X
    1656:	19 97       	sbiw	r26, 0x09	; 9
    1658:	09 95       	icall
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	11 f0       	breq	.+4      	; 0x1662 <puts+0x36>
    165e:	cf ef       	ldi	r28, 0xFF	; 255
    1660:	df ef       	ldi	r29, 0xFF	; 255
    1662:	f8 01       	movw	r30, r16
    1664:	81 91       	ld	r24, Z+
    1666:	8f 01       	movw	r16, r30
    1668:	60 91 56 01 	lds	r22, 0x0156
    166c:	70 91 57 01 	lds	r23, 0x0157
    1670:	88 23       	and	r24, r24
    1672:	69 f7       	brne	.-38     	; 0x164e <puts+0x22>
    1674:	db 01       	movw	r26, r22
    1676:	18 96       	adiw	r26, 0x08	; 8
    1678:	ed 91       	ld	r30, X+
    167a:	fc 91       	ld	r31, X
    167c:	19 97       	sbiw	r26, 0x09	; 9
    167e:	8a e0       	ldi	r24, 0x0A	; 10
    1680:	09 95       	icall
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	11 f0       	breq	.+4      	; 0x168a <puts+0x5e>
    1686:	cf ef       	ldi	r28, 0xFF	; 255
    1688:	df ef       	ldi	r29, 0xFF	; 255
    168a:	ce 01       	movw	r24, r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	e6 e0       	ldi	r30, 0x06	; 6
    1692:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__epilogue_restores__+0x18>

00001696 <strrev>:
    1696:	dc 01       	movw	r26, r24
    1698:	fc 01       	movw	r30, r24
    169a:	67 2f       	mov	r22, r23
    169c:	71 91       	ld	r23, Z+
    169e:	77 23       	and	r23, r23
    16a0:	e1 f7       	brne	.-8      	; 0x169a <strrev+0x4>
    16a2:	32 97       	sbiw	r30, 0x02	; 2
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <strrev+0x18>
    16a6:	7c 91       	ld	r23, X
    16a8:	6d 93       	st	X+, r22
    16aa:	70 83       	st	Z, r23
    16ac:	62 91       	ld	r22, -Z
    16ae:	ae 17       	cp	r26, r30
    16b0:	bf 07       	cpc	r27, r31
    16b2:	c8 f3       	brcs	.-14     	; 0x16a6 <strrev+0x10>
    16b4:	08 95       	ret

000016b6 <__epilogue_restores__>:
    16b6:	2a 88       	ldd	r2, Y+18	; 0x12
    16b8:	39 88       	ldd	r3, Y+17	; 0x11
    16ba:	48 88       	ldd	r4, Y+16	; 0x10
    16bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    16be:	6e 84       	ldd	r6, Y+14	; 0x0e
    16c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    16c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    16c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    16c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    16c8:	b9 84       	ldd	r11, Y+9	; 0x09
    16ca:	c8 84       	ldd	r12, Y+8	; 0x08
    16cc:	df 80       	ldd	r13, Y+7	; 0x07
    16ce:	ee 80       	ldd	r14, Y+6	; 0x06
    16d0:	fd 80       	ldd	r15, Y+5	; 0x05
    16d2:	0c 81       	ldd	r16, Y+4	; 0x04
    16d4:	1b 81       	ldd	r17, Y+3	; 0x03
    16d6:	aa 81       	ldd	r26, Y+2	; 0x02
    16d8:	b9 81       	ldd	r27, Y+1	; 0x01
    16da:	ce 0f       	add	r28, r30
    16dc:	d1 1d       	adc	r29, r1
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	ed 01       	movw	r28, r26
    16ea:	08 95       	ret

000016ec <_exit>:
    16ec:	f8 94       	cli

000016ee <__stop_program>:
    16ee:	ff cf       	rjmp	.-2      	; 0x16ee <__stop_program>
